/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2021, 2024
==============================================
*/

/*
==================================================================
First created on: Mar/28/2021
Last modified on: Mar/05/2024

This application is meant for doing several hundred 
functional tests to provide as much coverage as possible to 
the code path of the streamsx.eval_predicate toolkit's 
major C++ native function.

There is another concise example application included in this toolkit.
That is called EvalPredicateExample which is a good one
for new users who want to learn about what the eval_predicate 
function does and how they can use it in their own applications.

The code in the main composite below targets to test the happy path
as well as the unhappy (error) path by making good and bad calls to the
eval_predicate C++ native function.

You can run this application in standalone mode if you want to.
Since there are two different operators in this application that
perform different kinds of expression (rule) evaluations, the results
getting displayed on the screen from those two operators may get mixed up.
So, it is better to run this application in distributed mode with
legacy fusion mode ON so that the results displayed from those two
operators will appear in two separate PE console log files for an 
easier viewing of the results from the evaluations.

In addition to testing the rule expression processing,
this application tests another feature of the eval_predicate
toolkit i.e. how to get a value of a specific tuple attribute as
that is expressed via a user provided string input.
You can search below for get_tuple_attribute_value to
see a few dozen different test cases on that topic.

Another feature available in the eval_prediate toolkit is to
compare the attribute values of two tuples that are made of
the same schema and to return a list containing the 
attribute names that differ in their values. In this example,
you can search for compare_tuple_attributes to see a few
test cases on that topic.

Another feature available in the eval_predicate toolkit is to
get the schema literal string of a given tuple along with the 
fully qualified attribute names and their SPL type names.
In this example, you can search for get_tuple_schema_and_attribute_info
to see a few test cases on that topic.

How can you build this test application?
----------------------------------------
1) If you are a command line person, you can use the
Makefile provided in this toolkit directory to build it.
On a Streams Linux machine, simply type 'make' from a
terminal window by being within this toolkit's top-level directory.

2) Alternatively, the extracted toolkit directory can also be 
imported into Microsoft Visual Studio Code. 
Before importing, it is a must to rename that Makefile in that 
top-level directory to Makefile.org. Only with that renaming of 
the Makefile, the example application will build correctly after 
importing the toolkit into the development environment.
==================================================================
*/
namespace com.teracloud.streams.evalpredicate.test;

// We have to declare the use of this namespace from where we will get the
// eval_predicate native functions that are called from this application.
use com.teracloud.streams.evalpredicate::*;

// This is the main composite for this application.
composite FunctionalTests {
	param
		// This constant can be used to specify whether a 
		// detailed tracing message to be displayed from inside the
		// eval_predicate function or not. [Useful for debugging.]
		expression<boolean> $EVAL_PREDICATE_TRACING : 
			(boolean)getSubmissionTimeValue("EvalPredicateTracing", "false");

		// This constant can be used to specify whether the
		// value of the tuple attribute fetched via the
		// get_tuple_attribute_value should be displayed on 
		// the console or not.
		expression<boolean> $DISPLAY_FETCHED_ATTRIBUTE_VALUE : 
			(boolean)getSubmissionTimeValue("DisplayFetchedAttributeValue", "true");
			
	type
		// These are types or schema of the tuples that we will use to 
		// evaluate different kinds of expressions.
		//
		// 1) A simple flat schema with no nesting.
		Ticker_t = rstring symbol, float32 price, uint32 quantity, 
			rstring priceInString, rstring quantityInString, 
			boolean buyOrSell, map<boolean, int32> myMap1;		

		// 2) Another simple flat schema with no nesting.
		Weather_t = rstring city, float64 humidity,
			map<int64, float64> hourlyTemperatureMap, 
			boolean sunnyDay, map<rstring, rstring> reporters;

		// 3) A made up arbitrary schema with multilevel types and  
		// nesting that includes primitive and collection data types such as 
		// sets, lists and maps. Main idea here is to have tuple types that can 
		// include all the SPL typed attributes needed for testing the 
		// eval_predicate function.
		Car_t = rstring autoMaker, set<rstring> models, 
			set<int32> rpmRange, 
			set<int64> numberOfEnginesMade, 
			set<float32> secondsForZeroToSixty, set<float64> maxEngineTemp;
		
		Plane_t = rstring airliner, boolean isBasedInUSA,
			int32 numberOfPlants,
			uint32 startingYear, int64 planesMade,
			uint64 countriesOfOperation, float32 averagePrice,
			float64 averageProfit;
			
		Hardware_t = rstring vendor, list<rstring> processorFamily,
			list<int32> processorCoreCnt, list<int64> l2CacheSize, 
			list<float32> estimatedPrice, list<float64> revenueTarget;
			
		Software_t = map<rstring,int32> productNameToId, 
			map<int32,rstring> productIdToName, 
			map<rstring,int64> productNameToOrderVolume, 
			map<int64,rstring> orderVolumeToProductName,
			map<rstring,float32> productNameToProfitMargin, 
			map<float32,rstring> profitMarginToProductName, 
			map<rstring,float64> productNameToRevenue,
			map<float64,rstring> revenueToProductName, 
			map<rstring,rstring> productNameToGuid;
		
		IntegerWorld_t = map<int32,int32> d, map<int32,int64> e,
			map<int64,int32> f , map<int64,int64> g, 
			map<int32,float32> h, map<int32,float64> i,
			map<int64,float32> j, map<int64,float64> k;
			
		FloatWorld_t = map<float32,int32> l, map<float32,int64> m,
			map<float64,int32> n , map<float64,int64> o, 
			map<float32,float32> p, map<float32,float64> q,
			map<float64,float32> r , map<float64,float64> s;
		
		GroupA_t = tuple<Car_t cars, Plane_t plane> transport,
			tuple<Hardware_t hw> rack;
			
		GroupB_t = tuple<Software_t sw> digital, 
			tuple<IntegerWorld_t iw> integers;
			
		GroupC_t = tuple<FloatWorld_t fw> reals;
		
		TestData_t = rstring testId, GroupA_t a, 
			GroupB_t b, GroupC_t c, list<Weather_t> weatherList;
		
	graph
		// Start this application with a dummy signal.
		(stream<boolean dummy> Signal as S) as SignalGenerator = Beacon() {
			param
				iterations: 1;
		}
		
		// This operator will create a single Ticker tuple and a 
		// single comprehensive TestData tuple and send it for
		// downstream processing.
		(stream<Ticker_t> MyTicker as MT;
		 stream<TestData_t> MyTestData as MTD) as DataGenerator =
		 Custom(Signal as S) {
		 	logic
				onTuple S: {
					// Let us populate the tuple attributes with proper values.
					mutable Ticker_t myTicker = {};
					myTicker.symbol = "INTC";
					myTicker.price = (float32)79.25;
					myTicker.quantity = 1287u;
					myTicker.priceInString = "79.25";
					myTicker.quantityInString = "1287";					
					myTicker.buyOrSell = true;
					myTicker.myMap1 = {true:1, false:0};
					// Send this tuple out.
					submit(myTicker, MT);
					// -------------------------
					mutable Weather_t myWeather = {};
					myWeather.city = "New York";
					myWeather.humidity = 12.87;
					insertM(myWeather.hourlyTemperatureMap,
						333343l, 87.355);
					insertM(myWeather.hourlyTemperatureMap,
						443536l, 84.31);
					insertM(myWeather.hourlyTemperatureMap,
						592311l, 85.72);
					insertM(myWeather.hourlyTemperatureMap,
						693127l, 86.128);
					insertM(myWeather.hourlyTemperatureMap,
						729841l, 85.853);
					myWeather.sunnyDay = true;
					myWeather.reporters = {"WKLX's weatherwoman":"Martha O\'Leary",
						"WMRX's weatherman":"Bob O\'Donnel"};		
					
					// -------------------------
					// Create the comprehensive test data tuple now.
					mutable TestData_t myTestData = {};
					myTestData.testId = "Happy Path";
					// -------------------------
					myTestData.a.transport.cars.autoMaker = "Enzo Ferrari";
					myTestData.a.transport.cars.models = 
						{"Portofino", "Tributo", "Stradale", "Lusso"};
					myTestData.a.transport.cars.rpmRange = 
						{6000, 6367, 7050, 8700, 9000};
					myTestData.a.transport.cars.numberOfEnginesMade = 
						{424209l, 343252l, 645532l};
					myTestData.a.transport.cars.secondsForZeroToSixty = 
						{(float32)2.85, (float32)3.5, (float32)2.63, (float32)2.4};
					myTestData.a.transport.cars.maxEngineTemp = 
						{195.23, 199.65, 203.15, 197.41};
					// -------------------------
					myTestData.a.transport.plane.airliner = "Boeing";
					myTestData.a.transport.plane.isBasedInUSA = true;
					myTestData.a.transport.plane.numberOfPlants = 18;
					myTestData.a.transport.plane.startingYear = 1916u;
					myTestData.a.transport.plane.planesMade = 290000l;
					myTestData.a.transport.plane.countriesOfOperation = 65ul;
					myTestData.a.transport.plane.averagePrice = (float32)121000000.45;
					myTestData.a.transport.plane.averageProfit = 3000000000.32;
					// -------------------------
					myTestData.a.rack.hw.vendor = "Intel";
					myTestData.a.rack.hw.processorFamily = 
						["Broadwell", "Cascade Lake", "Skylake", "Denlow"];
					myTestData.a.rack.hw.processorCoreCnt = 
						[16, 20, 24, 32, 56];
					myTestData.a.rack.hw.l2CacheSize = 
						[64l, 128l, 256l, 512l, 768l];
					myTestData.a.rack.hw.estimatedPrice = 
						[(float32)248.34, (float32)398.12, (float32)849.15];
					myTestData.a.rack.hw.revenueTarget = 
						[7380412313.43, 8532312421.94, 12482031823.95];
					// -------------------------
					myTestData.b.digital.sw.productNameToId = 
					{"Star DB" : 23422, "You Chat" : 98311, "Streams" : 52984};
					myTestData.b.digital.sw.productIdToName = 
					{23422 : "Star DB", 98311 : "You Chat", 52984 : "Streams"};
					myTestData.b.digital.sw.productNameToOrderVolume = 
					{"Star DB" : 2348922l, "You Chat" : 529842l, "Streams" : 8438131l};
					myTestData.b.digital.sw.orderVolumeToProductName = 
					{2348922l : 'Star DB', 529842l : "You Chat", 8438131l : "Streams"};
					myTestData.b.digital.sw.productNameToProfitMargin =  
						{"Star DB" : (float32)92348922.45, 
					 	 "You Chat" : (float32)9529842.17, 
					 	 "Streams" : (float32)528438131.84};
					myTestData.b.digital.sw.profitMarginToProductName =  
						{(float32)92348922.45 : "Star DB",
						 (float32)9529842.17 : "You Chat",
						 (float32)528438131.84 : "Streams"};
					myTestData.b.digital.sw.productNameToRevenue = 
						{"Star DB" : 862348922.45, 
					 	 "You Chat" : 92529842.17, 
					 	 "Streams" : 945438131.84};
					myTestData.b.digital.sw.revenueToProductName = 
						{862348922.45 : "Star DB", 
					 	 92529842.17 : "You Chat", 
					 	 945438131.84 : "Streams"};
					myTestData.b.digital.sw.productNameToGuid = 
						{"Star DB" : "af46aba2-3daa-4abb-8bca-74a2593bbe83", 
					 	 "You Chat" : "9d3526eb-750f-4345-8fd3-72550428159e", 
					 	 "Streams" : "bc49e673-80d6-49ee-b775-b4f331a3b5c3"};
					// -------------------------
					myTestData.b.integers.iw.d = 
						{1 : 2, 3 : 4, 5 : 6, 7 : 8};
					myTestData.b.integers.iw.e = 
						{9 : 10l, 11 : 12l, 13 : 14l, 15 : 16l};
					myTestData.b.integers.iw.f = 
						{10l : 9, 12l : 11, 14l : 13, 16l : 15};
					myTestData.b.integers.iw.g = 
						{17l : 18l, 19l : 20l, 21l : 22l, 23l : 24l};
					myTestData.b.integers.iw.h = 
						{25 : (float32)26.23, 27 : (float32)28.95};
					myTestData.b.integers.iw.i = 
						{29 : 30.76, 31 : 32.18, 33 : 34.72};
					myTestData.b.integers.iw.j = 
						{35l : (float32)36.17, 37l : (float32)38.48};
					myTestData.b.integers.iw.k = 
						{39l : 40.27, 41l : 42.65, 43l : 44.81};					
					// -------------------------
					myTestData.c.reals.fw.l = 
						{(float32)26.23 : 25, (float32)28.95 : 27};
					myTestData.c.reals.fw.m = 
						{(float32)36.17 : 35l, (float32)38.48 : 37l};
					myTestData.c.reals.fw.n = 
						{30.76 : 29, 32.18 : 31, 34.72 : 33};
					myTestData.c.reals.fw.o = 
						{40.27 : 39l, 42.65 : 41l, 44.81 : 43l};
					myTestData.c.reals.fw.p = 
						{(float32)45.56 : (float32)46.12, (float32)47.26 : (float32)48.74};
					myTestData.c.reals.fw.q = 
						{(float32)49.81 : 50.03, (float32)51.12 : 52.63};
					myTestData.c.reals.fw.r = 
						{53.25 : (float32)54.85, 55.37 : (float32)56.29, 57.55 : (float32)58.48};
					myTestData.c.reals.fw.s = 
						{59.09 : 60.14, 61.28 : 62.37, 63.15 : 64.65};
					// -------------------------
					appendM(myTestData.weatherList, myWeather);
					// -------------------------
					// Send this tuple out.
					submit(myTestData, MTD);
				} // End of onTuple S.
		} // End of DataGen Custom operator.

		// In this operator, we will do the happy path tests.
		() as HappyPathSink = Custom(MyTicker as MT; MyTestData as MTD) {
			logic
				state: {
					// Store the MyTicker in a state variable if we 
					// have to use it later for any test.
					mutable Ticker_t _myTicker = {}; 
					mutable TestData_t _myTestData = {};
					mutable rstring _rule = "";
				}
				
				onTuple MT: {
					// Store it in the state.
					_myTicker = MT;
				}
				
				onTuple MTD: {
					// Store it in the state.
					_myTestData = MTD;
					
					// We will methodically do many happy path 
					// expression (rule) evaluations now.
					// The main goal here is to provide test coverage for
					// many of the eval features that we support.
					mutable int32 error = 0;
					mutable boolean result = false;
					printStringLn("This happy path operator should give " +
						"results either as eval criteria is met or not met. " +
						"It should never encounter any eval execution " + 
						"failure with a non-zero error code.");
					
					// -------------------------
					// Evaluate an expression (i.e. rule).
					// Arg1: Expression string i.e. your custom rule.
					// Arg2: Your tuple
					// Arg3: A mutable int32 variable to receive a non-zero eval error code if any.
					//       (You can refer to top of the impl/include/eval_predicate.h file in the 
					//        streamsx.eval_predicate toolkit for the meaning of a given error code.)
					// Arg4: A boolean value to enable debug tracing inside this function.
					// It returns true if the expression's evaluation criteria is met.
					// It returns false and error=0 if the expression's evaluation criteria is not met.
					// It returns a non-zero error when there is an evaluation execution failure.
					//		
					// A1.1 (boolean == operation verb)
					_rule = "(a.transport.plane.isBasedInUSA == true)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A1.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A1.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A1.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A1.2 (boolean != operation verb)
					_rule = "(a.transport.plane.isBasedInUSA != false)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A1.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A1.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A1.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// A2.1 (int32 == operation verb)
					_rule = "(a.transport.plane.numberOfPlants == 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A2.2 (int32 != operation verb)
					_rule = "(a.transport.plane.numberOfPlants != 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.3 (int32 < operation verb)
					_rule = "(a.transport.plane.numberOfPlants < 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.4 (int32 <= operation verb)
					_rule = "(a.transport.plane.numberOfPlants <= 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.5 (int32 > operation verb)
					_rule = "(a.transport.plane.numberOfPlants > 18)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.6 (int32 >= operation verb)
					_rule = "(a.transport.plane.numberOfPlants >= 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.7 (int32 + operation verb)
					_rule = "(a.transport.plane.numberOfPlants + -6 == 12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.8 (int32 - operation verb)
					_rule = "(a.transport.plane.numberOfPlants - -5 >= 23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.9 (int32 * operation verb)
					_rule = "(a.transport.plane.numberOfPlants * -3 > -55)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.10 (int32 / operation verb)
					_rule = "(a.transport.plane.numberOfPlants / -6 < -5)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A2.11 (int32 % operation verb)
					_rule = "(a.transport.plane.numberOfPlants % 7 <= 4)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A2.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A2.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A2.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// A3.1 (uint32 == operation verb)
					_rule = "(a.transport.plane.startingYear == 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A3.2 (uint32 != operation verb)
					_rule = "(a.transport.plane.startingYear != 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.3 (uint32 < operation verb)
					_rule = "(a.transport.plane.startingYear < 1916)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.4 (uint32 <= operation verb)
					_rule = "(a.transport.plane.startingYear <= 1916)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.5 (uint32 > operation verb)
					_rule = "(a.transport.plane.startingYear > 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.6 (uint32 >= operation verb)
					_rule = "(a.transport.plane.startingYear >= 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.7 (uint32 + operation verb)
					_rule = "(a.transport.plane.startingYear + 8 < 1924)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.8 (uint32 - operation verb)
					_rule = "(a.transport.plane.startingYear - 5 >= 1911)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.9 (uint32 * operation verb)
					_rule = "(a.transport.plane.startingYear * 2 >= 3832)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.10 (uint32 / operation verb)
					_rule = "(a.transport.plane.startingYear / 4 == 479)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A3.11 (uint32 % operation verb)
					_rule = "(a.transport.plane.startingYear % 9 <= 8)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A3.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A3.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A3.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A4.1 (int64 == operation verb)
					_rule = "(a.transport.plane.planesMade == 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A4.2 (int64 != operation verb)
					_rule = "(a.transport.plane.planesMade != 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.3 (int64 < operation verb)
					_rule = "(a.transport.plane.planesMade < 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.4 (int64 <= operation verb)
					_rule = "(a.transport.plane.planesMade <= 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.5 (int64 > operation verb)
					_rule = "(a.transport.plane.planesMade > 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.6 (int64 >= operation verb)
					_rule = "(a.transport.plane.planesMade >= 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.7 (int64 + operation verb)
					_rule = "(a.transport.plane.planesMade + -6 == 12)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.8 (int64 - operation verb)
					_rule = "(a.transport.plane.planesMade - -5 >= 23)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.9 (int64 * operation verb)
					_rule = "(a.transport.plane.planesMade * -3 > -55)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.10 (int64 / operation verb)
					_rule = "(a.transport.plane.planesMade / -6 < -5)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A4.11 (int64 % operation verb)
					_rule = "(a.transport.plane.planesMade % 7 <= 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A4.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A4.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A4.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A5.1 (uint64 == operation verb)
					_rule = "(a.transport.plane.countriesOfOperation == 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A5.2 (uint64 != operation verb)
					_rule = "(a.transport.plane.countriesOfOperation != 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.3 (uint64 < operation verb)
					_rule = "(a.transport.plane.countriesOfOperation < 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.4 (uint64 <= operation verb)
					_rule = "(a.transport.plane.countriesOfOperation <= 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.5 (uint64 > operation verb)
					_rule = "(a.transport.plane.countriesOfOperation > 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.6 (uint64 >= operation verb)
					_rule = "(a.transport.plane.countriesOfOperation >= 65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.7 (uint64 + operation verb)
					_rule = "(a.transport.plane.countriesOfOperation + 8 < 74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.8 (uint64 - operation verb)
					_rule = "(a.transport.plane.countriesOfOperation - 5 >= 60)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.9 (uint64 * operation verb)
					_rule = "(a.transport.plane.countriesOfOperation * 2 >= 130)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.10 (uint64 / operation verb)
					_rule = "(a.transport.plane.countriesOfOperation / 4 == 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A5.11 (uint64 % operation verb)
					_rule = "(a.transport.plane.countriesOfOperation % 9 <= 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A5.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A5.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A5.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A6.1 (float32 == operation verb)
					_rule = "(a.transport.plane.averagePrice == 121000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A6.2 (float32 != operation verb)
					_rule = "(a.transport.plane.averagePrice != 121000000.45)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.3 (float32 < operation verb)
					_rule = "(a.transport.plane.averagePrice < 121000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.4 (float32 <= operation verb)
					_rule = "(a.transport.plane.averagePrice <= 121000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.5 (float32 > operation verb)
					_rule = "(a.transport.plane.averagePrice > 121000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.6 (float32 >= operation verb)
					_rule = "(a.transport.plane.averagePrice >= 121000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.7 (float32 + operation verb)
					_rule = "(a.transport.plane.averagePrice + 8.0 < 121000009.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.8 (float32 - operation verb)
					_rule = "(a.transport.plane.averagePrice - 5.0 >= 120000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.9 (float32 * operation verb)
					_rule = "(a.transport.plane.averagePrice * 2.0 >= 242000000.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.10 (float32 / operation verb)
					_rule = "(a.transport.plane.averagePrice / 4.0 == 30250000.1125)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A6.11 (float32 % operation verb)
					_rule = "(a.transport.plane.averagePrice % 9.0 >= 3.45000000298)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A6.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A6.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A6.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A7.1 (float64 == operation verb)
					_rule = "(a.transport.plane.averageProfit == 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A7.2 (float64 != operation verb)
					_rule = "(a.transport.plane.averageProfit != 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.3 (float64 < operation verb)
					_rule = "(a.transport.plane.averageProfit < 3000000034.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.4 (float64 <= operation verb)
					_rule = "(a.transport.plane.averageProfit <= 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.5 (float64 > operation verb)
					_rule = "(a.transport.plane.averageProfit > 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.6 (float64 >= operation verb)
					_rule = "(a.transport.plane.averageProfit >= 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.7 (float64 + operation verb)
					_rule = "(a.transport.plane.averageProfit + 8.0 < 3000000010.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.8 (float64 - operation verb)
					_rule = "(a.transport.plane.averageProfit - 5.0 >= 3000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.9 (float64 * operation verb)
					_rule = "(a.transport.plane.averageProfit * 2.0 >= 6000000000.3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.10 (float64 / operation verb)
					_rule = "(a.transport.plane.averageProfit / 4.0 == 750000000.075)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A7.11 (float64 % operation verb)
					_rule = "(a.transport.plane.averageProfit % 9.0 >= 3.30000019073)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A7.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A7.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A7.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A8.1 (rstring == operation verb)
					_rule = "(a.transport.plane.airliner == 'Boeing')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A8.2 (rstring != operation verb)
					_rule = "(a.transport.plane.airliner != 'Boeing')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.3 (rstring contains operation verb)
					_rule = "(a.transport.plane.airliner contains 'oei')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.4 (rstring notContains operation verb)
					_rule = "(a.transport.plane.airliner notContains 'micro')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.5 (rstring startsWith operation verb)
					_rule = "(a.transport.plane.airliner startsWith 'Boe')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.6 (rstring notStartsWith operation verb)
					_rule = "(a.transport.plane.airliner notStartsWith 'Ford')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.7 (rstring endsWith operation verb)
					_rule = "(a.transport.plane.airliner endsWith 'ing')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.8 (rstring notEndsWith operation verb)
					_rule = "(a.transport.plane.airliner notEndsWith 'eing')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A8.9 (rstring < operation verb)
					_rule = "(quantityInString < '1300')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.10 (rstring <= operation verb)
					_rule = "(priceInString <= '106.29')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.11 (rstring > operation verb)
					_rule = "(quantityInString > '5000')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.12 (rstring >= operation verb)
					_rule = "(priceInString >= '786.43')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.13 (rstring containsCI operation verb)
					_rule = "(symbol containsCI 'intc')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.13: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.14 (rstring startsWithCI operation verb)
					_rule = "(symbol startsWithCI 'In')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.14: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.15 (rstring endsWithCI operation verb)
					_rule = "(symbol endsWithCI 'tC')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.15: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.15: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.15: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.16 (rstring equalsCI operation verb)
					_rule = "(a.transport.plane.airliner equalsCI 'bOeInG')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.16: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.16: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.16: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A8.17 (rstring notContainsCI operation verb)
					_rule = "(symbol notContainsCI 'intc')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.17: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.17: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.17: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.18 (rstring notStartsWithCI operation verb)
					_rule = "(symbol notStartsWithCI 'iB')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.18: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.18: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.18: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A8.19 (rstring notEndsWithCI operation verb)
					_rule = "(symbol notEndsWithCI 'Bm')";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.19: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.19: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.19: Evaluation execution failed. Error=" + (rstring)error);
					}					
					
					// A8.20 (rstring equalsCI operation verb)
					_rule = "(a.transport.plane.airliner notEqualsCI 'bOeInK')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A8.20: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A8.20: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A8.20: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A9.1 (rstring contains operation verb)
					_rule = "(a.transport.cars.autoMaker contains  'Enzo Ferrari'  )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A9.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A9.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A9.1: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A9.2 (rstring sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.autoMaker sizeLE 12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A9.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A9.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A9.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A9.3 (set<rstring> contains operation verb)
					_rule = "(a.transport.cars.models contains 'Tributo')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A9.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A9.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A9.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A9.4 (set<rstring> notContains operation verb)
					_rule = "(a.transport.cars.models notContains 'Portofino')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A9.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A9.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A9.4: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A9.5 (set<rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.models sizeEQ 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A9.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A9.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A9.5: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A10.1 (set<int32> contains operation verb)
					_rule = "(a.transport.cars.rpmRange contains 8700)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A10.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A10.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A10.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A10.2 (set<int32> notContains operation verb)
					_rule = "(a.transport.cars.rpmRange notContains 12785)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A10.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A10.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A10.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A10.3 (set<int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.rpmRange sizeNE 5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A10.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A10.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A10.3: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A11.1 (set<int64> contains operation verb)
					_rule = "(a.transport.cars.numberOfEnginesMade contains 645532)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A11.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A11.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A11.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A11.2 (set<int64> notContains operation verb)
					_rule = "(a.transport.cars.numberOfEnginesMade notContains 343252)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A11.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A11.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A11.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A11.3 (set<int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.numberOfEnginesMade sizeLT 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A11.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A11.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A11.3: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A12.1 (set<float32> contains operation verb)
					_rule = "(a.transport.cars.secondsForZeroToSixty contains 2.63)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A12.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A12.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A12.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A12.2 (set<float32> notContains operation verb)
					_rule = "(a.transport.cars.secondsForZeroToSixty notContains 6.7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A12.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A12.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A12.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A12.3 (set<float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.secondsForZeroToSixty sizeLE 7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A12.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A12.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A12.3: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A13.1 (set<float64> contains operation verb)
					_rule = "(a.transport.cars.maxEngineTemp contains 203.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A13.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A13.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A13.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A13.2 (set<float64> notContains operation verb)
					_rule = "(a.transport.cars.maxEngineTemp notContains 197.41)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A13.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A13.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A13.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A13.3 (set<float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.cars.maxEngineTemp sizeGT 7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A13.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A13.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A13.3: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A14.1 (list<rstring> == operation verb)
					_rule = "(a.rack.hw.processorFamily[1] == 'Cascade Lake')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A14.2 (list<rstring> != operation verb)
					_rule = "(a.rack.hw.processorFamily[2] != 'Skylake')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.3 (list<rstring> contains operation verb)
					_rule = "(a.rack.hw.processorFamily contains 'Denlow')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.4 (list<rstring> notContains operation verb)
					_rule = "(a.rack.hw.processorFamily notContains 'Nehalem')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.5 (list<rstring> startsWith operation verb)
					_rule = "(a.rack.hw.processorFamily[0] startsWith 'Broad')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.6 (list<rstring> notStartsWith operation verb)
					_rule = "(a.rack.hw.processorFamily  [  0  ] notStartsWith 'amd')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.7 (list<rstring> endsWith operation verb)
					_rule = "(a.rack.hw.processorFamily[1] endsWith ' Lake')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.8 (list<rstring> notEndsWith operation verb)
					_rule = "(a.rack.hw.processorFamily[3] notEndsWith 'low')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A14.9 (list<rstring> contains operation verb)
					_rule = "(a.rack.hw.processorFamily[0] contains 'well')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A14.10 (list<rstring> notContains operation verb)
					_rule = "(a.rack.hw.processorFamily[3] notContains 'Den')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A14.11 (list<rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.processorFamily sizeGE 5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A14.12 (list<rstring>[idx] sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.processorFamily[2] sizeEQ 7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A14.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A14.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A14.12: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A15.1 (list<int32> == operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[4] == 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A15.2 (list<int32> != operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[1] != 20)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A15.3 (list<int32> < operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[3] < 33)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.4 (list<int32> <= operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[0] <= 15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.5 (list<int32> > operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[2] > 23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.6 (list<int32> >= operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[4] >= 57)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.7 (list<int32> + operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[0] + -6 == 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.8 (list<int32> - operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[3] - -5 >= 37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.9 (list<int32> * operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[1] * -3 > -65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.10 (list<int32> / operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[4] / 28 < 3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.11 (list<int32> % operation verb)
					_rule = "(a.rack.hw.processorCoreCnt[2] % 6 == 0)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.12 (list<int32> contains operation verb)
					_rule = "(a.rack.hw.processorCoreCnt contains 64)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A15.13 (list<int32> notContains operation verb)
					_rule = "(a.rack.hw.processorCoreCnt notContains 32)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A15.14 (list<int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.processorCoreCnt sizeNE 25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A15.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A15.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A15.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A16.1 (list<int64> == operation verb)
					_rule = "(a.rack.hw.l2CacheSize[4] == 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A16.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A16.2 (list<int64> != operation verb)
					_rule = "(a.rack.hw.l2CacheSize[1] != 200)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A16.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A16.3 (list<int64> < operation verb)
					_rule = "(a.rack.hw.l2CacheSize[3] < 520)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A16.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.4 (list<int64> <= operation verb)
					_rule = "(a.rack.hw.l2CacheSize[0] <= 70)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.5 (list<int64> > operation verb)
					_rule = "(a.rack.hw.l2CacheSize[2] > 256)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A16.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.6 (list<int64> >= operation verb)
					_rule = "(a.rack.hw.l2CacheSize[4] >= 768)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.7 (list<int64> + operation verb)
					_rule = "(a.rack.hw.l2CacheSize[0] + -4 == 60)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.8 (list<int64> - operation verb)
					_rule = "(a.rack.hw.l2CacheSize[3] - -5 >= 517)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.9 (list<int64> * operation verb)
					_rule = "(a.rack.hw.l2CacheSize[1] * -3 == -384)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.10 (list<int64> / operation verb)
					_rule = "(a.rack.hw.l2CacheSize[4] / 28 < 193)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.11 (list<int64> % operation verb)
					_rule = "(a.rack.hw.l2CacheSize[2] % 6 == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.12 (list<int64> contains operation verb)
					_rule = "(a.rack.hw.l2CacheSize contains 512)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A16.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A16.13 (list<int64> notContains operation verb)
					_rule = "(a.rack.hw.l2CacheSize notContains 768)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A16.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A16.14 (list<int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.l2CacheSize sizeLT 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A16.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A16.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A16.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
	
					// A17.1 (list<float32> == operation verb)
					_rule = "(a.rack.hw.estimatedPrice[2] == 849.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A17.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A17.2 (list<float32> != operation verb)
					_rule = "(a.rack.hw.estimatedPrice[1] != 200.58)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
		
					if(result == true) {
						printStringLn("Testcase A17.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A17.3 (list<float32> < operation verb)
					_rule = "(a.rack.hw.estimatedPrice[0] < 249.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.4 (list<float32> <= operation verb)
					_rule = "(a.rack.hw.estimatedPrice[0] <= 70.92)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.5 (list<float32> > operation verb)
					_rule = "(a.rack.hw.estimatedPrice[2] > 848.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A17.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.6 (list<float32> >= operation verb)
					_rule = "(a.rack.hw.estimatedPrice[1] >= 472.76)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.7 (list<float32> + operation verb)
					_rule = "(a.rack.hw.estimatedPrice[0] + -4.0 == 244.34)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.8 (list<float32> - operation verb)
					_rule = "(a.rack.hw.estimatedPrice[2] - -5.28 >= 854.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.9 (list<float32> * operation verb)
					_rule = "(a.rack.hw.estimatedPrice[1] * -3.0 == -1194.36)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.10 (list<float32> / operation verb)
					_rule = "(a.rack.hw.estimatedPrice[0] / 28.14 <= 8.82515991471)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.11 (list<float32> % operation verb)
					_rule = "(a.rack.hw.estimatedPrice[2] % 6.5 >= 4.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.12 (list<float32> contains operation verb)
					_rule = "(a.rack.hw.estimatedPrice contains 398.12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A17.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A17.13 (list<float32> notContains operation verb)
					_rule = "(a.rack.hw.estimatedPrice notContains 482.39)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A17.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A17.14 (list<float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.estimatedPrice sizeLE 3 && a.rack.hw.estimatedPrice[2] == 849.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A17.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A17.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A17.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A18.1 (list<float64> == operation verb)
					_rule = "(a.rack.hw.revenueTarget[2] == 12482031823.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A18.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A18.2 (list<float64> != operation verb)
					_rule = "(a.rack.hw.revenueTarget[1] != 8532312421.94)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A18.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A18.3 (list<float64> < operation verb)
					_rule = "(a.rack.hw.revenueTarget[0] < 7380412313.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.4 (list<float64> <= operation verb)
					_rule = "(a.rack.hw.revenueTarget[0] <= 7380412313.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.5 (list<float64> > operation verb)
					_rule = "(a.rack.hw.revenueTarget[2] > 14482031823.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A18.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.6 (list<float64> >= operation verb)
					_rule = "(a.rack.hw.revenueTarget[1] >= 8532312421.94)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.7 (list<float64> + operation verb)
					_rule = "(a.rack.hw.revenueTarget[0] + -4.0 == 7380412309.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.8 (list<float64> - operation verb)
					_rule = "(a.rack.hw.revenueTarget[2] - -5.28 >= 12482031829.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.9 (list<float64> * operation verb)
					_rule = "(a.rack.hw.revenueTarget[1] * -3.0 == -25596937265.82)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.10 (list<float64> / operation verb)
					_rule = "(a.rack.hw.revenueTarget[0] / 729.46 <= 10117638.134)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.11 (list<float64> % operation verb)
					_rule = "(a.rack.hw.revenueTarget[2] % 4536323.52 >= 2605820.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.12 (list<float64> contains operation verb)
					_rule = "(a.rack.hw.revenueTarget contains 12482031823.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A18.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A18.13 (list<float64> notContains operation verb)
					_rule = "(a.rack.hw.revenueTarget notContains 8532312421.94)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A18.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A18.14 (list<float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.revenueTarget sizeGT 3 && a.rack.hw.revenueTarget[5] == 12482031823.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A18.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A18.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A18.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A19.1 (map<rstring,int32> == operation verb)
					_rule = "(b.digital.sw.productNameToId  [  'You Chat'  ] ==  98311 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A19.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A19.2 (map<rstring,int32> != operation verb)
					_rule = "(b.digital.sw.productNameToId['Star DB'] != 20)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A19.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A19.3 (map<rstring,int32> < operation verb)
					_rule = "(b.digital.sw.productNameToId['Streams'] < 60000)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A19.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.4 (map<rstring,int32> <= operation verb)
					_rule = "(b.digital.sw.productNameToId['Star DB'] <= 15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A19.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.5 (map<rstring,int32> > operation verb)
					_rule = "(b.digital.sw.productNameToId[  'You Chat'  ] > 98300)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A19.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.6 (map<rstring,int32> >= operation verb)
					_rule = "(b.digital.sw.productNameToId['Streams'] >= 57)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A19.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.7 (map<rstring,int32> + operation verb)
					_rule = "(b.digital.sw.productNameToId['Star DB'] + -6 == 23416)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A19.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.8 (map<rstring,int32> - operation verb)
					_rule = "(b.digital.sw.productNameToId['You Chat'] - -5 >= 98315)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A19.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.9 (map<rstring,int32> * operation verb)
					_rule = "(b.digital.sw.productNameToId['Star DB'] * -3 > -70270)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A19.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.10 (map<rstring,int32> / operation verb)
					_rule = "(b.digital.sw.productNameToId['You Chat'] / 100 < 984)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A19.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.11 (map<rstring,int32> % operation verb)
					_rule = "(b.digital.sw.productNameToId['Streams'] % 6 == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A19.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.12 (map<rstring,int32> contains operation verb)
					_rule = "(b.digital.sw.productNameToId contains 'Star DB2')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A19.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A19.13 (map<rstring,int32> notContains operation verb)
					_rule = "(b.digital.sw.productNameToId notContains 'CP4D Streams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					if(result == true) {
						printStringLn("Testcase A19.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A19.14 (map<rstring,int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToId sizeGE 5 && b.digital.sw.productNameToId['Streams2'] == 52984)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A19.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A19.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A19.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A20.1 (map<int32,rstring> == operation verb)
					_rule = "(b.digital.sw.productIdToName[98311] == 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A20.2 (map<int32,rstring> != operation verb)
					_rule = "(b.digital.sw.productIdToName[23422] != 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.3 (map<int32,rstring> contains operation verb)
					_rule = "(   b.digital.sw.productIdToName   [  52984  ]   contains   'Streams'   )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A20.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.4 (map<int32,rstring> notContains operation verb)
					_rule = "(b.digital.sw.productIdToName[98311] notContains 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.5 (map<int32,rstring> startsWith operation verb)
					_rule = "(b.digital.sw.productIdToName[98311] startsWith 'You')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A20.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.6 (map<int32,rstring> notStartsWith operation verb)
					_rule = "(b.digital.sw.productIdToName  [  52984  ] notStartsWith 'Str')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.7 (map<int32,rstring> endsWith operation verb)
					_rule = "(b.digital.sw.productIdToName[23422] endsWith ' DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A20.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.8 (map<int32,rstring> notEndsWith operation verb)
					_rule = "(b.digital.sw.productIdToName[98311] notEndsWith 'hat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A20.9 (map<int32,rstring> contains operation verb)
					_rule = "(b.digital.sw.productIdToName contains 52984)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A20.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A20.10 (map<int32,rstring> notContains operation verb)
					_rule = "(b.digital.sw.productIdToName notContains 23422)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A20.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A20.11 (map<int32,rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productIdToName sizeEQ 3 && b.digital.sw.productIdToName[23422] contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A20.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A20.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A20.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A21.1 (map<rstring,int64> == operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume  [  'You Chat'  ] ==  529842 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A21.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A21.2 (map<rstring,int64> != operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Star DB'] != 2348922)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A21.3 (map<rstring,int64> < operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Streams'] < 8438151)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A21.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.4 (map<rstring,int64> <= operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Star DB'] <= 23489)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A21.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.5 (map<rstring,int64> > operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume[  'You Chat'  ] > 529862)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.6 (map<rstring,int64> >= operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Streams'] >= 8435131)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.7 (map<rstring,int64> + operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Star DB'] + -6 == 2348916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.8 (map<rstring,int64> - operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['You Chat'] - -5 >= 529847)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.9 (map<rstring,int64> * operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Star DB'] * -3 > -7046766)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.10 (map<rstring,int64> / operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['You Chat'] / 100 < 5298)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.11 (map<rstring,int64> % operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume['Streams'] % 6 == 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A21.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.12 (map<rstring,int64> contains operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume contains 'Star DB2')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A21.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A21.13 (map<rstring,int64> notContains operation verb)
					_rule = "(b.digital.sw.productNameToOrderVolume notContains 'CP4D Streams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					if(result == true) {
						printStringLn("Testcase A21.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A21.14 (map<rstring,int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToOrderVolume sizeNE 2 && b.digital.sw.productNameToOrderVolume['You Chat'] >= 529842)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A21.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A21.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A21.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A22.1 (map<int64,rstring> == operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[529842] == 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A22.2 (map<int64,rstring> != operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[2348922] != 'Star2 DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.3 (map<int64,rstring> contains operation verb)
					_rule = "(   b.digital.sw.orderVolumeToProductName   [  8438131  ]   contains   'Streams'   )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.4 (map<int64,rstring> notContains operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[529842] notContains 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.5 (map<int64,rstring> startsWith operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[529842] startsWith 'You')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.6 (map<int64,rstring> notStartsWith operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName  [  8438131  ] notStartsWith 'Str')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.7 (map<int64,rstring> endsWith operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[529842] endsWith ' DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.8 (map<int64,rstring> notEndsWith operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName[8438131] notEndsWith 'reams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A22.9 (map<int64,rstring> contains operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName contains 529842)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A22.10 (map<int64,rstring> notContains operation verb)
					_rule = "(b.digital.sw.orderVolumeToProductName notContains 2348922)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A22.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A22.11 (map<int64,rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.orderVolumeToProductName sizeLT 10 && b.digital.sw.orderVolumeToProductName[2348922] startsWith 'Star ')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A22.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A22.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A22.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A23.1 (map<rstring,float32> == operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin   [  'You Chat'   ]    ==   9529842.17  )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A23.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A23.2 (map<rstring,float32> != operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Star DB'] != 92348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
		
					if(result == true) {
						printStringLn("Testcase A23.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A23.3 (map<rstring,float32> < operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Streams'] < 528438431.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.4 (map<rstring,float32> <= operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Star DB'] <= 92348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.5 (map<rstring,float32> > operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['You Chat'] > 9529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A23.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.6 (map<rstring,float32> >= operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Streams'] >= 528438131.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.7 (map<rstring,float32> + operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Star DB'] + -4.0 == 92348918.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.8 (map<rstring,float32> - operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Streams'] - -5.28 >= 6742854.43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.9 (map<rstring,float32> * operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Star DB'] * -3.0 == -17367194.36)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.10 (map<rstring,float32> / operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['You Chat'] / 28.14 <= 8.82515991471)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.11 (map<rstring,float32> % operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin['Streams'] % 6.5 >= 5.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.12 (map<rstring,float32> contains operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin contains 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A23.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A23.13 (map<rstring,float32> notContains operation verb)
					_rule = "(b.digital.sw.productNameToProfitMargin notContains 'Star DB2')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A23.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A23.14 (map<rstring,float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToProfitMargin sizeLT 10 && b.digital.sw.productNameToProfitMargin['Star DB'] == 92348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A23.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A23.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A23.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A24.1 (map<float32,rstring> == operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[9529842.17] == 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A24.2 (map<float32,rstring> != operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[528438131.84] != 'Streams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.3 (map<float32,rstring> contains operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName contains 9529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A24.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.4 (map<float32,rstring> notContains operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName notContains 92348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.5 (map<float32,rstring> startsWith operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[9529842.17] startsWith 'You ')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.6 (map<float32,rstring> notStartsWith operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName  [  92348922.45  ] notStartsWith 'Star')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.7 (map<float32,rstring> endsWith operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[9529842.17] endsWith ' Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.8 (map<float32,rstring> notEndsWith operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[528438131.84] notEndsWith 'ams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A24.9 (map<float32,rstring> contains operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[9529842.17] contains 'ou ')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A24.10 (map<float32,rstring> notContains operation verb)
					_rule = "(b.digital.sw.profitMarginToProductName[92348922.45] notContains 'Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A24.11 (map<float32,rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.profitMarginToProductName[9529842.17] sizeLE 10 && b.digital.sw.profitMarginToProductName[528438131.84] endsWith 'NYC')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A24.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A24.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A24.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A25.1 (map<rstring,float64> == operation verb)
					_rule = "(b.digital.sw.productNameToRevenue   [  'You Chat'   ]    ==   92529842.17  )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A25.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A25.2 (map<rstring,float64> != operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Star DB'] != 862348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A25.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A25.3 (map<rstring,float64> < operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Streams'] < 955438131.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.4 (map<rstring,float64> <= operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Star DB'] <= 862348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.5 (map<rstring,float64> > operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['You Chat'] > 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A25.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.6 (map<rstring,float64> >= operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Streams'] >= 945438131.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.7 (map<rstring,float64> + operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Star DB'] + -4.0 == 862348918.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.8 (map<rstring,float64> - operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Streams'] - -5.28 >= 945438121.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.9 (map<rstring,float64> * operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Star DB'] * -3.0 == -2587046767.35)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.10 (map<rstring,float64> / operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['You Chat'] / 28.14 <= 3288396.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.11 (map<rstring,float64> % operation verb)
					_rule = "(b.digital.sw.productNameToRevenue['Streams'] % 6.5 >= 1.82)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.12 (map<rstring,float64> contains operation verb)
					_rule = "(b.digital.sw.productNameToRevenue contains 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A25.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A25.13 (map<rstring,float64> notContains operation verb)
					_rule = "(b.digital.sw.productNameToRevenue notContains 'Star DB2')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A25.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A25.14 (map<rstring,float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToRevenue sizeGT 7 && b.digital.sw.productNameToRevenue['Streams'] >= 945438131.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A25.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A25.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A25.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A26.1 (map<float64,rstring> == operation verb)
					_rule = "(b.digital.sw.revenueToProductName  [  862348922.45   ]   ==   'Star DB'   )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A26.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A26.2 (map<float64,rstring> != operation verb)
					_rule = "(b.digital.sw.revenueToProductName[945438131.84] != 'Streams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A26.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.3 (map<float64,rstring> contains operation verb)
					_rule = "(b.digital.sw.revenueToProductName contains 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A26.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.4 (map<float64,rstring> notContains operation verb)
					_rule = "(b.digital.sw.revenueToProductName notContains 862348922.45)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.5 (map<float64,rstring> startsWith operation verb)
					_rule = "(b.digital.sw.revenueToProductName[92529842.17] startsWith 'You ')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.6 (map<float64,rstring> notStartsWith operation verb)
					_rule = "(b.digital.sw.revenueToProductName  [  862348922.45  ] notStartsWith 'Star')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.7 (map<float64,rstring> endsWith operation verb)
					_rule = "(b.digital.sw.revenueToProductName[92529842.17] endsWith ' Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.8 (map<float64,rstring> notEndsWith operation verb)
					_rule = "(b.digital.sw.revenueToProductName[945438131.84] notEndsWith 'ams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A26.9 (map<float64,rstring> contains operation verb)
					_rule = "(b.digital.sw.revenueToProductName[92529842.17] contains 'ou ')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A26.10 (map<float64,rstring> notContains operation verb)
					_rule = "(b.digital.sw.revenueToProductName[92529842.17] notContains 'Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A26.11 (map<float64,rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.revenueToProductName sizeGE 3 && b.digital.sw.revenueToProductName[92529842.17] == 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A26.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A26.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A26.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A27.1 (map<rstring,rstring> == operation verb)
					_rule = "(b.digital.sw.productNameToGuid  [  'You Chat'   ]   ==   '9d3526eb-750f-4345-8fd3-72550428159e'   )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A27.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A27.2 (map<rstring,rstring> != operation verb)
					_rule = "(b.digital.sw.productNameToGuid['Streams'] != 'bc49e673-80d6-49ee-b775-b4f331a3b5c3')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A27.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.3 (map<rstring,rstring> contains operation verb)
					_rule = "(b.digital.sw.productNameToGuid contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A27.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.4 (map<rstring,rstring> notContains operation verb)
					_rule = "(b.digital.sw.productNameToGuid notContains 'Ninecent')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.5 (map<rstring,rstring> startsWith operation verb)
					_rule = "(b.digital.sw.productNameToGuid['Streams'] startsWith 'bc49e673-80')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.6 (map<rstring,rstring> notStartsWith operation verb)
					_rule = "(b.digital.sw.productNameToGuid  [  'You Chat'  ] notStartsWith '9d3526eb-750f-')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.7 (map<rstring,rstring> endsWith operation verb)
					_rule = "(b.digital.sw.productNameToGuid['Star DB'] endsWith '593bbe83')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.8 (map<rstring,rstring> notEndsWith operation verb)
					_rule = "(b.digital.sw.productNameToGuid['You Chat'] notEndsWith 'a-74a2593bbe83')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.8: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A27.9 (map<rstring,rstring> contains operation verb)
					_rule = "(b.digital.sw.productNameToGuid['Star DB'] contains '4abb-8bca-7')"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A27.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A27.10 (map<rstring,rstring> notContains operation verb)
					_rule = "(b.digital.sw.productNameToGuid['Streams'] notContains 'd6-49ee-b775-')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.10: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A27.11 (map<rstring,rstring> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToGuid sizeEQ 3 && b.digital.sw.productNameToGuid['Streams'] sizeNE 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A27.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A27.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A27.11: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A28.1 (map<int32,int32> == operation verb)
					_rule = "(b.integers.iw.d  [  3  ] ==  4 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A28.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A28.2 (map<int32,int32> != operation verb)
					_rule = "(b.integers.iw.d[7] != 8)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A28.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A28.3 (map<int32,int32> < operation verb)
					_rule = "(b.integers.iw.d[1] < 3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A28.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.4 (map<int32,int32> <= operation verb)
					_rule = "(b.integers.iw.d[5] <= 6)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A28.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.5 (map<int32,int32> > operation verb)
					_rule = "(b.integers.iw.d[  3  ] > 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A28.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.6 (map<int32,int32> >= operation verb)
					_rule = "(b.integers.iw.d[1] >= 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A28.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.7 (map<int32,int32> + operation verb)
					_rule = "(b.integers.iw.d[7] + -6 == 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A28.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.8 (map<int32,int32> - operation verb)
					_rule = "(b.integers.iw.d[5] - -5 >= 11)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A28.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.9 (map<int32,int32> * operation verb)
					_rule = "(b.integers.iw.d[3] * -3 > -14)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A28.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.10 (map<int32,int32> / operation verb)
					_rule = "(b.integers.iw.d[5] / 2 < 3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A28.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.11 (map<int32,int32> % operation verb)
					_rule = "(b.integers.iw.d[7] % 3 == 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A28.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.12 (map<int32,int32> contains operation verb)
					_rule = "(b.integers.iw.d contains 8)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A28.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A28.13 (map<int32,int32> notContains operation verb)
					_rule = "(b.integers.iw.d notContains 7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A28.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A28.14 (map<int32,int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.d sizeLT 3 && b.integers.iw.d[3] != 15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A28.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A28.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A28.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A29.1 (map<int32,int64> == operation verb)
					_rule = "(b.integers.iw.e  [  13  ] ==  14 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A29.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A29.2 (map<int32,int64> != operation verb)
					_rule = "(b.integers.iw.e[15] != 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A29.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A29.3 (map<int32,int64> < operation verb)
					_rule = "(b.integers.iw.e[9] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A29.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.4 (map<int32,int64> <= operation verb)
					_rule = "(b.integers.iw.e[11] <= 11)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A29.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.5 (map<int32,int64> > operation verb)
					_rule = "(b.integers.iw.e[  9  ] > 11)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A29.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.6 (map<int32,int64> >= operation verb)
					_rule = "(b.integers.iw.e[15] >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A29.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.7 (map<int32,int64> + operation verb)
					_rule = "(b.integers.iw.e[9] + -6 == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A29.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.8 (map<int32,int64> - operation verb)
					_rule = "(b.integers.iw.e[9] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A29.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.9 (map<int32,int64> * operation verb)
					_rule = "(b.integers.iw.e[11] * -3 > -36)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A29.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.10 (map<int32,int64> / operation verb)
					_rule = "(b.integers.iw.e[13] / 2 < 8)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A29.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.11 (map<int32,int64> % operation verb)
					_rule = "(b.integers.iw.e[11] % 3 == 0)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A29.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.12 (map<int32,int64> contains operation verb)
					_rule = "(b.integers.iw.e contains 11)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A29.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A29.13 (map<int32,int64> notContains operation verb)
					_rule = "(b.integers.iw.e notContains 15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A29.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A29.14 (map<int32,int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.e sizeLE 4 && b.integers.iw.e[11] >= 12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A29.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A29.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A29.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A30.1 (map<int64,int32> == operation verb)
					_rule = "(b.integers.iw.f  [  14  ] ==  13 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A30.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A30.2 (map<int64,int32> != operation verb)
					_rule = "(b.integers.iw.f[10] != 9)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A30.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A30.3 (map<int64,int32> < operation verb)
					_rule = "(b.integers.iw.f[14] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A30.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.4 (map<int64,int32> <= operation verb)
					_rule = "(b.integers.iw.f[16] <= 15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A30.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.5 (map<int64,int32> > operation verb)
					_rule = "(b.integers.iw.f[  12  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A30.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.6 (map<int64,int32> >= operation verb)
					_rule = "(b.integers.iw.f[14] >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A30.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.7 (map<int64,int32> + operation verb)
					_rule = "(b.integers.iw.f[16] + -6 == 9)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A30.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.8 (map<int64,int32> - operation verb)
					_rule = "(b.integers.iw.f[10] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A30.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.9 (map<int64,int32> * operation verb)
					_rule = "(b.integers.iw.f[12] * -3 > -32)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A30.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.10 (map<int64,int32> / operation verb)
					_rule = "(b.integers.iw.f[10] / 5 < 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A30.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.11 (map<int64,int32> % operation verb)
					_rule = "(b.integers.iw.f[16] % 3 == 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A30.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.12 (map<int64,int32> contains operation verb)
					_rule = "(b.integers.iw.f contains 13)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A30.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A30.13 (map<int64,int32> notContains operation verb)
					_rule = "(b.integers.iw.f notContains 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A30.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A30.14 (map<int64,int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.f sizeGE 4 && b.integers.iw.f[14] == 13)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A30.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A30.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A30.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A31.1 (map<int64,int64> == operation verb)
					_rule = "(b.integers.iw.g  [  21  ] ==  22 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A31.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A31.2 (map<int64,int64> != operation verb)
					_rule = "(b.integers.iw.g[23] != 9)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A31.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A31.3 (map<int64,int64> < operation verb)
					_rule = "(b.integers.iw.g[19] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A31.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.4 (map<int64,int64> <= operation verb)
					_rule = "(b.integers.iw.g[17] <= 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A31.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.5 (map<int64,int64> > operation verb)
					_rule = "(b.integers.iw.g[  21  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A31.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.6 (map<int64,int64> >= operation verb)
					_rule = "(b.integers.iw.g[17] >= -16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A31.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.7 (map<int64,int64> + operation verb)
					_rule = "(b.integers.iw.g[19] + -6 == -14)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A31.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.8 (map<int64,int64> - operation verb)
					_rule = "(b.integers.iw.g[23] - -5 >= 34)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A31.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.9 (map<int64,int64> * operation verb)
					_rule = "(b.integers.iw.g[17] * -3 > -55)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A31.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.10 (map<int64,int64> / operation verb)
					_rule = "(b.integers.iw.g[21] / 5 < 3)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A31.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.11 (map<int64,int64> % operation verb)
					_rule = "(b.integers.iw.g[19] % 3 == 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A31.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.12 (map<int64,int64> contains operation verb)
					_rule = "(b.integers.iw.g contains 21)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A31.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A31.13 (map<int64,int64> notContains operation verb)
					_rule = "(b.integers.iw.g notContains 17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A31.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A31.14 (map<int64,int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.g sizeEQ 4 && b.integers.iw.g[21] != 22)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A31.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A31.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A31.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A32.1 (map<int32,float32> == operation verb)
					_rule = "(b.integers.iw.h  [  25  ] ==  26.23 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A32.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A32.2 (map<int32,float32> != operation verb)
					_rule = "(b.integers.iw.h[27] != 28.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A32.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A32.3 (map<int32,float32> < operation verb)
					_rule = "(b.integers.iw.h[25] < 10.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A32.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.4 (map<int32,float32> <= operation verb)
					_rule = "(b.integers.iw.h[27] <= 28.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A32.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.5 (map<int32,float32> > operation verb)
					_rule = "(b.integers.iw.h[  25  ] > 25.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A32.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.6 (map<int32,float32> >= operation verb)
					_rule = "(b.integers.iw.h[27] >= 38.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A32.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.7 (map<int32,float32> + operation verb)
					_rule = "(b.integers.iw.h[25] + -6.0 == -32.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A32.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.8 (map<int32,float32> - operation verb)
					_rule = "(b.integers.iw.h[27] - -5.03 >= 33.98)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A32.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.9 (map<int32,float32> * operation verb)
					_rule = "(b.integers.iw.h[25] * -3.0 > -78.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A32.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.10 (map<int32,float32> / operation verb)
					_rule = "(b.integers.iw.h[27] / 5.0 < 5.06)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A32.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.11 (map<int32,float32> % operation verb)
					_rule = "(b.integers.iw.h[25] % 3.0 == 8.62)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A32.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.12 (map<int32,float32> contains operation verb)
					_rule = "(b.integers.iw.h contains 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A32.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A32.13 (map<int32,float32> notContains operation verb)
					_rule = "(b.integers.iw.h notContains 27)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A32.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A32.14 (map<int32,float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.h sizeNE 2 && b.integers.iw.h contains 27)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A32.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A32.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A32.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A33.1 (map<int32,float64> == operation verb)
					_rule = "(b.integers.iw.i  [  29  ] ==  32.18 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A33.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A33.2 (map<int32,float64> != operation verb)
					_rule = "(b.integers.iw.i[33] != 34.72)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A33.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A33.3 (map<int32,float64> < operation verb)
					_rule = "(b.integers.iw.i[29] < 10.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A33.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.4 (map<int32,float64> <= operation verb)
					_rule = "(b.integers.iw.i[31] <= 32.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A33.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.5 (map<int32,float64> > operation verb)
					_rule = "(b.integers.iw.i[  29  ] > 25.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A33.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.6 (map<int32,float64> >= operation verb)
					_rule = "(b.integers.iw.i[33] >= 38.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A33.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.7 (map<int32,float64> + operation verb)
					_rule = "(b.integers.iw.i[29] + -6.0 == 24.76)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A33.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.8 (map<int32,float64> - operation verb)
					_rule = "(b.integers.iw.i[31] - -5.03 >= 23.98)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A33.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.9 (map<int32,float64> * operation verb)
					_rule = "(b.integers.iw.i[33] * -3.0 > -278.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A33.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.10 (map<int32,float64> / operation verb)
					_rule = "(b.integers.iw.i[31] / 5.0 < 6.06)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A33.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.11 (map<int32,float64> % operation verb)
					_rule = "(b.integers.iw.i[29] % 3.0 == 10.62)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A33.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.12 (map<int32,float64> contains operation verb)
					_rule = "(b.integers.iw.i contains 78)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A33.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A33.13 (map<int32,float64> notContains operation verb)
					_rule = "(b.integers.iw.i notContains 96)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A33.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A33.14 (map<int32,float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.i sizeLT 4 && b.integers.iw.i[33] <= 34.72)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A33.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A33.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A33.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A34.1 (map<int64,float32> == operation verb)
					_rule = "(b.integers.iw.j  [  35  ] ==  36.17 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A34.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A34.2 (map<int64,float32> != operation verb)
					_rule = "(b.integers.iw.j[37] != 38.48)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A34.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A34.3 (map<int64,float32> < operation verb)
					_rule = "(b.integers.iw.j[35] < 10.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A34.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.4 (map<int64,float32> <= operation verb)
					_rule = "(b.integers.iw.j[37] <= 42.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A34.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.5 (map<int64,float32> > operation verb)
					_rule = "(b.integers.iw.j[  35  ] > 25.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A34.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.6 (map<int64,float32> >= operation verb)
					_rule = "(b.integers.iw.j[37] >= 38.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A34.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.7 (map<int64,float32> + operation verb)
					_rule = "(b.integers.iw.j[35] + -6.0 == 30.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A34.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.8 (map<int64,float32> - operation verb)
					_rule = "(b.integers.iw.j[37] - -5.03 >= 43.98)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A34.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.9 (map<int64,float32> * operation verb)
					_rule = "(b.integers.iw.j[35] * -3.0 > -105.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A34.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.10 (map<int64,float32> / operation verb)
					_rule = "(b.integers.iw.j[37] / 5.0 < 16.06)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A34.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.11 (map<int64,float32> % operation verb)
					_rule = "(b.integers.iw.j[35] % 3.0 == 12.62)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A34.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.12 (map<int64,float32> contains operation verb)
					_rule = "(b.integers.iw.j contains 37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A34.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A34.13 (map<int64,float32> notContains operation verb)
					_rule = "(b.integers.iw.j notContains 35)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A34.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A34.14 (map<int64,float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.j sizeLE 4 && b.integers.iw.j notContains 37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A34.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A34.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A34.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A35.1 (map<int64,float64> == operation verb)
					_rule = "(b.integers.iw.k  [  41  ] ==  44.81 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A35.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.1: Evaluation execution failed. Error=" + (rstring)error);
					}
				
					// A35.2 (map<int64,float64> != operation verb)
					_rule = "(b.integers.iw.k[39] != 40.27)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A35.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A35.3 (map<int64,float64> < operation verb)
					_rule = "(b.integers.iw.k[43] < 10.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A35.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.4 (map<int64,float64> <= operation verb)
					_rule = "(b.integers.iw.k[39] <= 42.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A35.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.5 (map<int64,float64> > operation verb)
					_rule = "(b.integers.iw.k[  41  ] > 25.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A35.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.6 (map<int64,float64> >= operation verb)
					_rule = "(b.integers.iw.k[43] >= 38.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A35.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.7 (map<int64,float64> + operation verb)
					_rule = "(b.integers.iw.k[39] + -6.0 == 30.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A35.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.8 (map<int64,float64> - operation verb)
					_rule = "(b.integers.iw.k[41] - -5.03 >= 43.98)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A35.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.9 (map<int64,float64> * operation verb)
					_rule = "(b.integers.iw.k[43] * -3.0 > -105.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A35.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.10 (map<int64,float64> / operation verb)
					_rule = "(b.integers.iw.k[39] / 5.0 < 16.06)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A35.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.11 (map<int64,float64> % operation verb)
					_rule = "(b.integers.iw.k[41] % 3.0 == 12.62)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A35.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.12 (map<int64,float64> contains operation verb)
					_rule = "(b.integers.iw.k contains 39)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A35.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A35.13 (map<int64,float64> notContains operation verb)
					_rule = "(b.integers.iw.k notContains 43)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A35.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A35.14 (map<int64,float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.integers.iw.k sizeGT 2 && b.integers.iw.k[41] < 43.00)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A35.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A35.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A35.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A36.1 (map<float32,int32> == operation verb)
					_rule = "(c.reals.fw.l  [  28.95  ] ==  27 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A36.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A36.2 (map<float32,int32> != operation verb)
					_rule = "(c.reals.fw.l[26.23] != 97)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A36.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A36.3 (map<float32,int32> < operation verb)
					_rule = "(c.reals.fw.l[28.95] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A36.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.4 (map<float32,int32> <= operation verb)
					_rule = "(c.reals.fw.l[26.23] <= 25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A36.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.5 (map<float32,int32> > operation verb)
					_rule = "(c.reals.fw.l[  28.95  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A36.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.6 (map<float32,int32> >= operation verb)
					_rule = "(c.reals.fw.l[26.23] >= 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A36.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.7 (map<float32,int32> + operation verb)
					_rule = "(c.reals.fw.l[28.95] + -6 == 9)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A36.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.8 (map<float32,int32> - operation verb)
					_rule = "(c.reals.fw.l[26.23] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A36.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.9 (map<float32,int32> * operation verb)
					_rule = "(c.reals.fw.l[28.95] * -3 > -85)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A36.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.10 (map<float32,int32> / operation verb)
					_rule = "(c.reals.fw.l[26.23] / 5 < 5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A36.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.11 (map<float32,int32> % operation verb)
					_rule = "(c.reals.fw.l[28.95] % 3 == 0)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A36.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.12 (map<float32,int32> contains operation verb)
					_rule = "(c.reals.fw.l contains 26.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A36.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A36.13 (map<float32,int32> notContains operation verb)
					_rule = "(c.reals.fw.l notContains 16.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A36.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A36.14 (map<float32,int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.l sizeGE 2 && c.reals.fw.l contains 28.95)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A36.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A36.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A36.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A37.1 (map<float32,int64> == operation verb)
					_rule = "(c.reals.fw.m  [  36.17  ] ==  35 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A37.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A37.2 (map<float32,int64> != operation verb)
					_rule = "(c.reals.fw.m[38.48] != 37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A37.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A37.3 (map<float32,int64> < operation verb)
					_rule = "(c.reals.fw.m[36.17] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A37.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.4 (map<float32,int64> <= operation verb)
					_rule = "(c.reals.fw.m[38.48] <= 25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A37.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.5 (map<float32,int64> > operation verb)
					_rule = "(c.reals.fw.m[  36.17  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A37.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.6 (map<float32,int64> >= operation verb)
					_rule = "(c.reals.fw.m[38.48] >= 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A37.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.7 (map<float32,int64> + operation verb)
					_rule = "(c.reals.fw.m[36.17] + -6 == 29)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A37.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.8 (map<float32,int64> - operation verb)
					_rule = "(c.reals.fw.m[38.48] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A37.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.9 (map<float32,int64> * operation verb)
					_rule = "(c.reals.fw.m[36.17] * -3 > -185)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A37.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.10 (map<float32,int64> / operation verb)
					_rule = "(c.reals.fw.m[38.48] / 5 < 5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A37.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.11 (map<float32,int64> % operation verb)
					_rule = "(c.reals.fw.m[36.17] % 3 == 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A37.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.12 (map<float32,int64> contains operation verb)
					_rule = "(c.reals.fw.m contains 26.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A37.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A37.13 (map<float32,int64> notContains operation verb)
					_rule = "(c.reals.fw.m notContains 16.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A37.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A37.14 (map<float32,int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.m sizeEQ 3 && c.reals.fw.m[36.17] == 35)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A37.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A37.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A37.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A38.1 (map<float64,int32> == operation verb)
					_rule = "(c.reals.fw.n  [  30.76  ] ==  35 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A38.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A38.2 (map<float64,int32> != operation verb)
					_rule = "(c.reals.fw.n[32.18] != 31)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A38.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A38.3 (map<float64,int32> < operation verb)
					_rule = "(c.reals.fw.n[34.72] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A38.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.4 (map<float64,int32> <= operation verb)
					_rule = "(c.reals.fw.n[30.76] <= 25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A38.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.5 (map<float64,int32> > operation verb)
					_rule = "(c.reals.fw.n[  32.18  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A38.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.6 (map<float64,int32> >= operation verb)
					_rule = "(c.reals.fw.n[34.72] >= 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A38.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.7 (map<float64,int32> + operation verb)
					_rule = "(c.reals.fw.n[30.76] + -6 == 29)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A38.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.8 (map<float64,int32> - operation verb)
					_rule = "(c.reals.fw.n[32.18] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A38.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.9 (map<float64,int32> * operation verb)
					_rule = "(c.reals.fw.n[34.72] * -3 > -185)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A38.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.10 (map<float64,int32> / operation verb)
					_rule = "(c.reals.fw.n[30.76] / 5 < 5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A38.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.11 (map<float64,int32> % operation verb)
					_rule = "(c.reals.fw.n[32.18] % 3 == 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A38.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.12 (map<float64,int32> contains operation verb)
					_rule = "(c.reals.fw.n contains 34.72)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A38.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A38.13 (map<float64,int32> notContains operation verb)
					_rule = "(c.reals.fw.n notContains 32.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A38.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A38.14 (map<float64,int32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.n sizeNE 3 && c.reals.fw.n notContains 78.16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A38.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A38.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A38.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A39.1 (map<float64,int64> == operation verb)
					_rule = "(c.reals.fw.o  [  40.27  ] ==  39 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A39.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A39.2 (map<float64,int64> != operation verb)
					_rule = "(c.reals.fw.o[42.65] != 41)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A39.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A39.3 (map<float64,int64> < operation verb)
					_rule = "(c.reals.fw.o[44.81] < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A39.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.4 (map<float64,int64> <= operation verb)
					_rule = "(c.reals.fw.o[40.27] <= 25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A39.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.5 (map<float64,int64> > operation verb)
					_rule = "(c.reals.fw.o[  42.65  ] > 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A39.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.6 (map<float64,int64> >= operation verb)
					_rule = "(c.reals.fw.o[44.81] >= 56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A39.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.7 (map<float64,int64> + operation verb)
					_rule = "(c.reals.fw.o[40.27] + -6 == 29)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A39.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.8 (map<float64,int64> - operation verb)
					_rule = "(c.reals.fw.o[42.65] - -5 >= 16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A39.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.9 (map<float64,int64> * operation verb)
					_rule = "(c.reals.fw.o[44.81] * -3 > -185)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A39.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.10 (map<float64,int64> / operation verb)
					_rule = "(c.reals.fw.o[40.27] / 5 < 10)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A39.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.11 (map<float64,int64> % operation verb)
					_rule = "(c.reals.fw.o[42.65] % 3 == 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A39.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.12 (map<float64,int64> contains operation verb)
					_rule = "(c.reals.fw.o contains 44.81)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A39.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A39.13 (map<float64,int64> notContains operation verb)
					_rule = "(c.reals.fw.o notContains 40.27)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
	
					if(result == true) {
						printStringLn("Testcase A39.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A39.14 (map<float64,int64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.o sizeLT 3 && c.reals.fw.o[42.65] == 41)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A39.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A39.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A39.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A40.1 (map<float32,float32> == operation verb)
					_rule = "(c.reals.fw.p  [  45.56  ] ==  46.12 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A40.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A40.2 (map<float32,float32> != operation verb)
					_rule = "(c.reals.fw.p[47.26] != 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A40.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A40.3 (map<float32,float32> < operation verb)
					_rule = "(c.reals.fw.p[45.56] < 50.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A40.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.4 (map<float32,float32> <= operation verb)
					_rule = "(c.reals.fw.p[45.56] <= 25.91)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A40.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.5 (map<float32,float32> > operation verb)
					_rule = "(c.reals.fw.p[  47.26  ] > 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A40.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.6 (map<float32,float32> >= operation verb)
					_rule = "(c.reals.fw.p[45.56] >= 56.31)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A40.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.7 (map<float32,float32> + operation verb)
					_rule = "(c.reals.fw.p[47.26] + -6.0 == 41.26)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A40.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.8 (map<float32,float32> - operation verb)
					_rule = "(c.reals.fw.p[45.56] - -5.0 >= 50.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A40.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.9 (map<float32,float32> * operation verb)
					_rule = "(c.reals.fw.p[47.26] * -3.0 > -173.86)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A40.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.10 (map<float32,float32> / operation verb)
					_rule = "(c.reals.fw.p[45.56] / 5.0 < 10.38)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A40.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.11 (map<float32,float32> % operation verb)
					_rule = "(c.reals.fw.p[47.26] % 3.0 == 15.42)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A40.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.12 (map<float32,float32> contains operation verb)
					_rule = "(c.reals.fw.p contains 45.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A40.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A40.13 (map<float32,float32> notContains operation verb)
					_rule = "(c.reals.fw.p notContains 47.26)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A40.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A40.14 (map<float32,float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.p sizeLE 3 && c.reals.fw.p notContains 15.87)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A40.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A40.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A40.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A41.1 (map<float32,float64> == operation verb)
					_rule = "(c.reals.fw.q  [  49.81  ] ==  50.03 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A41.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A41.2 (map<float32,float64> != operation verb)
					_rule = "(c.reals.fw.q[51.12] != 52.63)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A41.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A41.3 (map<float32,float64> < operation verb)
					_rule = "(c.reals.fw.q[49.81] < 50.83)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A41.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.4 (map<float32,float64> <= operation verb)
					_rule = "(c.reals.fw.q[51.12] <= 52.63)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A41.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.5 (map<float32,float64> > operation verb)
					_rule = "(c.reals.fw.q[  49.81  ] > 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A41.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.6 (map<float32,float64> >= operation verb)
					_rule = "(c.reals.fw.q[51.12] >= 56.31)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A41.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.7 (map<float32,float64> + operation verb)
					_rule = "(c.reals.fw.q[49.81] + -6.0 == 43.81)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A41.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.8 (map<float32,float64> - operation verb)
					_rule = "(c.reals.fw.q[51.12] - -5.0 >= 50.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A41.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.9 (map<float32,float64> * operation verb)
					_rule = "(c.reals.fw.q[49.81] * -3.0 > -133.86)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A41.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.10 (map<float32,float64> / operation verb)
					_rule = "(c.reals.fw.q[51.12] / 5.0 < 10.98)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A41.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.11 (map<float32,float64> % operation verb)
					_rule = "(c.reals.fw.q[49.81] % 3.0 == 2.73)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A41.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.12 (map<float32,float64> contains operation verb)
					_rule = "(c.reals.fw.q contains 45.56)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A41.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A41.13 (map<float32,float64> notContains operation verb)
					_rule = "(c.reals.fw.q notContains 51.12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A41.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A41.14 (map<float32,float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.q sizeGT 3 && c.reals.fw.q contains 49.81)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A41.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A41.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A41.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A42.1 (map<float64,float32> == operation verb)
					_rule = "(c.reals.fw.r  [  53.25  ] ==  54.85 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A42.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A42.2 (map<float64,float32> != operation verb)
					_rule = "(c.reals.fw.r[55.37] != 56.87)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A42.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A42.3 (map<float64,float32> < operation verb)
					_rule = "(c.reals.fw.r[57.55] < 50.83)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A42.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.4 (map<float64,float32> <= operation verb)
					_rule = "(c.reals.fw.r[53.25] <= 5.12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A42.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.5 (map<float64,float32> > operation verb)
					_rule = "(c.reals.fw.r[  55.37  ] > 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A42.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.6 (map<float64,float32> >= operation verb)
					_rule = "(c.reals.fw.r[57.55] >= 76.31)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A42.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.7 (map<float64,float32> + operation verb)
					_rule = "(c.reals.fw.r[53.25] + -6.0 == 48.85)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A42.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.8 (map<float64,float32> - operation verb)
					_rule = "(c.reals.fw.r[55.37] - -5.0 >= 61.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A42.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.9 (map<float64,float32> * operation verb)
					_rule = "(c.reals.fw.r[57.55] * -3.0 > -81.86)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A42.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.10 (map<float64,float32> / operation verb)
					_rule = "(c.reals.fw.r[53.25] / 5.0 < 12.64)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A42.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.11 (map<float64,float32> % operation verb)
					_rule = "(c.reals.fw.r[55.37] % 3.0 == 17.25)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A42.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.12 (map<float64,float32> contains operation verb)
					_rule = "(c.reals.fw.r contains 57.55)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A42.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A42.13 (map<float64,float32> notContains operation verb)
					_rule = "(c.reals.fw.r notContains 51.12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A42.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A42.14 (map<float64,float32> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.r sizeGE 3 && c.reals.fw.r notContains 55.37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A42.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A42.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A42.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A43.1 (map<float64,float64> == operation verb)
					_rule = "(c.reals.fw.s  [  59.09  ] ==  60.14 )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A43.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A43.2 (map<float64,float64> != operation verb)
					_rule = "(c.reals.fw.s[61.28] != 62.37)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A43.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.2: Evaluation execution failed. Error=" + (rstring)error);
					}
	
					// A43.3 (map<float64,float64> < operation verb)
					_rule = "(c.reals.fw.s[63.15] < 64.65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A43.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.4 (map<float64,float64> <= operation verb)
					_rule = "(c.reals.fw.s[59.09] <= 36.53)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A43.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.5 (map<float64,float64> > operation verb)
					_rule = "(c.reals.fw.s[  61.28  ] > 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A43.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.6 (map<float64,float64> >= operation verb)
					_rule = "(c.reals.fw.s[63.15] >= 76.31)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A43.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.7 (map<float64,float64> + operation verb)
					_rule = "(c.reals.fw.s[59.09] + -6.0 == 48.85)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A43.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.8 (map<float64,float64> - operation verb)
					_rule = "(c.reals.fw.s[61.28] - -5.0 >= 61.49)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A43.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.9 (map<float64,float64> * operation verb)
					_rule = "(c.reals.fw.s[63.15] * -3.0 > -208.79)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A43.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.10 (map<float64,float64> / operation verb)
					_rule = "(c.reals.fw.s[59.09] / 5.0 < 12.96)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
				
					if(result == true) {
						printStringLn("Testcase A43.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.11 (map<float64,float64> % operation verb)
					_rule = "(c.reals.fw.s[61.28] % 3.0 == 1.83)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
					if(result == true) {
						printStringLn("Testcase A43.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.12 (map<float64,float64> contains operation verb)
					_rule = "(c.reals.fw.s contains 63.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
			
					if(result == true) {
						printStringLn("Testcase A43.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A43.13 (map<float64,float64> notContains operation verb)
					_rule = "(c.reals.fw.s notContains 62.37)"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A43.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.13: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A43.14 (map<float64,float64> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(c.reals.fw.s sizeGE 3 && c.reals.fw.s[63.15] == 64.65)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A43.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A43.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A43.14: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A44.1 (rstring testId startsWith operation verb)
					_rule = "    testId     startsWith     'Happy P'    ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A44.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A44.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A44.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A45.1 (Multiple subexpressions with no enclosing parenthesis)
					_rule = "   b.digital.sw.productNameToGuid   contains   'Streams'   &&  " +
						"  b.digital.sw.productNameToRevenue  [ 'Star DB']   >=   862348922.45  && " +
						" a.rack.hw.estimatedPrice[1] == 398.12 && " + 
						" a.transport.cars.autoMaker endsWith 'errari' && " +
						"a.transport.cars.models contains 'Tributo' && " +
						"a.transport.cars.secondsForZeroToSixty notContains 14.6 && " +
						"a.rack.hw.processorFamily[1] != 'Broadwell' && " +
						"a.rack.hw.revenueTarget contains 12482031823.95 && " +
						"b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e' && " +
						"b.integers.iw.k[41] == 42.65 && " +
						"c.reals.fw.p[45.56] > 42.93 && " +						
						"c.reals.fw.s[61.28] - 2.37 == 60.00";						
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A45.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A45.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A45.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A46.1 (Multiple subexpressions with outer 
					// enclosing parenthesis and the logical AND resulting in 
					// a false for the 4th subexpression. So, the evaluation
					// should not continue after the 4th one by saving some eval time.)
					_rule = "(   b.digital.sw.productNameToGuid   contains   'Streams'   &&  " +
						"  b.digital.sw.productNameToRevenue  [ 'Star DB']   >=   862348922.45  && " +
						" a.rack.hw.estimatedPrice[1] == 398.12 && " + 
						" a.transport.cars.autoMaker endsWith 'Kerrari' && " +
						"a.transport.cars.models contains 'Tributo' && " +
						"a.transport.cars.secondsForZeroToSixty notContains 14.6 && " +
						"a.rack.hw.processorFamily[1] != 'Broadwell' && " +
						"a.rack.hw.revenueTarget contains 12482031823.95 && " +
						"b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e' && " +
						"b.integers.iw.k[41] == 42.65 && " +
						"c.reals.fw.p[45.56] > 42.93 && " +						
						"c.reals.fw.s[61.28] - 2.37 == 60.00)";						
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A46.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A46.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A46.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A47.1 (Multiple subexpressions with outer 
					// enclosing parenthesis and the logical || resulting in 
					// a true for the 2nd subexpression. So, the evaluation
					// should not continue after the 2nd one by saving some eval time.)
					_rule = "(   b.digital.sw.productNameToGuid   contains   'Xtreams'   ||  " +
						"  b.digital.sw.productNameToRevenue  [ 'Star DB']   >=   862348922.45  || " +
						" a.rack.hw.estimatedPrice[1] == 398.12 || " + 
						" a.transport.cars.autoMaker endsWith 'errari' || " +
						"a.transport.cars.models contains 'Tributo' || " +
						"a.transport.cars.secondsForZeroToSixty notContains 14.6 || " +
						"a.rack.hw.processorFamily[1] != 'Broadwell' || " +
						"a.rack.hw.revenueTarget contains 12482031823.95 || " +
						"b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e' || " +
						"b.integers.iw.k[41] == 42.65 || " +
						"c.reals.fw.p[45.56] > 42.93 || " +						
						"c.reals.fw.s[61.28] - 2.37 == 60.00)";					
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A47.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A47.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A47.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A48.1 (Multiple subexpressions individually enclosed within 
					// their own pair of parenthesis with a logical AND in between them.)
					_rule = "(c.reals.fw.l[28.95] >= 27) && " + 
						"(c.reals.fw.m[36.17] != 37) && " + 
						"(c.reals.fw.n[34.72] + 5 >= 38) && " +	
						"(c.reals.fw.o[40.27] - 12 == 27) && " +
						"(c.reals.fw.p[45.56] < 53.79) && " +		
						"(c.reals.fw.q[51.12] % 52.63 == 0.0) && " +
						"(c.reals.fw.r contains 55.37) && " +
						"(c.reals.fw.s notContains 62.37)";	
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A48.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A48.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A48.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A49.1 (Multiple chained subexpressions individually enclosed within 
					// their own pair of parenthesis with a logical || in between them.)
					_rule = "(a.transport.plane.airliner == 'Boeing' && a.transport.plane.isBasedInUSA == true && a.transport.plane.numberOfPlants == 18) || " +
						"(a.transport.plane.countriesOfOperation == 65 && a.rack.hw.vendor == 'Intel' && a.transport.cars.models contains 'Portofino') || " + 					
						"(a.transport.plane.startingYear == 1916 || a.rack.hw.processorFamily[2] endsWith 'lake') || " + 
						"(a.transport.plane.averageProfit > 3000000000.32 || a.rack.hw.l2CacheSize contains 512) || " +
						"(a.rack.hw.estimatedPrice[2] == 398.12 || testId contains 'y Pat')"; 
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A49.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A49.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A49.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// A50.1 (Check the reusability of an expression during
					// its repeated use by staying in a loop and evaluating the
					// same expression.)
					_rule = "(testId != 'Unhappy Path' && " +
						"a.transport.cars.autoMaker startsWith 'Enzo F' && " +
						"a.transport.plane.airliner contains 'oei' && " + 
						"a.rack.hw.vendor endsWith 'Intel' && " + 
						"a.rack.hw.processorFamily[3] notEndsWith 'well' && " + 
						"b.digital.sw.profitMarginToProductName[528438131.84] endsWith 'reams' && " +
						"b.digital.sw.productNameToGuid contains 'Star DB2')";
					mutable int32 cnt = 0;
					
					while(cnt++ < 10) {
						// Evaluate the same expression a few times.						
						result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
						
						if(result == true) {
							printStringLn("Testcase A50.1 (" + (rstring)cnt + "): Evaluation criteria is met.");
						} else if(result == false && error == 0) {
							printStringLn("Testcase A50.1 (" + (rstring)cnt + "): Evaluation criteria is not met.");
						} else {
							printStringLn("Testcase A50.1 (" + (rstring)cnt + "): Evaluation execution failed. Error=" + (rstring)error);
						}
					} // End of while loop.
					// -------------------------
					
					// A51.1 (Nested expression pattern 1)
					_rule = "(a.transport.plane.airliner == 'Boeing') && ((a.transport.plane.isBasedInUSA == true || a.transport.plane.numberOfPlants == 18) && a.transport.plane.startingYear   ==   1916  )  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.2 (Nested expression pattern 2)
					_rule = "(   b.digital.sw.productNameToGuid   contains   'Streams'   ) && (  b.digital.sw.productNameToRevenue  [ 'Star DB']   >=   862348922.45   && (a.rack.hw.estimatedPrice[1] == 398.12 || a.transport.cars.autoMaker endsWith 'errari'))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.3 (Nested expression pattern 3)
					_rule = "(c.reals.fw.l[28.95] >= 27) && ((c.reals.fw.m[36.17] != 37) || (c.reals.fw.n[34.72] + 5 >= 38) || (c.reals.fw.o[40.27] - 12 == 27))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.4 (Nested expression pattern 4)
					_rule = "(a.transport.cars.models contains 'Tributo') && ((a.transport.cars.secondsForZeroToSixty notContains 14.6) || (a.rack.hw.processorFamily[1] != 'Broadwell' || a.rack.hw.revenueTarget contains 12482031823.95))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.5 (Nested expression pattern 5)
					_rule = "((c.reals.fw.p[45.56] < 53.79 || c.reals.fw.q[51.12] % 52.63 == 0.0) && (c.reals.fw.r contains 55.37)) || (c.reals.fw.s notContains 62.37 || testId == 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.6 (Nested expression pattern 6)
					_rule = "(((b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e') || (b.integers.iw.k[41] == 42.65) || (c.reals.fw.p[45.56] > 42.93) || (c.reals.fw.s[61.28] - 2.37 == 60.00)) && ((a.transport.cars.rpmRange contains 8700) && (b.digital.sw.productNameToRevenue['Streams'] == 945438131.84) && (a.rack.hw.vendor == 'Intel')) && a.transport.plane.startingYear == 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.6: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.7 (Nested expression pattern 7)
					// The following is a replica of an expression that is modeled after a 
					// real-life business rule.
                    _rule = "((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) && (((testId equalsCI 'Happy Path') && (a.rack.hw.vendor equalsCI 'Intel')) || ((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.8 (Nested expression pattern 8)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) && (((testId equalsCI 'Happy Path2') && (a.rack.hw.vendor equalsCI 'Intel')) || ((a.transport.plane.airliner equalsCI 'bOeInG2') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.8: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.9 (Nested expression pattern 9)
                    // The following is done to swap the positions of the 
                    // first and second parts of the rule used in A51.7.
                    _rule = "(((testId equalsCI 'Happy Path') && (a.rack.hw.vendor equalsCI 'Intel')) || ((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari'))) && ((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.9: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.10 (Nested expression pattern 10)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "(((testId equalsCI 'Happy Path2') && (a.rack.hw.vendor equalsCI 'Intel')) || ((a.transport.plane.airliner equalsCI 'bOeInG2') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari'))) && ((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.10: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.10: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.10: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.11 (Nested expression pattern 11)
                    // The following is same as the one used in A51.7 except for 
                    // one more || clause is added in the second part of the rule.
                    _rule = "((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) && (((testId equalsCI 'Happy Path') && (a.rack.hw.vendor equalsCI 'Intel')) || (((a.transport.plane.airliner equalsCI 'bOeInG') || (testId equalsCI 'Happy Path')) && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.11: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.11: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.11: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.12 (Nested expression pattern 12)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "((a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')) && (((testId equalsCI 'Happy Path') && (a.rack.hw.vendor equalsCI 'Intel2')) || (((a.transport.plane.airliner equalsCI 'bOeInG2') || (testId equalsCI 'Happy Path2')) && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari')))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.12: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.12: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.12: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.13 (Nested expression pattern 13)
					// The following is after the removal of the extra open and 
					// close parenthesis in the rule used in A51.7 to make it simpler.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || (a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari'))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.13: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.13: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.13: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.14 (Nested expression pattern 14)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path2' && a.rack.hw.vendor equalsCI 'Intel') || (a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari2'))";                    
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.14: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.14: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.14: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.15 (Nested expression pattern 15)
                    // The following is same as the rule above except for 
                    // one more || clause is added in the second part of the rule.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.plane.airliner equalsCI 'bOeInG' || testId equalsCI 'Happy Path') && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari'))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.15: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.15: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.15: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A51.16 (Nested expression pattern 16)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari2') && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.plane.airliner equalsCI 'bOeInG' || testId equalsCI 'Happy Path4') && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari'))";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.16: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.16: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.16: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.17 (Nested expression pattern 17)
                    // The following is same as the rule above except for 
                    // more || clauses are added in the second part of the rule to
                    // make it to have a 5 level deep nested subexpression.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.plane.airliner equalsCI 'bOeInG2' || testId equalsCI 'Happy Path') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && (a.transport.plane.airliner equalsCI 'bOeInG')) || (testId equalsCI 'Happy Path' && testId equalsCI 'Happy Path') || (testId equalsCI 'Happy Path7' && testId equalsCI 'Happy Path')) && (testId equalsCI 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.17: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.17: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.17: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.18 (Nested expression pattern 18)
                    // Following rule is the same as above except for it is set up to give a result via a different boolean condition.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel2') || ((a.transport.plane.airliner equalsCI 'bOeInG2' || testId equalsCI 'Happy Path2') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && (a.transport.plane.airliner equalsCI 'bOeInG')) || (testId equalsCI 'Happy Path' && testId equalsCI 'Happy Path5') || (testId equalsCI 'Happy Path6' && testId equalsCI 'Happy Path7')) && (testId equalsCI 'Happy Path8')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.18: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.18: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.18: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.19 (Nested expression pattern 19)
                    // The following is similar to rule A51.17 except it has 
                    // multi-level nesting in the first part of the rule with a 
                    // combination of self-enclosed and non-self-enclosed subexpressions to
                    // make it somewhat involved to validate and evaluate. The second part of
                    // the rule is same as shown in A51.17.
                    _rule = "(a.transport.plane.airliner equalsCI 'bOeInG' && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari' || (testId equalsCI 'Happy Path' || a.rack.hw.vendor equalsCI 'Intel2'))) && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.plane.airliner equalsCI 'bOeInG2' || testId equalsCI 'Happy Path') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && (a.transport.plane.airliner equalsCI 'bOeInG')) || (testId equalsCI 'Happy Path' && testId equalsCI 'Happy Path') || (testId equalsCI 'Happy Path7' && testId equalsCI 'Happy Path')) && (testId equalsCI 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.19: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.19: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.19: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.20 (Nested expression pattern 20)
                    // The following is same as the rule above except for the
                    // use of self-enclosed Subexpressions in the first part of 
                    // the rule for the two SEs at the very beginning. Especially,
                    // the very first SE of the rule expression is self-enclosed and
                    // it is immediately followed by a multi-level nested SE. We have not seen
                    // this pattern in other nested rule expression examples above.
                    _rule = "((a.transport.plane.airliner equalsCI 'bOeInG') && ((a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') || (testId equalsCI 'Happy Path' || a.rack.hw.vendor equalsCI 'Intel2'))) && ((testId equalsCI 'Happy Path' && a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.plane.airliner equalsCI 'bOeInG2' || testId equalsCI 'Happy Path') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && (a.transport.plane.airliner equalsCI 'bOeInG')) || (testId equalsCI 'Happy Path' && testId equalsCI 'Happy Path') || (testId equalsCI 'Happy Path7' && testId equalsCI 'Happy Path')) && (testId equalsCI 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.20: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.20: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.20: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.21 (Nested expression pattern 21)
					// The following is a rule that has the first two subexpressions
					// as self-enclosed. It then has the next subexpression with 
					// three levels of multi-level nested SEs.
					_rule = "(a.transport.plane.airliner equalsCI 'bOeInG') && (a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && ((testId equalsCI 'Happy Path') && ((a.rack.hw.vendor equalsCI 'Intel') || ((a.transport.cars.autoMaker equalsCI 'Enzo Ferrari') && (a.transport.plane.airliner equalsCI 'bOeInG'))))";

					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A51.21: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.21: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.21: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.22 (Nested expression pattern 22)
					// The following is a rule used in a real-world use case. It has the first and 
					// third subexpressions as self-enclosed. It then has the second
					// subexpression with four levels of multi-level nested SEs.
					// In that second SE, it evaluates certain conditions such that
					// they will collectively contribute to returning a final false result.
					//
					// Tuple schema needed for this rule's data.
					type NodeProperties_T = rstring ParentTool, rstring MES_CEID, rstring REV_CEID, 
						rstring EquipmentGroup, rstring FunctionalArea, rstring EntityType, 
						rstring Cluster, list<rstring> Processes, list<rstring> VirtualLines,
						rstring OwnedBy, rstring Location, rstring CurrentSite, list<rstring> ToolGroups;

					type NodeStatus_T = list<rstring> Lots, rstring Availability, rstring Comments,
						rstring EntityState, rstring Event, rstring StatusCategory1, 
						rstring StatusCategory2, rstring StatusCategory3, rstring StatusCategory4, 
						map<rstring,rstring> AttributesMap,	rstring StatusCategory5, 
						rstring StatusCategory6,rstring StatusCategory7, rstring StatusCategory8, 
						rstring StatusCategory9, rstring UserName;

					type NodeV_T = NodeProperties_T Properties, NodeStatus_T Status, 
						timestamp PublishTime, rstring MWTimestamp;

					type Node_T =  rstring Key, NodeV_T Value; 
					
					// Variable declaration that uses the tuple schema defined above.
					mutable Node_T myNode = (Node_T){};
					myNode.Value.Status.Event = "PATCHING";
					myNode.Value.Status.UserName = "";        
					myNode.Value.Status.EntityState = "";
					myNode.Value.Properties.OwnedBy = 'SAD';
					myNode.Value.Status.Availability = "Down";
					myNode.Value.Status.StatusCategory2 = 'StatusCategory2';
					myNode.Value.Status.StatusCategory3 = 'StatusCategory3';
					myNode.Value.Status.StatusCategory4 = 'StatusCategory4';
										
					_rule = "(Value.Status.Event equalsCI 'PATCHING') && ((Value.Status.UserName containsCI 'EWR') || (Value.Status.EntityState equalsCI 'ENGINEERING') || ((Value.Properties.OwnedBy containsCI 'FER') && ((Value.Status.Availability equalsCI 'Up') || ((Value.Status.Availability equalsCI 'Down') && (Value.Status.StatusCategory3 containsCI 'StatusCategory3'))))) && (Value.Status.StatusCategory4 equalsCI 'StatusCategory4')";
					result = eval_predicate(_rule, myNode, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.22: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.22: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.22: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.23 (Nested expression pattern 23)
					// The following rule is same as the previous one except 
					// it checks with a slightly different tuple attribute 
					// values to meet all the evaluation conditions and 
					// then to return true.
					//
					// Set these two tuple attributes to specific values.					
					myNode.Value.Status.UserName = "EWR";
					myNode.Value.Status.EntityState = "ENGINEERING";					
					
					_rule = "(Value.Status.Event equalsCI 'PATCHING') && ((Value.Status.UserName containsCI 'EWR') || (Value.Status.EntityState equalsCI 'ENGINEERING') || ((Value.Properties.OwnedBy containsCI 'SAD') && ((Value.Status.Availability equalsCI 'Up') || ((Value.Status.Availability equalsCI 'Down') && (Value.Status.StatusCategory3 containsCI 'StatusCategory3'))))) && (Value.Status.StatusCategory4 equalsCI 'StatusCategory4')";
					result = eval_predicate(_rule, myNode, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.23: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.23: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.23: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A51.24 (Nested expression pattern 24)
					// The following rule is same as the previous one except 
					// it checks with a slightly different tuple attribute 
					// values to meet all the evaluation conditions and 
					// then to return true.
					//
					// Set these three tuple attributes to specific values.
					myNode.Value.Status.EntityState = "SIGNALING";
					myNode.Value.Properties.OwnedBy = 'D1D';
					myNode.Value.Status.Availability = "Up";
					
					_rule = "(Value.Status.EntityState equalsCI 'SIGNALING') && ((Value.Properties.OwnedBy notStartsWithCI 'D1D') || ((Value.Properties.OwnedBy startsWithCI 'D1D') && (Value.Status.Availability equalsCI 'Up')))";
					result = eval_predicate(_rule, myNode, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A51.24: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A51.24: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A51.24: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// A52.1 (list<TUPLE>)
					_rule = "(((b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e') || (weatherList[0].city contains 'York') || (weatherList[0].humidity <= 12.87) || (c.reals.fw.s[61.28] - 2.37 == 60.00)) && ((a.transport.cars.rpmRange contains 8700) && (b.digital.sw.productNameToRevenue['Streams'] == 945438131.84) && (weatherList[0].hourlyTemperatureMap[592311] != 89.16)) && weatherList[0].sunnyDay == true)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);

					if(result == true) {
						printStringLn("Testcase A52.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A52.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A52.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A52.2 (list<TUPLE> sizeXX operation verb)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(weatherList sizeLE 1 && weatherList[0].sunnyDay == false)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A52.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A52.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A52.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// A53.1 (Use of quote characters in map key string and in RHS string value.)
					// If the entire rule expression is in a single string literal,
					// then the embedded quote characters may require escaping.
					_rule = "(weatherList[0].reporters['WKLX\'s weatherwoman'] contains 'Martha O\'Leary')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A53.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A53.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A53.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A53.2 (Another example for using quote characters in map key string and in RHS string value.)
					// If the entire rule expression is in a single string literal,
					// then the embedded quote characters may require escaping.
					_rule = "(    weatherList[0].reporters['WMRX\'s weatherman']    endsWith ' O\'Donnel'   " +
						" &&   weatherList[0].reporters['WKLX\'s weatherwoman'] contains 'Martha O\'Leary'     )";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A53.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A53.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A53.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// A54.1 (Use of in for rstring membership test.)
					// It does case sensitive membership test using a list literal string.
					type Role_t = rstring role, int32 age, float64 salary;
					mutable Role_t myRole = {};
					myRole.role = "Admin";
					myRole.age = 56;
					myRole.salary = 10514.00; 

					_rule = 'role in ["Developer", "Tester", "Admin", "Manager"]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.1: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A54.2 (Use of inCI for rstring membership test.)
					// It does case insensitive membership test using a list literal string.
					myRole.role = "mAnAgEr";
					_rule = 'role inCI ["Developer", "Tester", "Admin", "Manager"]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A54.3 (Use of in for int32 membership test.)
					// It does membership test using a list literal string.
					_rule = 'age in [22, 40, 43, 50, 56, 65]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A54.4 (Use of in for float64 membership test.)
					// It does membership test using a list literal string.
					_rule = 'salary in [68326.45, 92821.87, 10514.00, 120529,32]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.4: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// A54.5 (Use of in for int32 membership test.)
					// It does membership test using a list literal string.
					_rule = 'age in [22, 40, 43, 50, 58, 65]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// A54.6 (Use of in for float64 membership test.)
					// It does membership test using a list literal string.
					_rule = 'salary in [68326.45, 92821.87, 10594.76, 120529,32]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase A54.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase A54.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase A54.6: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
				} // End of onTuple MTD.
		} // End of the HappyPathSink operator.
		
		// In this operator, we will do the happy path tests.
		() as UnhappyPathSink = Custom(MyTicker as MT; MyTestData as MTD) {
			logic
				state: {
					// Store the MyTicker in a state variable if we 
					// have to use it later for any test.
					mutable Ticker_t _myTicker = {}; 
					mutable TestData_t _myTestData = {};
					mutable rstring _rule = "";
				}
				
				onTuple MT: {
					// Store it in the state.
					_myTicker = MT;
				}
				
				onTuple MTD: {
					// Store it in the state.
					_myTestData = MTD;
					
					// We will methodically do many unhappy path 
					// expression (rule) evaluations now.
					// The main goal here is to provide test coverage for
					// many of the eval features that we support.
					mutable int32 error = 0;
					mutable boolean result = false;
					printStringLn("");
					printStringLn("");
					// Before we do anything here, we will do quick tests of
					// the built-in evalPredicate native function available
					// in the Streams product to see where it works fine 
					// and where it is not.
					printStringLn("Results from running a few tests using the " +
						"evalPredicate built-in function available in the " + 
						"Streams product.");
					//
					// EP1.1 (Empty rule.)
					_rule = "";
					result = evalPredicate(_rule, _myTestData, error);
					
					if(result == true) {
						printStringLn("Testcase EP1.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP1.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP1.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// EP2.1 (It meets the eval criteria.)
					_rule = '(symbol == "INTC")';
					result = evalPredicate(_rule, _myTicker, error);
					
					if(result == true) {
						printStringLn("Testcase EP2.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP2.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP2.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// EP3.1 (It doesn't meet the eval criteria.)
					_rule = '(symbol != "INTC")';
					result = evalPredicate(_rule, _myTicker, error);
					
					if(result == true) {
						printStringLn("Testcase EP3.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP3.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP3.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// EP4.1 (It meets the eval criteria. But it involves a map.)
					_rule = "(myMap1[true] == 1)";
					result = evalPredicate(_rule, _myTicker, error);
					
					if(result == true) {
						printStringLn("Testcase EP4.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP4.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP4.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// EP5.1 (It meets the eval criteria. But it involves a nested tuple.)
					_rule = "(a.rack.hw.processorCoreCnt[3] == 32)";
					result = evalPredicate(_rule, _myTestData, error);
					
					if(result == true) {
						printStringLn("Testcase EP5.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP5.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP5.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// EP6.1 (It meets the eval criteria. But it passes a tuple made of a different schema.)
					_rule = '(symbol == "INTC")';
					result = evalPredicate(_rule, _myTestData, error);
					
					if(result == true) {
						printStringLn("Testcase EP6.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase EP6.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase EP6.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					printStringLn("");
					printStringLn("");
					printStringLn("This unhappy path operator should always give " +
						"results as eval execution failed with a non-zero error code.");
					
					// Let us now do the tests for eval_predicate.
					// -------------------------
					// Evaluate an expression (i.e. rule).
					// Arg1: Expression string i.e. your custom rule.
					// Arg2: Your tuple
					// Arg3: A mutable int32 variable to receive a non-zero eval error code if any.
					//       (You can refer to top of the impl/include/eval_predicate.h file in the 
					//        streamsx.eval_predicate toolkit for the meaning of a given error code.)
					// Arg4: A boolean value to enable debug tracing inside this function.
					// It returns true if the expression's evaluation criteria is met.
					// It returns false and error=0 if the expression's evaluation criteria is not met.
					// It returns a non-zero error when there is an evaluation execution failure.
					//		
					// B1.1 (EMPTY_EXPRESSION 1)
					_rule = "";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B1.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B1.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B1.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B2.1 (UNMATCHED_CLOSE_PARENTHESIS_IN_EXPRESSION1 9)
					_rule = "testId == 'Unhappy Path)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B2.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B2.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B2.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B3.1 (UNMATCHED_CLOSE_PARENTHESIS_IN_EXPRESSION2 10)
					_rule = "[testId == 'Unhappy Path)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B3.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B3.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B3.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B4.1 (UNMATCHED_CLOSE_BRACKET_IN_EXPRESSION1 11)
					_rule = "testId == 'Unhappy Path]";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B4.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B4.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B4.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B5.1 (UNMATCHED_CLOSE_BRACKET_IN_EXPRESSION2 12)
					_rule = "(testId == 'Unhappy Path]";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B5.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B5.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B5.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B6.1 (UNMATCHED_OPEN_PARENTHESIS_OR_SQUARE_BRACKET_IN_EXPRESSION 13)
					_rule = "(testId == 'Unhappy Path";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B6.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B6.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B6.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B7.1 (LHS_NOT_MATCHING_WITH_ANY_TUPLE_ATTRIBUTE 16)
					_rule = "(testId2 == 'Unhappy Path')";
					// _rule = "(myTestId == 'Unhappy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B7.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B7.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B7.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B8.1 (OPEN_SQUARE_BRACKET_NOT_FOUND_AFTER_LIST 17)
					_rule = "(a.rack.hw.processorFamily startsWith 'Cascade')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B8.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B8.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B8.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B9.1 (ALL_NUMERALS_NOT_FOUND_AS_LIST_INDEX 19)
					_rule = "(a.rack.hw.processorFamily[ABC1] startsWith 'Cascade L')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B9.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B9.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B9.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B10.1 (OPEN_SQUARE_BRACKET_NOT_FOUND_AFTER_MAP 20)
					_rule = "(b.digital.sw.productNameToId endsWith 'ar DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B10.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B10.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B10.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B11.1 (UNSUPPORTED_KEY_TYPE_FOUND_IN_MAP 21)
					_rule = "(myMap1[true] == 1)";
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B11.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B11.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B11.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B12.1 (SPACE_MIXED_WITH_NUMERALS_IN_LIST_INDEX 22)
					_rule = "(a.rack.hw.processorCoreCnt[2 5] == 32)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B12.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B12.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B12.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B13.1 (ALL_NUMERALS_NOT_FOUND_IN_INT_MAP_KEY 23)
					_rule = "(b.digital.sw.productIdToName[98X3Y1Z1] == 'You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B13.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B13.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B13.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B14.1 (SPACE_MIXED_WITH_NUMERALS_IN_INT_MAP_KEY 25)
					_rule = "(b.digital.sw.orderVolumeToProductName[84 38 13 1] == 'Streams')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B14.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B14.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B14.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B15.1 (MISSING_DECIMAL_POINT_IN_FLOAT_MAP_KEY 26)
					_rule = "(b.digital.sw.profitMarginToProductName[92348922] contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B15.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B15.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B15.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B16.1 (MORE_THAN_ONE_DECIMAL_POINT_IN_FLOAT_MAP_KEY 27)
					_rule = "(b.digital.sw.profitMarginToProductName[92348922.45.00] contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B16.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B16.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B16.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B17.1 (SPACE_MIXED_WITH_NUMERALS_IN_FLOAT_MAP_KEY 28)
					_rule = "(b.digital.sw.profitMarginToProductName[92 34 89 22.45] contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B17.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B17.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B17.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B18.1 (ALL_NUMERALS_NOT_FOUND_IN_FLOAT_MAP_KEY 29)
					_rule = "(b.digital.sw.profitMarginToProductName[92A34B89C22.45] contains 'Star DB')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B18.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B18.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B18.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B19.1 (MISSING_OPEN_QUOTE_IN_STRING_MAP_KEY 31)
					_rule = "(b.digital.sw.productNameToRevenue[You Chat'] >= 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B19.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B19.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B19.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B20.1 (MISSING_CLOSE_QUOTE_IN_STRING_MAP_KEY 32)
					_rule = "(b.digital.sw.productNameToRevenue['You Chat] >= 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B20.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B20.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B20.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B21.1 (CHAR_FOUND_AFTER_CLOSE_QUOTE_IN_STRING_MAP_KEY 34)
					_rule = "(b.digital.sw.productNameToRevenue['You Chat'xyz] >= 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B21.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B21.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B21.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B22.1 (EMPTY_STRING_MAP_KEY_FOUND 36)
					_rule = "(b.digital.sw.productNameToRevenue[''] >= 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B22.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B22.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B22.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B23.1 (INVALID_OPERATION_VERB_FOUND_IN_EXPRESSION 37)
					_rule = "(b.digital.sw.productNameToRevenue['You Chat'] ^ 92529842.17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B23.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B23.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B23.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B24.1 (INCOMPATIBLE_DOUBLE_EQUALS_OPERATION_FOR_LHS_ATTRIB_TYPE 38)
					_rule = "(a.transport.cars.models == 'Tributo')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B24.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B24.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B24.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B25.1 (INCOMPATIBLE_NOT_EQUALS_OPERATION_FOR_LHS_ATTRIB_TYPE 39)
					_rule = "(a.transport.cars.models != 'Lusso')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B25.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B25.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B25.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B26.1 (INCOMPATIBLE_LESS_THAN_OPERATION_FOR_LHS_ATTRIB_TYPE 40)
					_rule = "(a.transport.cars.numberOfEnginesMade < 343252)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B26.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B26.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B26.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B27.1 (INCOMPATIBLE_LESS_THAN_OR_EQUALS_OPERATION_FOR_LHS_ATTRIB_TYPE 41)
					_rule = "(a.transport.cars.numberOfEnginesMade <= 343254)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B27.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B27.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B27.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B28.1 (INCOMPATIBLE_GREATER_THAN_OPERATION_FOR_LHS_ATTRIB_TYPE 42)
					_rule = "(a.transport.cars.numberOfEnginesMade > 343256)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B28.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B28.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B28.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B29.1 (INCOMPATIBLE_GREATER_THAN_OR_EQUALS_OPERATION_FOR_LHS_ATTRIB_TYPE 43)
					_rule = "(a.transport.cars.numberOfEnginesMade >= 343258)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B29.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B29.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B29.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B30.1 (INCOMPATIBLE_ADD_OPERATION_FOR_LHS_ATTRIB_TYPE 44)
					_rule = "(a.transport.cars.secondsForZeroToSixty + 5 != 2.63)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B30.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B30.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B30.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B31.1 (INCOMPATIBLE_SUBTRACT_OPERATION_FOR_LHS_ATTRIB_TYPE 45)
					_rule = "(b.digital.sw.productIdToName[52984] - 10 > 47)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B31.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B31.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B31.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B32.1 (INCOMPATIBLE_MULTIPLY_OPERATION_FOR_LHS_ATTRIB_TYPE 46)
					_rule = "(b.digital.sw.productIdToName[52984] * 100 < 1963)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B32.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B32.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B32.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B33.1 (INCOMPATIBLE_DIVIDE_OPERATION_FOR_LHS_ATTRIB_TYPE 47)
					_rule = "(a.rack.hw.processorFamily[2] / 15 == 34)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B33.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B33.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B33.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B34.1 (INCOMPATIBLE_MOD_OPERATION_FOR_LHS_ATTRIB_TYPE 48)
					_rule = "(a.transport.plane.airliner % 19 == 17)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B34.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B34.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B34.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B35.1 (INCOMPATIBLE_CONTAINS_OPERATION_FOR_LHS_ATTRIB_TYPE 49)
					_rule = "(a.transport.plane.numberOfPlants contains 18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B35.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B35.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B35.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B36.1 (INCOMPATIBLE_STARTS_WITH_OPERATION_FOR_LHS_ATTRIB_TYPE 50)
					_rule = "(a.transport.cars.models startsWith 'Porto')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B36.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B36.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B36.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B37.1 (INCOMPATIBLE_ENDS_WITH_OPERATION_FOR_LHS_ATTRIB_TYPE 51)
					_rule = "(a.rack.hw.estimatedPrice[2] endsWith 398.12)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B37.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B37.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B37.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B38.1 (INCOMPATIBLE_NOT_CONTAINS_OPERATION_FOR_LHS_ATTRIB_TYPE 52)
					_rule = "(c.reals.fw.p[47.26] notContains 48.74)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B38.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B38.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B38.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B39.1 (INCOMPATIBLE_NOT_STARTS_WITH_OPERATION_FOR_LHS_ATTRIB_TYPE 53)
					_rule = "(a.transport.plane.startingYear notStartsWith 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B39.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B39.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B39.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------


					// B40.1 (INCOMPATIBLE_NOT_ENDS_WITH_OPERATION_FOR_LHS_ATTRIB_TYPE 54)
					_rule = "(a.transport.cars.maxEngineTemp notEndsWith 203.15)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B40.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B40.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B40.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B41.1 (ALL_NUMERALS_NOT_FOUND_IN_ARITHMETIC_OPERAND 55)
					_rule = "(a.rack.hw.l2CacheSize[4] * ab45 >= 48753232)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B41.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B41.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B41.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B42.1 (NO_DECIMAL_POINT_IN_FLOAT_ARITHMETIC_OPERAND 56)
					_rule = "(b.digital.sw.productNameToRevenue['Star DB'] - 34592712869 != 9693521.83)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B42.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B42.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B42.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B43.1 (MORE_THAN_ONE_DECIMAL_POINT_IN_ARITHMETIC_OPERAND 57)
					_rule = "(c.reals.fw.p[47.26] + 49.34.12 != 96.23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B43.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B43.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B43.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B44.1 (NO_OPERATION_VERB_FOUND_AFTER_ARITHMETIC_OPERAND 58)
					_rule = "a.transport.plane.countriesOfOperation / 100";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B44.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B44.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B44.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B45.1 (INVALID_OPERATION_VERB_FOUND_AFTER_ARITHMETIC_OPERAND 59)
					_rule = "(b.integers.iw.d[5] % 3 ^ 2)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B45.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B45.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B45.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B46.1 (DECIMAL_POINT_FOUND_IN_NON_FLOAT_ARITHMETIC_OPERAND 60)
					_rule = "(c.reals.fw.m[38.48] * 9.5 == 829)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B46.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B46.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B46.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B47.1 (UNPROCESSED_OPERATION_VERB_FOUND_IN_EXPRESSION 63)
					_rule = "a.transport.cars.rpmRange   ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B47.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B47.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B47.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B48.1 (UNPROCESSED_RHS_FOUND_IN_EXPRESSION 64)
					_rule = "a.transport.cars.autoMaker ==  ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B48.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B48.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B48.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B49.1 (RHS_VALUE_NO_MATCH_FOR_BOOLEAN_LHS_TYPE 66)
					_rule = "(a.transport.plane.isBasedInUSA == 55)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B49.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B49.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B49.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B50.1 (RHS_VALUE_NO_MATCH_FOR_INTEGER_LHS_TYPE 67)
					_rule = "(a.rack.hw.processorCoreCnt[3] != 72.18)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B50.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B50.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B50.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B51.1 (NO_DECIMAL_POINT_IN_RHS_VALUE 68)
					_rule = "(b.integers.iw.h[27] >= 10945)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B51.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B51.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B51.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B52.1 (MORE_THAN_ONE_DECIMAL_POINT_IN_RHS_VALUE 69)
					_rule = "(a.rack.hw.revenueTarget[2] < 4355633.456.345)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B52.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B52.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B52.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B53.1 (RHS_VALUE_NO_MATCH_FOR_FLOAT_LHS_TYPE 70)
					_rule = "(c.reals.fw.s[61.28] == 56.73x5)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B53.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B53.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B53.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B54.1 (RHS_VALUE_WITH_MISSING_OPEN_QUOTE_NO_MATCH_FOR_STRING_LHS_TYPE 71)
					_rule = "(b.digital.sw.productIdToName[98311] == You Chat')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B54.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B54.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B54.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B55.1 (RHS_VALUE_WITH_MISSING_CLOSE_QUOTE_NO_MATCH_FOR_STRING_LHS_TYPE 72)
					_rule = "(a.rack.hw.vendor == 'Intel)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B55.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B55.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B55.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B56.1 (NEGATIVE_SIGN_AT_WRONG_POSITION_OF_AN_RHS_INTEGER 73)
					_rule = "(b.integers.iw.e[13] >= 45-23)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B56.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B56.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B56.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B57.1 (MORE_THAN_ONE_NEGATIVE_SIGN_IN_AN_RHS_INTEGER 74)
					_rule = "(c.reals.fw.l[28.95] != --2734)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B57.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B57.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B57.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B58.1 (NEGATIVE_SIGN_AT_WRONG_POSITION_OF_AN_RHS_FLOAT 75)
					_rule = "(a.transport.plane.averagePrice == 234244-234.34)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B58.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B58.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B58.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B59.1 (MORE_THAN_ONE_NEGATIVE_SIGN_IN_AN_RHS_FLOAT 76)
					_rule = "(b.digital.sw.productNameToRevenue['Streams'] >= --945438131.84)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B59.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B59.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B59.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B60.1 (NEGATIVE_SIGN_FOUND_IN_NON_INTEGER_NON_FLOAT_ARITHMETIC_OPERAND 77)
					_rule = "(a.transport.plane.startingYear + -1916 == 4567)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B60.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B60.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B60.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B61.1 (NEGATIVE_SIGN_AT_WRONG_POSITION_IN_ARITHMETIC_OPERAND 78)
					_rule = "(b.integers.iw.g[21] + 56-23 == 4567)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B61.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B61.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B61.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B62.1 (EXPRESSION_WITH_NO_LHS_AND_OPERATION_VERB_AND_RHS 80)
					_rule = "    ";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B62.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B62.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B62.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B63.1 (INCOMPLETE_EXPRESSION_ENDING_WITH_LOGICAL_OPERATOR 81)
					_rule = "(a.transport.cars.autoMaker == 'Enzo Ferrari') &&";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B63.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B63.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B63.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B64.1 (INVALID_LOGICAL_OPERATOR_FOUND_IN_EXPRESSION 82)
					_rule = "(a.rack.hw.vendor contains 'Intel') $$ (b.integers.iw.d[3] == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B64.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B64.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B64.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B65.1 (OPEN_PARENTHESIS_FOUND_NOT_RIGHT_BEFORE_LHS 83)
					_rule = "a.rack.hw.vendor contains 'Intel' || (b.integers.iw.d[3] == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B65.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B65.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B65.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B66.1 (CLOSE_PARENTHESIS_FOUND_NOT_RIGHT_AFTER_RHS 84)
					_rule = "(a.rack.hw.vendor contains 'Intel') || (b.integers.iw.d[3]) == 4";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B66.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B66.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B66.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B67.1 (NO_SPACE_OR_ANOTHER_CLOSE_PARENTHESIS_AFTER_NEW_CLOSE_PARENTHESIS 86)
					_rule = "(a.rack.hw.vendor contains 'Intel') () || (b.integers.iw.d[3]) == 4";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B67.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B67.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B67.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B68.1 (NO_SPACE_RIGHT_BEFORE_LOGICAL_OPERATOR 87)
					_rule = "(a.rack.hw.vendor contains 'Intel'|| b.integers.iw.d[3] == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B68.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B68.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B68.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B69.1 (NO_SPACE_RIGHT_AFTER_LOGICAL_OPERATOR 88)
					_rule = "(a.rack.hw.vendor contains 'Intel') ||(b.integers.iw.d[3] == 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B69.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B69.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B69.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B70.1 (MIXED_LOGICAL_OPERATORS_FOUND_IN_SUBEXPRESSION 91)
					_rule = "(a.rack.hw.vendor contains 'Intel' || b.integers.iw.d[3] == 4 && testId == 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B70.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B70.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B70.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B71.1 (MIXED_LOGICAL_OPERATORS_FOUND_IN_INTER_SUBEXPRESSIONS 92)
					_rule = "(a.rack.hw.vendor contains 'Intel') || (b.integers.iw.d[3] == 4) && (testId == 'Happy Path')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B71.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B71.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B71.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B72.1 (PARENTHESIS_NOT_USED_CONSISTENTLY_THROUGHOUT_THE_EXPRESSION 94)
					_rule = "(a.rack.hw.vendor contains 'Intel') || (b.integers.iw.d[3] == 4) || testId == 'Happy Path'";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B72.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B72.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B72.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B73.1 (TUPLE_SCHEMA_MISMATCH_FOUND_IN_EXP_EVAL_PLAN_CACHE 95)
					// Do a valid rule execution for the rule to get cached.
					_rule = "a.rack.hw.vendor contains 'Intel'";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					// We have made a successful rule execution in the previous line.
					// We will now run the same rule by passing a tuple with a 
					// very different schema.
					//
					// NOTE: This particular rule evaluation test relies on the 
					// rule cache maintained on per thread basis. Since we are 
					// doing a lot of rule evaluations in this application from 
					// two different operators, this test result will be reliable
					// only when this application is run in distributed mode.
					// This rule cache based test result may be unreliable when running it
					// in standalone mode. 
					result = eval_predicate(_rule, _myTicker, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B73.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B73.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B73.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B74.1 (INVALID_INDEX_FOR_LHS_LIST_ATTRIBUTE 101)
					_rule = "(a.rack.hw.estimatedPrice[58] == 34167.19)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B74.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B74.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B74.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B75.1 (INVALID_KEY_FOR_LHS_MAP_ATTRIBUTE 102)
					_rule = "(b.digital.sw.productNameToId['Voice Gateway'] == 18492)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B75.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B75.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B75.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B76.1 (DIVIDE_BY_ZERO_ARITHMETIC_FOUND_DURING_EXP_EVAL 107)
					_rule = "(a.transport.plane.planesMade / 0 != 836)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B76.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B76.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B76.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B77.1 (LHS_ATTRIB_NAME_STOPS_ABRUPTLY_AT_THE_END_OF_THE_EXPRESSION 114)
					_rule = "a.rack.hw.processorFamily contains 'Cascade Lake' && a.transport.plane.isBasedInUSA";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B77.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B77.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B77.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B78.1 (MIXED_LOGICAL_OPERATORS_FOUND_IN_NESTED_SUBEXPRESSIONS 115)
					_rule = "(((b.digital.sw.productNameToGuid['You Chat'] notStartsWith '4345-8fd3-72550428159e') || (b.integers.iw.k[41] == 42.65) || (c.reals.fw.p[45.56] > 42.93) || (c.reals.fw.s[61.28] - 2.37 == 60.00)) || ((a.transport.cars.rpmRange contains 8700) && (b.digital.sw.productNameToRevenue['Streams'] == 945438131.84) && (a.rack.hw.vendor == 'Intel')) && a.transport.plane.startingYear == 1916)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B78.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B78.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B78.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B79.1 (OPEN_SQUARE_BRACKET_NOT_FOUND_AFTER_LIST_OF_TUPLE 117)
					_rule = "weatherList 0.city contains 'York'";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B79.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B79.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B79.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------

					// B80.1 (NO_PERIOD_FOUND_AFTER_LIST_OF_TUPLE 119)
					_rule = "(weatherList[0] hourlyTemperatureMap[592311] != 89.16)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B80.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B80.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B80.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B81.1 (SPACE_NOT_FOUND_AFTER_SPECIAL_OPERATION_VERB 122)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(weatherList sizeLE1 && weatherList[0].sunnyDay == false)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.1: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// B81.2 (INCOMPATIBLE_SIZE_EQ_OPERATION_FOR_LHS_ATTRIB_TYPE 123)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.plane.isBasedInUSA sizeEQ 1)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.2: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.3 (INCOMPATIBLE_SIZE_NE_OPERATION_FOR_LHS_ATTRIB_TYPE 124)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.plane.planesMade sizeNE 4)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.3: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.4 (INCOMPATIBLE_SIZE_LT_OPERATION_FOR_LHS_ATTRIB_TYPE 125)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.plane.planesMade sizeLT 7)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.4: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.5 (INCOMPATIBLE_SIZE_LE_OPERATION_FOR_LHS_ATTRIB_TYPE 126)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.plane.countriesOfOperation sizeLE 75)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.5: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.5: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.5: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.6 (INCOMPATIBLE_SIZE_GT_OPERATION_FOR_LHS_ATTRIB_TYPE 127)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.transport.plane.averageProfit sizeGT 256)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.6: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.6: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.6: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.7 (INCOMPATIBLE_SIZE_GE_OPERATION_FOR_LHS_ATTRIB_TYPE 128)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(a.rack.hw.processorCoreCnt[4] sizeGE 256)";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.7: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.7: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.7: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B81.8 (RHS_VALUE_NO_MATCH_FOR_SIZEXX_OPERATION_VERB 129)
					// Possible choices: sizeEQ, sizeNE, sizeLT, sizeLE, sizeGT, sizeGE
					_rule = "(b.digital.sw.productNameToRevenue sizeEQ '1024')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.8: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.8: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.8: Evaluation execution failed. Error=" + (rstring)error);
					}
										
					// B81.9 (COLLECTION_ITEM_EXISTENCE_INVALID_OPERATION_VERB_FOUND_DURING_EXP_EVAL 108)
					_rule = "(a.transport.cars.models containsCI 'Prius')";
					result = eval_predicate(_rule, _myTestData, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B81.9: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B81.9: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B81.9: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
					
					// B82.1 (INCOMPATIBLE_IN_OPERATION_FOR_LHS_ATTRIB_TYPE 146)
					type Role2_t = rstring role, int32 x, float32 y;
					mutable Role2_t myRole = {};
					myRole.role = "Tester";
					
					_rule = 'y in [1.1, 2.2, 3.3, 4.4, 5.5]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B82.1: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B82.1: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B82.1: Evaluation execution failed. Error=" + (rstring)error);
					}

					// B82.2 (INCOMPATIBLE_IN_CI_OPERATION_FOR_LHS_ATTRIB_TYPE 147)
					_rule = 'x inCI [1, 2, 3, 4, 5]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B82.2: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B82.2: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B82.2: Evaluation execution failed. Error=" + (rstring)error);
					}
					
					// B82.3 (RHS_VALUE_WITH_MISSING_OPEN_BRACKET_NO_MATCH_FOR_IN_OR_IN_CI_OPVERB 149)
					_rule = 'role in "Developer", "Tester", "Admin", "Manager"';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B82.3: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B82.3: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B82.3: Evaluation execution failed. Error=" + (rstring)error);
					}
										
					// B82.4 (INVALID_RHS_LIST_LITERAL_STRING_FOUND_FOR_IN_OR_IN_CI_OPVERB 151)
					// It has a missing double quote for a list literal string member.
					_rule = 'role in ["Developer", "Tester", "Admin", "Manager]';
					result = eval_predicate(_rule, myRole, error, $EVAL_PREDICATE_TRACING);
					
					if(result == true) {
						printStringLn("Testcase B82.4: Evaluation criteria is met.");
					} else if(result == false && error == 0) {
						printStringLn("Testcase B82.4: Evaluation criteria is not met.");
					} else {
						printStringLn("Testcase B82.4: Evaluation execution failed. Error=" + (rstring)error);
					}
					// -------------------------
				} // End of onTuple MTD.
		} // End of the UnhappyPathSink operator.
		
		// In this operator, we will do tests for getting
		// tuple attribute values in different ways.
		// In addition, we will do test cases for comparing
		// two tuples that are made of the same schema and
		// then to return a list containing the attribute
		// names that differ in their values across those
		// two tuples.
		() as FetchValueSink = Custom(MyTestData as MTD) {
			logic
				state: {
					// We will use these state variables.
					mutable TestData_t _myTestData = {};
					mutable rstring _attributeName = "";
				}
				
				onTuple MTD: {
					// Store it in the state.
					_myTestData = MTD;
					
					// We will methodically do many tests for 
					// getting tuple attribute values.
					mutable int32 error = 0;
					printStringLn("This operator tests the " +
						"get_tuple_attribute_value function. " +
						"It does both successful and failure test cases.");
					
					// -------------------------
					// Get the value of a given tuple attribute name.
					// Arg1: Fully qualified attribute name
					// Arg2: Your tuple
					// Arg3: A mutable variable of an appropriate type in which the
					//       value of a given attribute will be returned.
					// Arg4: A mutable int32 variable to receive non-zero error code if any.
					// Arg5: A boolean value to enable debug tracing inside this function.
					// It is a void method that returns nothing.
					//		
					// C1.1 (Get boolean value of a given attribute name)
					_attributeName = "a.transport.plane.isBasedInUSA";
					mutable boolean myVal1 = false;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal1, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.1: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal1);
						}
					} else {
						printStringLn("Testcase C1.1: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}
					
					// C1.2 (Get int32 value of a given attribute name)
					_attributeName = "a.transport.plane.numberOfPlants";
					mutable int32 myVal2 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal2, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.2: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal2);
						}
					} else {
						printStringLn("Testcase C1.2: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.3 (Get uint32 value of a given attribute name)
					_attributeName = "a.transport.plane.startingYear";
					mutable uint32 myVal3 = 0u;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal3, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.3: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal3);
						}
					} else {
						printStringLn("Testcase C1.3: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}
					
					// C1.4 (Get int64 value of a given attribute name)
					_attributeName = "a.transport.plane.planesMade";
					mutable int64 myVal4 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal4, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.4: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal4);
						}
					} else {
						printStringLn("Testcase C1.4: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}
					
					// C1.5 (Get uint64 value of a given attribute name)
					_attributeName = "    a.transport.plane.countriesOfOperation   ";
					mutable uint64 myVal5 = 0ul;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal5, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.5: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal5);
						}
					} else {
						printStringLn("Testcase C1.5: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.6 (Get float32 value of a given attribute name)
					_attributeName = "a.transport.plane.averagePrice";
					mutable float32 myVal6 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal6, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.6: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal6);
						}
					} else {
						printStringLn("Testcase C1.6: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.7 (Get float64 value of a given attribute name)
					_attributeName = "a.transport.plane.averageProfit";
					mutable float64 myVal7 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal7, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.7: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal7);
						}
					} else {
						printStringLn("Testcase C1.7: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.8 (Get rstring value of a given attribute name)
					_attributeName = "a.transport.plane.airliner";
					mutable rstring myVal8 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal8, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.8: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal8);
						}
					} else {
						printStringLn("Testcase C1.8: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.9 (Get the entire set<rstring> value of a given attribute name)
					_attributeName = "a.transport.cars.models";
					mutable set<rstring> myVal9 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal9, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.9: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal9);
						}
					} else {
						printStringLn("Testcase C1.9: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.10 (Get the entire set<int32> value of a given attribute name)
					_attributeName = "a.transport.cars.rpmRange";
					mutable set<int32> myVal10 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal10, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.10: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal10);
						}
					} else {
						printStringLn("Testcase C1.10: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.11 (Get the entire set<int64> value of a given attribute name)
					_attributeName = "a.transport.cars.numberOfEnginesMade";
					mutable set<int64> myVal11 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal11, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.11: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal11);
						}
					} else {
						printStringLn("Testcase C1.11: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.12 (Get the entire set<float32> value of a given attribute name)
					_attributeName = "a.transport.cars.secondsForZeroToSixty";
					mutable set<float32> myVal12 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal12, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.12: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal12);
						}
					} else {
						printStringLn("Testcase C1.12: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.13 (Get the entire set<float64> value of a given attribute name)
					_attributeName = "a.transport.cars.maxEngineTemp";
					mutable set<float64> myVal13 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal13, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.13: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal13);
						}
					} else {
						printStringLn("Testcase C1.13: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.14 (Get list<rstring>[idx] value of a given attribute name)
					_attributeName = "a.rack.hw.processorFamily[1]";
					mutable rstring myVal14 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal14, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.14: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal14);
						}
					} else {
						printStringLn("Testcase C1.14: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.15 (Get list<int32>[idx] value of a given attribute name)
					_attributeName = "a.rack.hw.processorCoreCnt[2]";
					mutable int32 myVal15 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal15, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.15: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal15);
						}
					} else {
						printStringLn("Testcase C1.15: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.16 (Get list<int64>[idx] value of a given attribute name)
					_attributeName = "a.rack.hw.l2CacheSize[4]";
					mutable int64 myVal16 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal16, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.16: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal16);
						}
					} else {
						printStringLn("Testcase C1.16: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.17 (Get list<float32>[idx] value of a given attribute name)
					_attributeName = "a.rack.hw.estimatedPrice[2]";
					mutable float32 myVal17 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal17, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.17: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal17);
						}
					} else {
						printStringLn("Testcase C1.17: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.18 (Get list<float64>[idx] value of a given attribute name)
					_attributeName = "a.rack.hw.revenueTarget[2]";
					mutable float64 myVal18 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal18, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.18: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal18);
						}
					} else {
						printStringLn("Testcase C1.18: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.19 (Get the entire list<int64> value of a given attribute name)
					_attributeName = "a.rack.hw.l2CacheSize";
					mutable list<int64> myVal19 = [];
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal19, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.19: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal19);
						}
					} else {
						printStringLn("Testcase C1.19: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.20 (Get map<rstring,int32>[key] value of a given attribute name)
					_attributeName = "  b.digital.sw.productNameToId  [  'You Chat'  ] ";
					mutable int32 myVal20 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal20, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.20: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal20);
						}
					} else {
						printStringLn("Testcase C1.20: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.21 (Get map<int32,rstring>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.productIdToName[98311]";
					mutable rstring myVal21 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal21, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.21: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal21);
						}
					} else {
						printStringLn("Testcase C1.21: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.22 (Get map<rstring,int64>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.productNameToOrderVolume['Star DB']";
					mutable int64 myVal22 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal22, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.22: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal22);
						}
					} else {
						printStringLn("Testcase C1.22: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.23 (Get map<int64,rstring>[key] value of a given attribute name)
					_attributeName = "   b.digital.sw.orderVolumeToProductName   [  8438131  ]   ";
					mutable rstring myVal23 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal23, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.23: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal23);
						}
					} else {
						printStringLn("Testcase C1.23: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.24 (Get map<rstring,float32>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.productNameToProfitMargin   [  'You Chat'   ]    ";
					mutable float32 myVal24 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal24, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.24: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal24);
						}
					} else {
						printStringLn("Testcase C1.24: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.25 (Get map<float32,rstring>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.profitMarginToProductName[9529842.17]";
					mutable rstring myVal25 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal25, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.25: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal25);
						}
					} else {
						printStringLn("Testcase C1.25: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.26 (Get map<rstring,float64>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.productNameToRevenue['Star DB']";
					mutable float64 myVal26 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal26, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.26: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal26);
						}
					} else {
						printStringLn("Testcase C1.26: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.27 (Get map<float64,rstring>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.revenueToProductName  [  862348922.45   ]   ";
					mutable rstring myVal27 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal27, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.27: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal27);
						}
					} else {
						printStringLn("Testcase C1.27: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.28 (Get map<rstring,rstring>[key] value of a given attribute name)
					_attributeName = "b.digital.sw.productNameToGuid  [  'You Chat'   ]   ";
					mutable rstring myVal28 = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal28, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.28: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal28);
						}
					} else {
						printStringLn("Testcase C1.28: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.29 (Get map<int32,int32>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.d  [  3  ]";
					mutable int32 myVal29 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal29, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.29: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal29);
						}
					} else {
						printStringLn("Testcase C1.29: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.30 (Get map<int32,int64>[key] value of a given attribute name)
					_attributeName = "   b.integers.iw.e  [  13  ]  ";
					mutable int64 myVal30 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal30, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.30: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal30);
						}
					} else {
						printStringLn("Testcase C1.30: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.31 (Get map<int64,int32>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.f  [  14  ]";
					mutable int32 myVal31 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal31, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.31: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal31);
						}
					} else {
						printStringLn("Testcase C1.31: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.32 (Get map<int64,int64>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.g  [  21  ]";
					mutable int64 myVal32 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal32, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.32: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal32);
						}
					} else {
						printStringLn("Testcase C1.32: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.33 (Get map<int32,float32>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.h  [  25  ]";
					mutable float32 myVal33 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal33, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.33: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal33);
						}
					} else {
						printStringLn("Testcase C1.33: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.34 (Get map<int32,float64>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.i  [  29  ]";
					mutable float64 myVal34 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal34, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.34: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal34);
						}
					} else {
						printStringLn("Testcase C1.34: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.35 (Get map<int64,float32>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.j  [  35  ]";
					mutable float32 myVal35 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal35, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.35: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal35);
						}
					} else {
						printStringLn("Testcase C1.35: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.36 (Get map<int64,float64>[key] value of a given attribute name)
					_attributeName = "b.integers.iw.k  [  41  ]";
					mutable float64 myVal36 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal36, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.36: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal36);
						}
					} else {
						printStringLn("Testcase C1.36: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.37 (Get map<float32,int32>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.l  [  28.95  ]";
					mutable int32 myVal37 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal37, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.37: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal37);
						}
					} else {
						printStringLn("Testcase C1.37: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.38 (Get map<float32,int64>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.m  [  36.17  ]";
					mutable int64 myVal38 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal38, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.38: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal38);
						}
					} else {
						printStringLn("Testcase C1.38: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.39 (Get map<float64,int32>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.n  [  30.76  ]";
					mutable int32 myVal39 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal39, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.39: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal39);
						}
					} else {
						printStringLn("Testcase C1.39: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.40 (Get map<float64,int64>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.o  [  40.27  ]";
					mutable int64 myVal40 = 0l;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal40, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.40: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal40);
						}
					} else {
						printStringLn("Testcase C1.40: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.41 (Get map<float32,float32>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.p  [  45.56  ]";
					mutable float32 myVal41 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal41, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.41: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal41);
						}
					} else {
						printStringLn("Testcase C1.41: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.42 (Get map<float32,float64>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.q  [  49.81  ]";
					mutable float64 myVal42 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal42, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.42: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal42);
						}
					} else {
						printStringLn("Testcase C1.42: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.43 (Get map<float64,float32>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.r  [  53.25  ]";
					mutable float32 myVal43 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal43, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.43: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal43);
						}
					} else {
						printStringLn("Testcase C1.43: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.44 (Get map<float64,float64>[key] value of a given attribute name)
					_attributeName = "c.reals.fw.s  [  59.09  ]";
					mutable float64 myVal44 = 0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal44, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.44: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal44);
						}
					} else {
						printStringLn("Testcase C1.44: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.45 (Get the entire map<rstring,int64> value of a given attribute name)
					_attributeName = "b.digital.sw.productNameToOrderVolume";
					mutable map<rstring,int64> myVal45 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal45, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.45: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal45);
						}
					} else {
						printStringLn("Testcase C1.45: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.46 (Get a list<TUPLE>[idx] value of a given tuple attribute name)
					_attributeName = "weatherList[0].hourlyTemperatureMap";
					mutable map<int64, float64> myVal46 = {};
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal46, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.46: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal46);
						}
					} else {
						printStringLn("Testcase C1.46: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// C1.47 (Get the entire list<TUPLE> value of a given tuple attribute name)
					_attributeName = "weatherList";
					mutable list<Weather_t> myVal47 = [];
					get_tuple_attribute_value(_attributeName, _myTestData,
						myVal47, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.47: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)myVal47);
						}
					} else {
						printStringLn("Testcase C1.47: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}
					
					// C1.48
					// Get a map<rstring,rstring>[key] value of a given tuple attribute name.
					// In this case, the map key string has a quote character in it.
					// If the entire rule expression is in a single string literal,
					// then the embedded quote characters may require escaping.
					_attributeName = 'weatherList[0].reporters["WKLX\'s weatherwoman"]';
					mutable rstring weatherwoman = "";
					get_tuple_attribute_value(_attributeName, _myTestData,
						weatherwoman, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase C1.48: Tuple attribute value was fetched successfully.");
						
						if($DISPLAY_FETCHED_ATTRIBUTE_VALUE == true) {
							printStringLn(_attributeName + "=" + (rstring)weatherwoman);
						}
					} else {
						printStringLn("Testcase C1.48: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}
					
					// Compare the attribute values of two tuples that are based on the same schema.
					// Arg1: Your tuple1
					// Arg2: Your tuple2
					// Arg3: A mutable variable of list<string> type in which the
					//       attribute names that have a match in their values will be returned.
					// Arg4: A mutable variable of list<string> type in which the
					//       attribute names that differ in their values will be returned.
					// Arg5: A mutable int32 variable to receive non-zero error code if any.
					// Arg6: A boolean value to enable debug tracing inside this function.
					//
					// C1.49
					// Compare two tuples that have no differing attribute values.
					//
					// Declare a nested tuple data structure to be used in this test case.
					type NestedType1_t = int32 x, float64 y, rstring z, list<int32> l;
					type NestedType2_t = NestedType1_t m, map<int32, boolean> n, timestamp o;
					type Test_t = boolean a, int32 b, uint64 c, float32 d, float64 e,
						rstring f, set<int32> g, list<rstring> h, map<int32, rstring> i,
						map<rstring, float64> j, NestedType2_t k;
					
					// Create two tuples that are based on the same schema.
					mutable Test_t myTuple1 = {};
					mutable Test_t myTuple2 = {};
					mutable list<rstring> matchingAttributes = [];
					mutable list<rstring> differingAttributes = [];
					
					// Populate the tuple with some data.
					myTuple1.a = true;
					myTuple1.b = 456;
					myTuple1.c = 789ul;
					myTuple1.d = (float32)123.45;
					myTuple1.e = 987.65;
					myTuple1.f = "Life is mainly there to have fun.";
					myTuple1.g = {5, 9, 2, 6};
					myTuple1.h = ['One', 'Two', 'Three'];
					myTuple1.i = {1:'One', 2:'Two', 3:'Three'};
					myTuple1.j = {"One":1.0, "Two":2.0, "Three":3.0};
					myTuple1.k.m.x = 678;
					myTuple1.k.m.y = 936.27;
					myTuple1.k.m.z = "String inside a nested tuple.";
					myTuple1.k.m.l = [67, 78, 89];
					myTuple1.k.n = {1:true, 2:false, 3:true}; 
					myTuple1.k.o = getTimestamp();
						
					// Make the second tuple same as the first tuple.
					myTuple2 = myTuple1;
					
					// Compare them now.
					compare_tuple_attributes(myTuple1, myTuple2,
						matchingAttributes, differingAttributes, 
						error, $EVAL_PREDICATE_TRACING);
	    			
					if(error == 0) {
						printStringLn("Testcase C1.49: Compare tuple attributes function returned successfully. " +
							", matchingAttributes = " + (rstring)matchingAttributes + 
							", differingAttributes = " + (rstring)differingAttributes);
					} else {
						printStringLn("Testcase C1.49: Compare tuple attributes function returned an error. Error=" + (rstring)error);
					}
	    					
					// C1.50
					// Compare two tuples that have differing attribute values.
					//
					// Make the second tuple to have a few different attribute values than the first tuple.
					myTuple2.a = false;
					myTuple2.d = (float32)145.12;
					myTuple2.f = "Life is mainly there to have joy and peace.";
					myTuple2.i = {10:'Ten', 9:'Nine', 8:'Eight'};
					myTuple2.k.m.y = 27.93;
					myTuple2.k.m.z = "Different string inside a nested tuple.";
					myTuple2.k.n = {1:true, 2:true, 3:true};
					// Wait for 2 seconds for time to change.
					block(2.0);
					myTuple2.k.o = getTimestamp(); 
					
					// Clear the list.
					matchingAttributes = (list<rstring>)[];
					differingAttributes = (list<rstring>)[];
					// Compare them now.
					compare_tuple_attributes(myTuple1, myTuple2,
						matchingAttributes, differingAttributes, 
						error, $EVAL_PREDICATE_TRACING);
	    			
					if(error == 0) {
						printStringLn("Testcase C1.50: Compare tuple attributes function returned successfully. " +
							", matchingAttributes = " + (rstring)matchingAttributes + 
							", differingAttributes = " + (rstring)differingAttributes);
					} else {
						printStringLn("Testcase C1.50: Compare tuple attributes function returned an error. Error=" + (rstring)error);
					}
					
					// C1.51
					// Get tuple schema literal string along with its attribute information.
					//
					mutable rstring tupleSchema = "";
					mutable map<rstring, rstring> attributeInfo = {};
					
					// Call the specific function that can do this for us.
					// It will return the tuple schema literal string in the 
					// mutable string variable passed as a second function argument.
					// It will return the tuple attribute information in the
					// mutable map variable passed as a third function argument.
					// This map's keys will hold the fully qualified tuple attribute names.
					// This map's values will hold the SPL type names of the tuple attribute names.
					get_tuple_schema_and_attribute_info(myTuple1, tupleSchema,
						attributeInfo, error, $EVAL_PREDICATE_TRACING);

					if(error == 0) {
						printStringLn("Testcase C1.51: Get tuple schema function returned successfully. " +
							", tupleSchema = " + tupleSchema + 
							", attributeInfo = " + (rstring)attributeInfo);
					} else {
						printStringLn("Testcase C1.51: Get tuple schema function returned an error. Error=" + (rstring)error);
					}					
										
					// -------------------------
					
					// Let us add below a few test cases for the
					// get_tuple_attribute_value function where
					// it will fail and return an error.
					//
					// D1.1 (LHS_NOT_MATCHING_WITH_ANY_TUPLE_ATTRIBUTE 16)
					_attributeName = "xyz";
					mutable int32 errorVal1 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal1, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.1: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.1: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.2 (EMPTY_ATTRIBUTE_NAME_GIVEN_FOR_VALUE_FETCHING 131)
					_attributeName = "";
					mutable int32 errorVal2 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal2, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.2: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.2: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.3 (NON_SPACE_CHARACTER_FOUND_AFTER_A_VALID_ATTRIBUTE_NAME 132)
					_attributeName = "a.transport.plane.isBasedInUSA xyz";
					mutable boolean errorVal3 = false;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal3, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.3: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.3: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.4 (ATTRIBUTE_NAME_WITH_NO_VALID_CHARACTERS 133)
					_attributeName = "              ";
					mutable int32 errorVal4 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal4, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.4: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.4: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.5 (WRONG_TYPE_OF_ATTRIBUTE_PASSED_AS_FUNCTION_ARGUMENT_BY_CALLER 136)
					_attributeName = "a.transport.plane.isBasedInUSA";
					mutable int32 errorVal5 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal5, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.5: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.5: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.6 (INVALID_INDEX_FOR_LHS_LIST_ATTRIBUTE 101)
					_attributeName = "a.rack.hw.estimatedPrice[297]";
					mutable float32 errorVal6 = (float32)0.0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal6, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.6: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.6: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}

					// D1.7 (INVALID_KEY_FOR_LHS_MAP_ATTRIBUTE 102)
					_attributeName = "c.reals.fw.l  [  84528.95  ]";
					mutable int32 errorVal7 = 0;
					get_tuple_attribute_value(_attributeName, _myTestData,
						errorVal7, error, $EVAL_PREDICATE_TRACING);
					
					if(error == 0) {
						printStringLn("Testcase D1.7: Tuple attribute value was fetched successfully.");
					} else {
						printStringLn("Testcase D1.7: Tuple attribute value was not fetched successfully. Error=" + (rstring)error);
					}					
					// -------------------------
				} // End of onTuple MTD.
		} // End of the HappyPathSink operator.
} // End of main composite.
 
