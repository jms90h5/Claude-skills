// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2013, 2013     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace com.ibm.streams.javafunctionsamples.jvm;

/**
   Simple function that dumps various JVM information
   using sample jvm Java native functions.
*/
public stateful boolean dumpVmInfo(rstring where) {
  println("JVM Info dump from:" + where);
  println("  Name: " + getVmName());
  println("  Version: " + getVmVersion());
  println("  Vendor: " + getVmVendor());
  println("  Available Processors: " + (rstring) availableProcessors());

  println("");

  println("  Total Memory: " + (rstring) totalMemory());
  println("  Free Memory : " + (rstring) freeMemory());
  println("  Max Memory  : " + (rstring) maxMemory());

  println("  Garbage collect"); gc();
  println("  Finalize"); runFinalization();

  println("  Total Memory: " + (rstring) totalMemory());
  println("  Free Memory : " + (rstring) freeMemory());
  println("  Max Memory  : " + (rstring) maxMemory());
  println("-----------------------------------");
  return false;
}
