// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_ibm_streams_javafunctionsamples_jvm_h
#define SPL_JNIFunctions_com_ibm_streams_javafunctionsamples_jvm_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace ibm {
namespace streams {
namespace javafunctionsamples {
namespace jvm {
class SPL_JNIFunctions {
public:

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::rstring getVmName() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "getVmName", "()Ljava/lang/String;", "com.ibm.streams.javafunctionsamples.jvm", "public rstring getVmName()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring resObj = (jstring) env->CallStaticObjectMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    if (resObj != NULL) {
        const jchar *chars = env->GetStringChars(resObj, NULL);
        if (chars == NULL)
            SPL::SPLJavaFunction::throwCreateError(func);
        SPL::ustring result((const UChar *) chars, (int32_t) env->GetStringLength(resObj));
        env->ReleaseStringChars(resObj, chars);
        env->DeleteLocalRef(resObj);
        return SPL::ustring::toUTF8(result);
    } else {
        return SPL::rstring("");
    }
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::rstring getVmVendor() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "getVmVendor", "()Ljava/lang/String;", "com.ibm.streams.javafunctionsamples.jvm", "public rstring getVmVendor()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring resObj = (jstring) env->CallStaticObjectMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    if (resObj != NULL) {
        const jchar *chars = env->GetStringChars(resObj, NULL);
        if (chars == NULL)
            SPL::SPLJavaFunction::throwCreateError(func);
        SPL::ustring result((const UChar *) chars, (int32_t) env->GetStringLength(resObj));
        env->ReleaseStringChars(resObj, chars);
        env->DeleteLocalRef(resObj);
        return SPL::ustring::toUTF8(result);
    } else {
        return SPL::rstring("");
    }
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::rstring getVmVersion() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "getVmVersion", "()Ljava/lang/String;", "com.ibm.streams.javafunctionsamples.jvm", "public rstring getVmVersion()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring resObj = (jstring) env->CallStaticObjectMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    if (resObj != NULL) {
        const jchar *chars = env->GetStringChars(resObj, NULL);
        if (chars == NULL)
            SPL::SPLJavaFunction::throwCreateError(func);
        SPL::ustring result((const UChar *) chars, (int32_t) env->GetStringLength(resObj));
        env->ReleaseStringChars(resObj, chars);
        env->DeleteLocalRef(resObj);
        return SPL::ustring::toUTF8(result);
    } else {
        return SPL::rstring("");
    }
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static void runFinalization() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "runFinalization", "()V", "com.ibm.streams.javafunctionsamples.jvm", "public stateful void runFinalization()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    env->CallStaticVoidMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static void gc() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "gc", "()V", "com.ibm.streams.javafunctionsamples.jvm", "public stateful void gc()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    env->CallStaticVoidMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::int64 freeMemory() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "freeMemory", "()J", "com.ibm.streams.javafunctionsamples.jvm", "public stateful int64 freeMemory()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int64 result = env->CallStaticLongMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::int32 availableProcessors() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "availableProcessors", "()I", "com.ibm.streams.javafunctionsamples.jvm", "public stateful int32 availableProcessors()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int32 result = env->CallStaticIntMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::int64 totalMemory() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "totalMemory", "()J", "com.ibm.streams.javafunctionsamples.jvm", "public stateful int64 totalMemory()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int64 result = env->CallStaticLongMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.jvm.SystemFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::int64 maxMemory() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.jvm.SystemFunctions", "maxMemory", "()J", "com.ibm.streams.javafunctionsamples.jvm", "public stateful int64 maxMemory()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int64 result = env->CallStaticLongMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

};
}
}
}
}
}
}
}
#endif
