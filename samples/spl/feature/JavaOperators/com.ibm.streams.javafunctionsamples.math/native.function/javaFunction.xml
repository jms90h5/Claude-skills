<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<functionModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <functionSet>
    <headerFileName>SPL_JNIFunctions_com_ibm_streams_javafunctionsamples_math.h</headerFileName>
    <cppNamespaceName>SPL::JNIFunctions::com::ibm::streams::javafunctionsamples::math::SPL_JNIFunctions</cppNamespaceName>
    <functions>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns `n!` (`n` factorial).</description>
        <prototype><![CDATA[public int64 factorial(int32 n)]]></prototype>
        <javaFunctionName>public static long com.ibm.streams.function.samples.math.MathFunctions.factorial(int)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns `n!` (`n` factorial).</description>
        <prototype><![CDATA[public uint64 factorial(uint32 n)]]></prototype>
        <javaFunctionName>public static long com.ibm.streams.function.samples.math.MathFunctions.factorial(int)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns the hyperbolic sine of a `float64` value.</description>
        <prototype><![CDATA[public float64 sinh(float64 v)]]></prototype>
        <javaFunctionName>public static double com.ibm.streams.function.samples.math.MathFunctions.sinh(double)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns the hyperbolic cosine of a `float64` value.</description>
        <prototype><![CDATA[public float64 cosh(float64 v)]]></prototype>
        <javaFunctionName>public static double com.ibm.streams.function.samples.math.MathFunctions.cosh(double)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns the hyperbolic tangent of a `float64` value.</description>
        <prototype><![CDATA[public float64 tanh(float64 v)]]></prototype>
        <javaFunctionName>public static double com.ibm.streams.function.samples.math.MathFunctions.tanh(double)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025-->
        <description>Returns the square root of `x` squared plus `y` squared.</description>
        <prototype><![CDATA[public float64 hypotenuse(float64 x, float64 y)]]></prototype>
        <javaFunctionName>public static double com.ibm.streams.function.samples.math.MathFunctions.hypot(double,double)</javaFunctionName>
      </function>
    </functions>
    <dependencies>
      <library>
        <cmn:description>C++ interface to Java native functions.</cmn:description>
        <cmn:managedLibrary>
          <cmn:lib>streams-stdtk-javaop</cmn:lib>
          <cmn:lib>streams-stdtk-runtime</cmn:lib>
          <cmn:includePath>.</cmn:includePath>
        </cmn:managedLibrary>
      </library>
      <library>
        <cmn:description>Java JNI.</cmn:description>
        <cmn:managedLibrary>
          <cmn:lib>pthread</cmn:lib>
          <cmn:lib>dl</cmn:lib>
          <cmn:includePath>@JAVA_HOME@/include</cmn:includePath>
          <cmn:includePath>@JAVA_HOME@/include/linux</cmn:includePath>
          <cmn:command>@STREAMS_TOOLKIT_DIR@/impl/bin/JavaOp_vmpath.sh</cmn:command>
        </cmn:managedLibrary>
      </library>
    </dependencies>
  </functionSet>
</functionModel>
