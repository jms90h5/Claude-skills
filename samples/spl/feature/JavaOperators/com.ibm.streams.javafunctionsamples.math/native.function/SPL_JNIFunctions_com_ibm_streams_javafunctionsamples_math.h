// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_ibm_streams_javafunctionsamples_math_h
#define SPL_JNIFunctions_com_ibm_streams_javafunctionsamples_math_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace ibm {
namespace streams {
namespace javafunctionsamples {
namespace math {
class SPL_JNIFunctions {
public:

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::int64 factorial(SPL::int32 const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.math.MathFunctions", "factorial", "(I)J", "com.ibm.streams.javafunctionsamples.math", "public int64 factorial(int32 n)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int64 result = env->CallStaticLongMethod(classGlobalRef, mid, arg1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::uint64 factorial(SPL::uint32 const & arg1) {
    SPL::int64 result = factorial((SPL::int32) arg1);
    return (SPL::uint64) result;
}

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::float64 sinh(SPL::float64 const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.math.MathFunctions", "sinh", "(D)D", "com.ibm.streams.javafunctionsamples.math", "public float64 sinh(float64 v)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::float64 result = env->CallStaticDoubleMethod(classGlobalRef, mid, arg1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::float64 cosh(SPL::float64 const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.math.MathFunctions", "cosh", "(D)D", "com.ibm.streams.javafunctionsamples.math", "public float64 cosh(float64 v)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::float64 result = env->CallStaticDoubleMethod(classGlobalRef, mid, arg1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::float64 tanh(SPL::float64 const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.math.MathFunctions", "tanh", "(D)D", "com.ibm.streams.javafunctionsamples.math", "public float64 tanh(float64 v)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::float64 result = env->CallStaticDoubleMethod(classGlobalRef, mid, arg1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from com.ibm.streams.function.samples.math.MathFunctions in lib/samples.jar at Wed Jun 11 18:38:49 UTC 2025
static SPL::float64 hypotenuse(SPL::float64 const & arg1, SPL::float64 const & arg2) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaOperators", "2.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "lib/samples.jar", "com.ibm.streams.function.samples.math.MathFunctions", "hypot", "(DD)D", "com.ibm.streams.javafunctionsamples.math", "public float64 hypotenuse(float64 x, float64 y)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::float64 result = env->CallStaticDoubleMethod(classGlobalRef, mid, arg1, arg2);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

};
}
}
}
}
}
}
}
#endif
