<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<toolkitModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/toolkit" productVersion="7.2.0.1" xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:ti="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <toolkit name="JavaOperators" requiredProductVersion="3.2.0" version="2.0.0">
    <description>Sample demonstrating the use of Java operators</description>
    <uriTable>
      <uri index="16" value="com.ibm.streams.javaprimitivesamples.operators/RegexFilter"/>
      <uri index="15" value="com.ibm.streams.javaprimitivesamples.operators/DecimalScaleSetter"/>
      <uri index="1" value="com.ibm.streams.javafunctionsamples.jvm/jvm.spl"/>
      <uri index="2" value="sample/JavaOperators.spl"/>
      <uri index="5" value="sample/DirectoryLister"/>
      <uri index="3" value="com.ibm.streams.javafunctionsamples.math/native.function/javaFunction.xml"/>
      <uri index="12" value="com.ibm.streams.javaprimitivesamples.operators/MaxMinOperator"/>
      <uri index="4" value="com.ibm.streams.javafunctionsamples.jvm/native.function/javaFunction.xml"/>
      <uri index="7" value="com.ibm.streams.javaprimitivesamples.sinks/HTTPPost"/>
      <uri index="6" value="com.ibm.streams.javaprimitivesamples.windows/TumblingSort"/>
      <uri index="8" value="com.ibm.streams.javaprimitivesamples.sources/SystemPropertySource"/>
      <uri index="9" value="com.ibm.streams.javaprimitivesamples.sources/RandomBeacon"/>
      <uri index="13" value="com.ibm.streams.javaprimitivesamples.operators/PassThrough"/>
      <uri index="10" value="com.ibm.streams.javaprimitivesamples.sources/RandomBeaconWithTimestamp"/>
      <uri index="14" value="com.ibm.streams.javaprimitivesamples.operators/PortSequencer"/>
      <uri index="11" value="com.ibm.streams.javaprimitivesamples.operators/OrderedPortSequencer"/>
    </uriTable>
    <namespace name="com.ibm.streams.javafunctionsamples.math">
      <function modelUriIndex="3" name="factorial" native="true" public="true" returnType="int64" uriIndex="0">
        <description>Returns `n!` (`n` factorial).</description>
        <prototype>public int64 factorial(int32 n)</prototype>
        <parameter name="n" type="int32"/>
      </function>
      <function modelUriIndex="3" name="factorial" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>Returns `n!` (`n` factorial).</description>
        <prototype>public uint64 factorial(uint32 n)</prototype>
        <parameter name="n" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="sinh" native="true" public="true" returnType="float64" uriIndex="0">
        <description>Returns the hyperbolic sine of a `float64` value.</description>
        <prototype>public float64 sinh(float64 v)</prototype>
        <parameter name="v" type="float64"/>
      </function>
      <function modelUriIndex="3" name="cosh" native="true" public="true" returnType="float64" uriIndex="0">
        <description>Returns the hyperbolic cosine of a `float64` value.</description>
        <prototype>public float64 cosh(float64 v)</prototype>
        <parameter name="v" type="float64"/>
      </function>
      <function modelUriIndex="3" name="tanh" native="true" public="true" returnType="float64" uriIndex="0">
        <description>Returns the hyperbolic tangent of a `float64` value.</description>
        <prototype>public float64 tanh(float64 v)</prototype>
        <parameter name="v" type="float64"/>
      </function>
      <function modelUriIndex="3" name="hypotenuse" native="true" public="true" returnType="float64" uriIndex="0">
        <description>Returns the square root of `x` squared plus `y` squared.</description>
        <prototype>public float64 hypotenuse(float64 x, float64 y)</prototype>
        <parameter name="x" type="float64"/>
        <parameter name="y" type="float64"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streams.javafunctionsamples.jvm">
      <function modelUriIndex="4" name="getVmName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Returns the Java virtual machine implementation name.</description>
        <prototype>public rstring getVmName()</prototype>
      </function>
      <function modelUriIndex="4" name="getVmVendor" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Returns the Java virtual machine implementation vendor.</description>
        <prototype>public rstring getVmVendor()</prototype>
      </function>
      <function modelUriIndex="4" name="getVmVersion" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Returns the Java virtual machine implementation version.</description>
        <prototype>public rstring getVmVersion()</prototype>
      </function>
      <function modelUriIndex="4" name="runFinalization" native="true" public="true" returnType="void" uriIndex="0">
        <description>Request running of `Object.finalize()` for objects pending garbage collection in the Java virtual machine.</description>
        <prototype>public stateful void runFinalization()</prototype>
      </function>
      <function modelUriIndex="4" name="gc" native="true" public="true" returnType="void" uriIndex="0">
        <description>Request garbage collection for the Java virtual machine.</description>
        <prototype>public stateful void gc()</prototype>
      </function>
      <function modelUriIndex="4" name="freeMemory" native="true" public="true" returnType="int64" uriIndex="0">
        <description>Returns the amount of free memory (in bytes) in the Java Virtual Machine.</description>
        <prototype>public stateful int64 freeMemory()</prototype>
      </function>
      <function modelUriIndex="4" name="availableProcessors" native="true" public="true" returnType="int32" uriIndex="0">
        <description>Return the number of processors available to the Java virtual machine.</description>
        <prototype>public stateful int32 availableProcessors()</prototype>
      </function>
      <function modelUriIndex="4" name="totalMemory" native="true" public="true" returnType="int64" uriIndex="0">
        <description>Returns the total amount of memory in the Java virtual machine.</description>
        <prototype>public stateful int64 totalMemory()</prototype>
      </function>
      <function modelUriIndex="4" name="maxMemory" native="true" public="true" returnType="int64" uriIndex="0">
        <description>Returns the maximum amount of memory that the Java virtual machine will attempt to use.</description>
        <prototype>public stateful int64 maxMemory()</prototype>
      </function>
      <function column="1" line="32" name="dumpVmInfo" native="false" public="true" returnType="boolean" stateful="true" uriIndex="1">
        <prototype>public stateful boolean dumpVmInfo(rstring where)</prototype>
        <parameter name="where" type="rstring"/>
      </function>
    </namespace>
    <namespace name="sample">
      <primitiveOp language="Java" modelUriIndex="5" name="DirectoryLister" public="true">
        <description>Sample operator for a Java primitive</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter expressionMode="AttributeFree" name="listDirectory" optional="false" type="rstring"/>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Preserving"/>
      </primitiveOp>
      <compositeOp column="11" line="51" name="JavaOperators" potentialMain="true" uriIndex="2"/>
    </namespace>
    <namespace name="com.ibm.streams.javaprimitivesamples.windows">
      <primitiveOp language="Java" modelUriIndex="6" name="TumblingSort" public="true">
        <description>Sample ascending sort operator for a tumbling window.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="flushOnFinal" optional="true" type="boolean">
          <description>Flush sort buffer when final punctuation mark is processed.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="sortAttributes" optional="true" type="rstring">
          <description>Names of the attributes to perform the sort on. If not supplied then all comparable attributes will be used as the sort key, with priority given to attributes with the lower index.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="WindowBound">
          <description/>
          <windowPolicy>Windowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description/>
        </outputPort>
      </primitiveOp>
    </namespace>
    <namespace name="com.ibm.streams.javaprimitivesamples.sinks">
      <primitiveOp language="Java" modelUriIndex="7" name="HTTPPost" public="true">
        <description>Sink operator where incoming tuples are sent as an HTTP POST requests to the URL specified in the operator specific `url` parameter.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="batchSize" optional="true" type="int32">
          <description>Set the batch size.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="url" optional="false" type="rstring">
          <description>HTTP URL of the server to POST data to.</description>
        </parameter>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
      </primitiveOp>
    </namespace>
    <namespace name="com.ibm.streams.javaprimitivesamples.sources">
      <primitiveOp language="Java" modelUriIndex="8" name="SystemPropertySource" public="true">
        <description>Submits an output tuple for each Java system property.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="tagged" optional="true" type="rstring">
          <description>Prefix for property names to be tagged with the value of `tags`.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="tags" optional="true" type="rstring">
          <description>Tags to set in `tags` output attribute when the property name starts with the value of `taggged`.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Port requiring `name` and `value` attributes representing a system property. Optional `tags` attribute containing tags for the property</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="9" name="RandomBeacon" public="true">
        <description>Sample source operator that creates a tuple with random values on its single output port according to the defined period.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="iterations" optional="true" type="int32">
          <description>The number of tuples to submit. Negative value or zero means continually fetch and submit tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="period" optional="true" type="float64">
          <description>Polling period in seconds. Tuples will be fetched every `period` seconds.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="seed" optional="true" type="int64">
          <description>Seed for the random number generator.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Port that produces the generated tuples with random attribute values</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="10" name="RandomBeaconWithTimestamp" public="true">
        <description>Sample source operator that creates a tuple with random values and a timestamp.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="iterations" optional="true" type="int32">
          <description>The number of tuples to submit. Negative value or zero means continually fetch and submit tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="period" optional="true" type="float64">
          <description>Polling period in seconds. Tuples will be fetched every `period` seconds.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="seed" optional="true" type="int64">
          <description>Seed for the random number generator.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Port that produces the generated tuples with random attribute values</description>
        </outputPort>
      </primitiveOp>
    </namespace>
    <namespace name="com.ibm.streams.javaprimitivesamples.operators">
      <primitiveOp language="Java" modelUriIndex="11" name="OrderedPortSequencer" public="true">
        <description>Operator that maintains an per-input port `int64` sequence number for arriving tuples and sets it as the `portSequence` attribute of the output tuple and ensures tuples are submitted to its output port is sequence number order.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description/>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="12" name="MaxMinOperator" public="true">
        <description>Simple sample operator that monitors the incoming tuples and sends the max or min value that is seen on the attribute specified by the monitoredAttr parameter on the first output port along with the original tuple on the second output port.</description>
        <customLiterals name="com.ibm.streams.operator.samples.operators.MaxMinOperator.Type">
          <value name="Max"/>
          <value name="Min"/>
        </customLiterals>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="CustomLiteral" name="monitorType" optional="false" type="com.ibm.streams.operator.samples.operators.MaxMinOperator.Type">
          <description>Set whether the operator is monitoring 'Max' or 'Min' value</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="monitoredAttr" optional="false" type="int32">
          <description>Set the tuple attribute of type 'int32' to monitor.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="2" minNumPorts="2" optional="false" windowPunctOutputMode="Free">
          <description/>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="13" name="PassThrough" public="true">
        <description>Simple sample operator that passes all input unchanged from any input port to its output port.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description/>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="14" name="PortSequencer" public="true">
        <description>Operator that maintains an per-input port `int64` sequence number for arriving tuples and sets it as the `portSequence` attribute of the output tuple.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description/>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="15" name="DecimalScaleSetter" public="true">
        <description/>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="name" optional="false" type="rstring">
          <description>Name of input attribute to have its decimal scale set.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="scale" optional="false" type="int32">
          <description>Scale to set for input attributes with name `name`.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Preserving">
          <description/>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="16" name="RegexFilter" public="true">
        <description>Sample operator that using regular expressions to filter tuples.</description>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="patterns" optional="false" type="rstring">
          <description>Set the regular expression patterns used to filter tuples.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description/>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Preserving">
          <description/>
        </outputPort>
      </primitiveOp>
    </namespace>
    <sabFiles>
      <ti:include path="toolkit.xml" root="toolkitDir"/>
      <ti:include path="impl/java/lib/**" root="toolkitDir"/>
      <ti:include path="impl/java/bin/**" root="toolkitDir"/>
      <ti:include path="impl/bin/**" root="toolkitDir"/>
      <ti:include path="impl/lib/**" root="toolkitDir"/>
      <ti:include path="impl/nl/*.dat" root="toolkitDir"/>
      <ti:include path="etc/**" root="toolkitDir"/>
      <ti:include path="lib/**" root="toolkitDir"/>
      <ti:include path="nl/**" root="toolkitDir"/>
      <ti:include path="opt/**" root="toolkitDir"/>
    </sabFiles>
  </toolkit>
</toolkitModel>
