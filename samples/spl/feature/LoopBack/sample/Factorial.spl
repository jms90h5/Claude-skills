// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2010, 2016     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace sample;

// Because of the loopback on a Custom, we must use manual threading 
// to ensure that the process exits cleanly. This Custom will not forward 
// its final puncutations to all output ports, which means that some input 
// ports will never receive final punctuations. If those input ports are 
// managed by either scheduled ports or a threaded port, the thread will 
// never exit. As a result, we need to execute this composite with the 
// manual threading model.
@threading(model=manual)
composite Factorial 
{
  graph
 
    // Generate integers in the range [0..10].
    stream<int32 number> Src = Beacon() 
    {
      param iterations : 10u;
      output Src : number = (int32) IterationCount();
    }
    
    // Compute one step of the factorial and feed back to self.
    // When the computation is complete, output the result.
    (stream<int32 number, float64 factorial> Res; 
     stream<int32 number, int32 current, float64 factorial> Tmp as OutTmp)
       = Custom(Src; Tmp as InTmp) 
    {

      logic 
        onTuple Src : 
        { 
          if(number<=1) {
            tuple<Res> res = {
              number    = Src.number,
              factorial = 1.0 };
            submit(res, Res);
          } else {
            tuple<InTmp> tmp = {
              number    = Src.number,
              current   = Src.number-1,
              factorial = (float64)Src.number };
            submit(tmp, OutTmp);
          }
        } 
        onTuple InTmp : 
        {
          if(current==1) {
            tuple<Res> res = {
              number    = InTmp.number,
              factorial = InTmp.factorial };
            submit(res, Res);
          } else {
            InTmp.factorial *= (float64)InTmp.current;
            InTmp.current--;
            submit(InTmp, OutTmp);  
          }
        }
    }

    () as Writer = FileSink(Res) 
    {
      param file : "Results.txt";
    }
}
