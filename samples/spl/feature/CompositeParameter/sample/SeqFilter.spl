// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2010, 2013     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

namespace sample;

/** 
The `SeqFilter` composite demonstrates how parameters are defined by, and used within, a composite operator.

`SeqFilter` is a pre-configured wrapper around an `spl.relational::Functor` operator.  Parameters passed into `SeqFilter`
are used to set the configuration of the wrapped `Functor`.
@input I A generic stream of values of any type
@output O Stream of the values from the input stream with sequence numbers attached, and (optionally) filtered
@param seq The name of the attribute in the output stream that will be assigned a sequence number by the operator.  
This parameter is required.
@param seqType The SPL type of the attribute named by the $seq parameter.  This parameter is required.
@param filter A boolean expression that will be used to filter incoming tuples; tuples for which the expression is 
false will be discarded. This parameter is optional; if unspecified, no filtering will be performed.
 */
composite SeqFilter (input I; output O) 
{
   param	   
     attribute $seq;  // output attribute to assign   
     type $seqType; // type of the output attribute
     expression<boolean> $filter : true; 
   type    
     OutT = I, $seqType;	 
   graph	    
     stream<OutT> O = Functor(I)
     {
         logic        
             state : mutable uint64 cnt = 0;
             onTuple I  : cnt++; 
         param 
             filter: $filter;      
         output O : $seq = cnt;  
     }
} 
