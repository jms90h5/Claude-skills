// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2010, 2011     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace sample;

composite HostConstraint
{

  type 
    D = tuple<int32 a>;

  graph

   // Do we end up with the sheeps or with the wolves? 

   // Men and woman are to be co-located on the same host
   stream<D> Man1 = Beacon() { config placement: hostColocation("MW"); }
   stream<D> Woman1 = Beacon() { config placement: hostColocation("MW"); }

   // Bears need to be isolated in a host of their own
   stream<D> Bear1 = Beacon() { config placement: hostIsolation; }
   stream<D> Bear2 = Beacon() { config placement: hostIsolation; }

   // Sheeps cannot be located with the wolves on the same host
   stream<D> Sheep1 = Beacon() { config placement: hostExlocation("S1W1"),
                                                   hostExlocation("S1W2"),
                                                   hostExlocation("S1W3"); }
   stream<D> Sheep2 = Beacon() { config placement: hostExlocation("S2W1"),
                                                   hostExlocation("S2W2"),
                                                   hostExlocation("S2W3"); }

   // Wolves cannot be located with the sheeps on the same host
   stream<D> Wolf1 = Beacon() { config placement: hostExlocation("S1W1"),
                                                  hostExlocation("S2W1"); }
   stream<D> Wolf2 = Beacon() { config placement: hostExlocation("S1W2"),
                                                  hostExlocation("S2W2"); }
   stream<D> Wolf3 = Beacon() { config placement: hostExlocation("S1W3"),
                                                  hostExlocation("S2W3"); } 

  config
    defaultPoolSize : 4; 
}
