// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2010, 2012     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace sample;

<% # switch to Perl scripting mode
  # parse arguments, do error checking
  use integer;
  my $numLevels = $ARGV[0];
  unless(defined($numLevels) and $numLevels>0) {
    print STDERR "ERROR: Please specify the number ",
                 "of tree levels (a positive number).\n";
    exit 1;
  } 
%>

composite BinaryTree
{
  graph  
    stream<rstring data> Src = Beacon() 
    { 
      param iterations : 10u;
      output Src : data = (rstring)((int32) IterationCount() + 1);
    }

    // the root node
    stream<rstring data> Node_0_0 = Filter(Src) {}

    <% # create levels of the tree
      my @leaves; # collect leaf streams
      my $n = 1; # num. of nodes at a level
      for(my $i=1; $i<$numLevels; ++$i) {
        $n *= 2; # num. of nodes at this level
        for(my $j=0; $j<$n; ++$j) {
          my $p = ($i-1)."_".($j/2); # parent
          my $s = "${i}_${j}"; # self %>

          stream<rstring data> Node_<%=$s%>
               = Filter(Node_<%=$p%>){}

          <% # collect last level's streams
          push @leaves, "Node_${s}" 
              if($i==$numLevels-1);
        }
      }
      my $sinkStreams = join(",",@leaves);
    %>
   
    () as Writer = FileSink(<%=$sinkStreams%>) 
    {
      param file : "Results.txt";
    }
}
