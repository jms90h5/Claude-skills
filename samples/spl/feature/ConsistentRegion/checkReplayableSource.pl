#!/usr/bin/perl
# begin_generated_IBM_Teracloud_ApS_copyright_prolog               
#                                                                  
# This is an automatically generated copyright prolog.             
# After initializing,  DO NOT MODIFY OR MOVE                       
# **************************************************************** 
# THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
# TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
# EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
# COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
# AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
# OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
# RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
# OF THIS SAMPLE CODE.                                             
#                                                                  
# LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
# PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
# DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
# THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
# PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
# ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
#                                                                  
# (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2014, 2014     
# All Rights reserved.                                             
#                                                                  
# end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use strict;
use warnings;
use File::Copy;

# Checks the correctness of the "data/replayableSource.dat" file generated by 
# sample::ReplayableSource. The output tuple has a single attribute. When the output is 
# numerically sorted and the application has reset after PE failures, it must start at
# zero and have numbers increasing with increments of 1.
my $filename = "data/replayableSource.dat";
unless(-e $filename) {
  print "Error: File $filename does not exists.\n";
  exit(1);
}
# Sorting output file
my $copy = "data/replayableSource-copy.dat";
copy($filename, $copy) or die "Copy of file $filename failed: $!";
my $sorted = "data/replayableSource-sorted.dat";
system("sort -n $copy > $sorted");
unlink($copy);

open FILE, "<", $sorted
  or die "Cannot open application output file $sorted: $!";

# Expected value of the first attribute. 
my $expectedValue = 0; 

while (my $line = <FILE>) {
  my @fields = split(/\n/, $line);
  my $size = @fields;
  if ($size != 1) {
    next;
  }
  if ($expectedValue != $fields[0]) {
    print "Error on attribute 0: expected $expectedValue and got $fields[0]. Line: $line\n";
    exit(1);
  } 
  $expectedValue++;
}
unlink($sorted);
print "SUCCESS\n";
