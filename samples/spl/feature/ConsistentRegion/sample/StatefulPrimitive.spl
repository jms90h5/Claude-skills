// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2014, 2016     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace sample;

// This example illustrates the use of a operator driven @consistent
// region. It also shows the use of a primitive C++ operator that counts
// the number of processed tuples. This operator checkpoints and rollbacks 
// its state when there is a drain or a reset of the region.
composite StatefulPrimitive {
  graph
    // Instantiation of the JobControlPlane operator. This operator
    // hosts the ConsistentRegionMXBean responsible for managing
    // a consistent region.
    () as JCP = JobControlPlane() {}

    // Beacon is the start operator of an operator driven region. 
    // The Beacon is configured to drain the region at every 
    // 500 tuples.
    @consistent(trigger=operatorDriven, drainTimeout=30.0, resetTimeout=30.0)
    stream<uint64 itCount> Beat = Beacon() {
      param
        triggerCount: 500u;
        period: 0.01;      
      output Beat: itCount = IterationCount();
    }

    stream<uint64 itCount> Even = Functor(Beat) {
      param
        filter: itCount % 2lu == 0lu;
    }

    // Counts the number of processed tuples and output its current value in 
    // numTuples. This C++ primitive operator implements the StateHandler  
    // interface with checkpoint and reset routines.
    stream<uint64 itCount, uint32 numTuples> NumTuples = TupleCounter(Even) {
    }

    // FileSink operator writes StateHandler callbacks to its output. It also truncates 
    // the output file on a reset to the position of the last successful
    // drain. The output file should have a single entry for each tuple produced
    // by the Beacon operator.
    () as RegionSink = FileSink(NumTuples) {
      param
        file: "statefulPrimitive.dat";
        writePunctuations: true;
        truncateOnReset: true;
        writeStateHandlerCallbacks: true;
    }

  config
    restartable: true;
    tracing: trace;
}
