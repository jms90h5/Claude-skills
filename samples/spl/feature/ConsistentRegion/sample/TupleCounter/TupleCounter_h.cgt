/* Additional includes go here */
#include <string>
#include <sstream>
#include "stdio.h"

using namespace std;
<%
   my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
   my @includes;
   if ($isInConsistentRegion) {
       push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
   }
   SPL::CodeGen::headerPrologue($model, \@includes);
%>

class MY_OPERATOR : public MY_BASE_OPERATOR
<%if ($isInConsistentRegion) {%>
    , StateHandler
<%}%>
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

  // Notify port readiness
  void allPortsReady(); 

  // Notify pending shutdown
  void prepareToShutdown(); 

  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  <%if ($isInConsistentRegion) {%>
      // Implements checkpointing callbacks to persist and restore
      // operator state
      virtual void checkpoint(Checkpoint & ckpt);
      virtual void reset(Checkpoint & ckpt);
      virtual void resetToInitialState();
  <%}%>
private:
  uint32_t numTuples_;
  Mutex mutex_;
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

