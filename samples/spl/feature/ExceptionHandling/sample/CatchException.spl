// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2015, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace sample;

composite CatchException {
  graph
    stream<int32 a, rstring b> Beat = Beacon() {
      param
        iterations: 20;
      output Beat: a = (int32) IterationCount(), b = (rstring) IterationCount(); 
    }

    stream<Beat> WithInvalidString = Custom(Beat) {
      logic
        onTuple Beat: {
          if (a == 5) {
            // When processing the 6th tuple, submit a tuple
            // with a string that is not a valid number.
            // This forces the integer casting in the downstream
            // Functor to fail.  
            submit({a = a, b = "NotANumber"}, WithInvalidString);
          } else {
            submit(Beat, WithInvalidString);
          }
        }
    }

    // Casting an invalid integer causes the operator to throw an
    // SPLRuntimeInvalidArgumentException. Streams exceptions are caught
    // by @catch when parameterized with streams, std, and all. With @catch,
    // the application will continue to run after processing tuples yielding
    // invalid casts. Without @catch, the application will terminate after
    // throwing the exception.
    @catch(exception=streams, stackTrace=false, tupleTrace=true)
    stream<int32 a, int32 b> OnlyIntegers = Functor(WithInvalidString) {
      output OnlyIntegers: b = (int32) b;
    }

    // Output file will contain all tuples, except the one with an invalid 
    // integer {a=5,b="NotANumber"}.
    () as Nil = FileSink(OnlyIntegers) {
      param
        file: "out.dat";
    }
}
