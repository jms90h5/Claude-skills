
package SampleCppOp_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '// begin_generated_IBM_Teracloud_ApS_copyright_prolog               ', "\n";
   print '//                                                                  ', "\n";
   print '// This is an automatically generated copyright prolog.             ', "\n";
   print '// After initializing,  DO NOT MODIFY OR MOVE                       ', "\n";
   print '// **************************************************************** ', "\n";
   print '// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                ', "\n";
   print '// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    ', "\n";
   print '// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   ', "\n";
   print '// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       ', "\n";
   print '// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   ', "\n";
   print '// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE     ', "\n";
   print '// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION   ', "\n";
   print '// OF THIS SAMPLE CODE.                                              ', "\n";
   print '//                                                                   ', "\n";
   print '// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY    ', "\n";
   print '// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL    ', "\n";
   print '// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM     ', "\n";
   print '// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST   ', "\n";
   print '// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA    ', "\n";
   print '// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                 ', "\n";
   print '//                                                                   ', "\n";
   print '// (C) Copyright Teracloud ApS 2024, 2024, IBM Corp. 2010, 2012     ', "\n";
   print '// All Rights reserved.                                             ', "\n";
   print '//                                                                  ', "\n";
   print '// end_generated_IBM_Teracloud_ApS_copyright_prolog                 ', "\n";
   print '/* Additional includes go here */', "\n";
   print "\n";
   SPL::CodeGenHelper::headerPrologueImpl($model,0,undef,28);
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '  // Constructor', "\n";
   print '  MY_OPERATOR();', "\n";
   print "\n";
   print '  // Destructor', "\n";
   print '  virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '  // Notify port readiness', "\n";
   print '  void allPortsReady(); ', "\n";
   print "\n";
   print '  // Notify termination', "\n";
   print '  void prepareToShutdown(); ', "\n";
   print "\n";
   print '  // Processing for source and threaded operators   ', "\n";
   print '  void process(uint32_t idx);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for mutating ports ', "\n";
   print '  void process(Tuple & tuple, uint32_t port);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for non-mutating ports', "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print "\n";
   print '  // Punctuation processing', "\n";
   print '  void process(Punctuation const & punct, uint32_t port);', "\n";
   print "\n";
   print 'private:', "\n";
   print '  // Members', "\n";
   print '}; ', "\n";
   print "\n";
   SPL::CodeGenHelper::headerEpilogueImpl($model, 0);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
