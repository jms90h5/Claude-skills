// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2010, 2013     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 


namespace sample.CommodityPurchasing;

/**
 * The `AutomatedBuyer` application monitors the overall scores of the
 * suppliers along with the current supply level. It makes the 
 * decision to buy more of the commodity if the overall score for 
 * a supplier is at an excellent level at a time when we can take
 * on more supply. It also makes a decision to buy from the top
 * supplier if supply levels are getting dangerously low.
 *
 * **Imported Streams**
 *
 * * `OptimalSupplier` - Identifies the top supplier at the current
 * time. When automated buy decisions are made, the this is the
 * supplier that we buy from.
 * * `CurrentStock` - Current supply level of the commodity. 
 * 
 * **Exported Streams**
 * 
 * `AutomatedPurchases` - When an automated buy decision is made, 
 * a tuple is generated to account for the purchase.
 */
composite AutomatedBuyer
{

graph


  //
  // Imported Streams
  //

  // Import the OptimalSupplier stream from the TopSupplier application
  stream <OptimalSupplierSchema> OptimalSupplier = Import() 
  { 
    param applicationName : "sample.CommodityPurchasing::TopSupplier";
          streamId : "OptimalSupplier";
  }

  // Import the CurrentStock stream from the SupplyAndPurchase application
  stream <SupplySchema> CurrentStock = Import() 
  { 
    param applicationName : "sample.CommodityPurchasing::SupplyAndPurchase";
          streamId : "CurrentStock";
  }



  // 
  // Operators for Automated Buying
  // 

  /************************************************************************************
  # Purpose:        Bring the two elements used in the automated buying decisions into
  #                 a single stream.
  #  
  # Input Streams:  There are two input streams:  1)  The stream that identifies the 
  #                 optimal supplier, which includes that supplier's overall rating.
  #                 2)  The stream containing the current supply level.
  #
  # Output Streams: A stream containing the top rating and the current supply, to be
  #                 used in decision-making steps downstream.
  ************************************************************************************/
  stream <int32 topSupplierRating, int32 currentSupply> TopSupplierAndCurrentSupply = Join(OptimalSupplier as L; CurrentStock as R) 
  {
    window
      L : sliding, count(1);
      R : sliding, count(1);

    output TopSupplierAndCurrentSupply : topSupplierRating = overallRating,
                                         currentSupply = stockAmount;
  }



  /************************************************************************************
  # Purpose:        Decide whether an automated buy should occur.
  #  
  # Input Streams:  The joined stream containing the top rating and the current supply.
  #
  # Output Streams: A boolean value indicating whether or not an automated buy should
  #                 occur.
  ************************************************************************************/
  stream <boolean buy> PurchaseOpportunity = Functor(TopSupplierAndCurrentSupply) 
  {
    logic  state: { 
             // Constants
             int32 HighSupplyThreshold = 47500;   // If our current supply is above this level, we should not buy more.
             int32 LowSupplyThreshold = 15000;    // If our current supply is below this level, we must buy more.
             int32 ExcellentRating = 700;         // An excellent overall rating

             // Variables
             mutable boolean buyDecision = false;
             mutable int64 lastBuyTime = 0; 
           }
           onTuple TopSupplierAndCurrentSupply: {
             mutable int64 currentTime = 0;
             mutable int64 timeSinceBuy = 0;
             buyDecision = false;

             // Test for the high quality case.  If we can buy from a
             // supplier with a very high weather score without creating
             // too much supply, then we should buy.
             if (currentSupply < HighSupplyThreshold) {
               if (topSupplierRating > ExcellentRating) {
                 buyDecision = true;
               }
             }

             // Test for the low supply case.  If the supply is too low,
             // we must buy, regardless of the rating.
             if (currentSupply < LowSupplyThreshold) {
               buyDecision = true;
             }

             // Make sure that some time has elapsed since the last 
             // automated purchase, so that supply levels, ratings,
             // etc. have a chance to adjust to that purchase.
             if (buyDecision) {
               currentTime = getSeconds(getTimestamp());
               timeSinceBuy = currentTime - lastBuyTime;
               if (timeSinceBuy < 60l) {
                 buyDecision = false;
               }
               else {
                 lastBuyTime = currentTime;
               }
             }
           }
    output PurchaseOpportunity : buy = buyDecision;
  }



  /************************************************************************************
  # Purpose:        Generate a purchase transaction tuple when an automated buy is 
  #                 desired.
  #  
  # Input Streams:  The boolean value indicating whether or not this is a time to buy.
  #                 This functor's filter condition only accepts tuples where the buy
  #                 boolean is true.
  #
  # Output Streams: A purchase transaction.
  ************************************************************************************/
  stream <SupplyChangeSchema> AutomatedPurchases = Functor(PurchaseOpportunity) {
    param filter : buy == true;

    output AutomatedPurchases : stockDelta = 2500w, 
                                timeSeconds = getSeconds(getTimestamp());
  }     



  /************************************************************************************
  # Purpose:        Export the stream of purchase tranaction tuples.
  #  
  # Input Streams:  Stream containing the purchase transactions to be exported.
  #
  ************************************************************************************/
  () as AutomatedPurchaseExport = Export(AutomatedPurchases) 
  {  
    param streamId : "AutomatedPurchases";
  }


config placement : partitionColocation("same"); // place all operators into one PE
}
