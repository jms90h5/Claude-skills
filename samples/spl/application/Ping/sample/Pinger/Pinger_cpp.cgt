// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE     
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION   
// OF THIS SAMPLE CODE.                                              
//                                                                   
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY    
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL    
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM     
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST   
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA    
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                 
//                                                                   
// (C) Copyright Teracloud ApS 2024, 2024, IBM Corp. 2009, 2012     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
#pragma SPL_NON_GENERIC_OPERATOR_IMPLEMENTATION_PROLOGUE

#include <cstdio>

using namespace std;

static string getPingResult(string const & host);

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    IPort0Type const & ituple = static_cast<IPort0Type const&>(tuple);
    OPort0Type otuple;
    otuple.assignFrom(ituple, false);
    otuple.get_ping() = getPingResult(ituple.get_host()); 
    submit(otuple, 0);
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    if(punct==Punctuation::WindowMarker)
        submit(punct, 0);
}

string getPingResult(string const & host)
{
    FILE * fp = popen(("/bin/ping -c 3 " + host).c_str(), "r");
    if (fp == NULL) {
        SPLAPPTRC(L_ERROR, "Failed opening pipe.", "pinger");
        return "";
    }

    string result;
    char buffer[1024];
    while(fgets(buffer, sizeof(buffer), fp))
        result += buffer;               

    pclose(fp);
    return result;
}

#pragma SPL_NON_GENERIC_OPERATOR_IMPLEMENTATION_EPILOGUE
