// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2009, 2013     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

/** 
The Ping sample demonstrates how a primitive type-specific operator can perform Linux system-level functions, such as pinging arbitrary hosts.

You can modify this sample to create new applications.  Here are some things you might want to experiment with:
* Re-configure the `Beacon` operator so it submits more than one tuple, each tuple having a different host name.
* Change the primitive `Pinger` operator so it executes a different command than ping, for example, listing the 
contents of a specified directory.
*/
                               
namespace sample;

/** Pings the host specified by the host submission time parameter.

1. An `spl.utility::Beacon` operator produces a single tuple containing the host name to be pinged.  
This host name is specified as a submission-time value; that is, it is supplied at the time the Streams 
job is submitted to run the Ping application.
2. A type-specific primitive operator, `sample::Pinger`, takes the host name specified in the tuple 
produced by its upstream `Beacon` operator and runs the command `ping -c 3 <hostname>`. The results 
of the ping are placed in the output tuple.
3. An `spl.utility::Custom` operator writes the ping results to the console via stdout.
@param host An expression of type `rstring` that specifies the name of the host to be pinged.
 */
composite Ping
{
param
  expression<rstring> $host : getSubmissionTimeValue("host");

graph

  // Produces a single tuple containing a host name specified by the submission time parameter.
  stream<rstring host> Host = Beacon()
  {
      param iterations : 1u;
      output Host: host = $host;
  }

  // Invoke primitive operator that pings host specified in input tuple.
  stream<rstring host, rstring ping> Result = Pinger(Host) {}

  // Output results of ping command to the console.
  () as Writer = Custom(Result)
  {
    logic
      onTuple Result :
          printStringLn(ping);
  }
}
