// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2015, 2016     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace com.teracloud.streams.cep.sample ;

use com.teracloud.streams.cep::MatchRegex ;

/**
 * In this sample, data.txt context a series of floating point numbers that represent
 * a sine wave.  
 * 
 * We use the MatchRegex operator to detect the peak of the sine wave.  A peak is detected
 * by looking for the event sequence where the input numbers increase twice in a row and then decrease
 * twice in a row.    
 */
composite CepSampleMain
{
	graph
		(stream<float32 data> TestData)  = FileSource()
		{
			param
				file : "sineData.txt";
//				file : "simpleData.txt";
		}

		// complex event detection of two rises and two drops from the input data
		(stream<float32 data, float32 max, float32 min, int32 count> ComplexEvtStream) =
			MatchRegex(TestData)
		{
			param
				pattern : ". rise rise drop drop";
				predicates : {rise = data > Last(data), drop = data < Last(data)} ;
			output
				ComplexEvtStream: max = Max(data), min = Min(data), count=Count(); 				
		}

		() as FileSink_3 = FileSink(ComplexEvtStream)
		{
			param
				file : "result.exp" ;
				flush : 1u ;
		}

}

