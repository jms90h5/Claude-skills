// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2015, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace com.teracloud.streams.geospatial.sample.geofence ;

use com.teracloud.streams.geospatial::* ;

/**This application demonstrates the basic use of the GeoFence operator.
 * The entity stream  is data from a cell phone in GPX format, 
 * There fence stream is from a file, with fences defined in the Toronto, Ontario area.
 * The GPX data is in input/gpxData.xml, and the fences are defined in data/input/fences.csv in this project,
 * In this example, the XMLParse operator is used to extract the longitude and latitude from the file.
 * The output, for each fence that a point belongs to, is the fence id, and the point that matched.
 * */
composite GeofenceDemo
{
	param 
		expression<rstring> $resultDir : getSubmissionTimeValue("resultFileDirectory", "results");

	type
		Point = rstring id, float64 longitude, float64 latitude;
		FenceData = rstring fenceId, int32 fenceUpdateAction, rstring fencePolygon ;
		MatchedFences = tuple<list<rstring> fences, list<rstring> fencesEntered,
			list<rstring> fencesExited> ;
	graph
		stream<rstring string> Input = FileSource()
		{
			param
				file : getApplicationDir() + "/data/input/gpxData.xml" ;
				initDelay : 1.0 ;
				format : line ;
		}

		stream<Point> QueryStream = XMLParse(Input)
		{
			param
				trigger : "/gpx/trk/trkseg/trkpt" ;
				parsing : permissive ; // log and ignore errors
				ignoreNamespaces : true ;
			output
				QueryStream : id = "Joe", latitude =(float64) XPath("@lat"),
					longitude =(float64) XPath("@lon") ;
		}

		//input defining fences
		stream<FenceData> PolygonStream = FileSource()
		{
			param
				file : getApplicationDir() + "/data/input/fences.csv" ;
				format : csv ;
		}

		stream<tuple<Point, MatchedFences>> MatchedFenceStream =
			Geofence(QueryStream ; PolygonStream)
		{
			param
				outputMode : events ; 
				//a value of events for this parameter is used to produce entry and exit events for each fence

			output
				MatchedFenceStream : fences = CurrentFences(), fencesEntered =
					FencesEntered(), fencesExited = FencesExited() ;
		}

		// print results to log
		() as Printer = Custom(MatchedFenceStream as I)
		{
			logic
			onTuple I :
			{
				println(I);
			}
		}

		// print results to file
		() as MatchedFenceSink = FileSink(MatchedFenceStream)
		{
			param
				file : $resultDir + "/triggeredFences.txt" ;
				format : csv ;
		}

}
