// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2015, 2021     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace com.teracloud.streams.geospatial.sample;


use com.teracloud.streams.inet.rest::HTTPTupleView ;


type MARKER_TYPE = enum { GREEN, YELLOW, RED } ;

// updateAction : 0 to remove, 1 to add / update
type MapViewerT = rstring id, rstring wkt, uint32 updateAction, rstring note, MARKER_TYPE markerType ;


public composite MapViewer(input stream<MapViewerT> In0 )
{
	param
		
		expression $windowSize : 10 ;
		
		
	graph
		
		() as data = HTTPTupleView(In0 as inPort0Alias)
		{
			window
				inPort0Alias :			sliding, count($windowSize), count(1), partitioned ;
		
			param
				contextResourceBase :	getThisToolkitDir() + "/etc" ;
				context :				"map" ;
				partitionKey :			"id" ;
		
			config
				placement :				partitionColocation("mapviewer") ;
				
		}

}



