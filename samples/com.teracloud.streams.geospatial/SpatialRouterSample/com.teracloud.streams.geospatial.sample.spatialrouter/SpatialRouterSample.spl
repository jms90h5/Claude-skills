// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2015, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace com.teracloud.streams.geospatial.sample.spatialrouter;
use com.teracloud.streams.geospatial::SpatialRouter;
/***
 * 
 * This demonstrates the behaviour of the SpatialRouter operator.
 * The input is a set of points in and around New York city and in London.
 * Three output ports are defined.
 */
composite SpatialRouterSample {

type DataType = rstring geometry;


	graph 
		
		stream<DataType> istream = FileSource()
		{
			param
				file : "input/pointsToRoute.csv" ;
				format : csv ;
		}

		(stream<DataType> ostream1 ; stream<DataType> ostream2 ; stream <DataType> ostream3) =
			SpatialRouter(istream)
		{
			param
				geohashBitDepth : 20u;
				precision : 5.0 ;
				
		}

		() as Output1 = FileSink(ostream1)
		{
			param
				file : "results/splitPoints1.csv" ;
				format : csv ;
		}

		() as Output2 = FileSink(ostream2)
		{
			param
				file : "results/splitPoints2.csv" ;
				format : csv ;
		}
		() as Output3 = FileSink(ostream3)
		{
			param
				file : "results/splitPoints3.csv" ;
				format : csv ;
		}
}
