// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
/* Copyright (C) 2015, International Business Machines Corporation  */
/* All Rights Reserved                                	            */

namespace com.teracloud.streams.geospatial.sample.geofence;

/** Generate a random latitude value. 
 * @param min must be greater than or equal to -90.0
 * @param max must be less than or equal to 90.0
 */
public stateful float64 randomLatitude(float64 min, float64 max)
{
	float64 minLatitude = min ;
	float64 range = max-min ;
	float64 randomNum = random() ;
	return minLatitude +(randomNum * range) ;
}

/** Generate a random longitude value. 
 * @param min must be greater than or equal to -180.0
 * @param max must be less than or equal to 180.0
 */
public stateful float64 randomLongitude(float64 min, float64 max)
{
	float64 minLongitude = min ;
	float64 range = max-min ;
	float64 randomNum = random() ;
	return minLongitude +(randomNum * range) ;
}

/** Generate a random entity id 
 * @param minId minimum value of the id to generatel
 * @param numEntities possible number of entities
 */
public stateful rstring randomId(int32 minId, int32 numEntities)
{
	float64 randomNum = random() ;
	int32 range = numEntities ;
	
	rstring id = (rstring)((int32)((float64)minId + (randomNum * (float64)range))) ;
	return id;
}

/** Generate a random polygon, in the shape of a rectangle
 * 
 */
public stateful rstring randomPolygon()
{
	float64 pt1Lat = randomLatitude(-90.0, 90.0) ;
	float64 pt1Long = randomLongitude(-180.0, 180.0) ;
	
	float64 widthRange = pt1Lat + 90f ;
	float64 widthRandomNum = random() ;
	float64 width = widthRange * widthRandomNum ;
	
	float64 heightRange = 180.0 - pt1Long ;
	float64 heightRandomNum = random() ;
	float64 height = heightRange * heightRandomNum ;
	
	float64 pt2Lat = pt1Lat - width ;
	float64 pt2Long = pt1Long ;
	
	float64 pt3Lat = pt1Lat - width ;
	float64 pt3Long = pt1Long + height ;
	
	float64 pt4Lat = pt1Lat ;
	float64 pt4Long = pt1Long + height ;
	
	mutable rstring polyInput =(rstring) pt1Lat + "," ;
	polyInput +=(rstring) pt1Long + "," ;
	polyInput +=(rstring) pt2Lat + "," ;
	polyInput +=(rstring) pt2Long + "," ;
	polyInput +=(rstring) pt3Lat + "," ;
	polyInput +=(rstring) pt3Long + "," ;
	polyInput +=(rstring) pt4Lat + "," ;
	polyInput +=(rstring) pt4Long ;
	
	rstring polygonWkt = com.teracloud.streams.geospatial.ext::polygon(polyInput) ;
	return polygonWkt ;
}
