// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS. IBM MAKES NO   
// REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, CONCERNING    
// USE OF THE SAMPLE CODE, OR THE COMPLETENESS OR ACCURACY OF THE   
// SAMPLE CODE. IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE    
// OPERATION OF THIS SAMPLE CODE. IBM IS NOT RESPONSIBLE FOR THE    
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright IBM Corp. 2016  All Rights reserved.         
//                                                                  
// end_generated_IBM_copyright_prolog             
/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
	uint64 err = 0;
	//we're going to create a new store for the transactions
	//The store will have pairs of ids and amounts
		// Pass a dummy key and dummy value as  arguments to the createStore function
	rstring dummyRstring = "";
	float64 dummyAmount = 0.0;
	//we will have the same store id for the lifetime of the operator so we cache it on initialization
	 _storeId = dpsCreateOrGetStore("Transactions", dummyRstring, dummyAmount, err);
	//    
	if (_storeId == 0) {
		cout << "Unable to get the store id for Transactions store:" << dpsGetLastStoreErrorString() << endl;
		SPL::Functions::Utility::abort("Transactions_cpp.cgt", 18);
	}
	err  = 0;
	if (dpsSize(_storeId, err) > 0) {
		cout << "Store already has contents, clearing.."<<endl;
		dpsClear(_storeId, err);
	}
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    // Notifies that all ports are ready. No tuples should be submitted before
    // this. Source operators can use this method to spawn threads.

    /*
      createThreads(1); // Create source thread
    */
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    // A typical implementation will loop until shutdown
    /*
      while(!getPE().getShutdownRequested()) {
          // do work ...
      }
    */
}

// Tuple processing for mutating ports 
// Add a new transaction to the store 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
	//get the values to insert from the tuple
	ValueHandle idHandle = tuple.getAttributeValue("id");
	ValueHandle amountHandle = tuple.getAttributeValue("amount");
	float64 & amount = amountHandle;
	rstring & id = idHandle;
	uint64  err = 0;
   	bool res = dpsPut(_storeId, id, amount, err);

    if (res == false) {
    	cout << "Unable to insert transaction " << id << " into the store" << endl;
    		SPL::Functions::Utility::abort("Transactions_cpp.cgt", 69);    	
    	} 
    	  
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    
      if(punct==Punctuation::WindowMarker) {
    	  //We received a punctuation from our input source so we are going to submit the name
    	  //of the store. This is just for demonstration purposes so that the downstream operator
    	  //can lookup the store and read from it.
    	  OPort0Type otuple;
    	   ValueHandle handle2 = otuple.getAttributeValue("storeName");
    	    rstring & storeName = handle2;
    	    		// Set the attribute to the name of the store
    	    storeName = "Transactions";
    	    submit(otuple, 0); // submit to output port 0
      } else if(punct==Punctuation::FinalMarker) {
        // ...;
      }
    
}

<%SPL::CodeGen::implementationEpilogue($model);%>

