/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.teracloud.streams.network.ipv4::*;
use com.teracloud.streams.network.source::*;
use com.teracloud.streams.network.parse::*;

composite TestNetflowMessageParserAnalysis {

    param
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/data/sample_netflow9_new.pcap" );

    type

    PacketType =
      int64 captureTime,    // time that packet was captured, relative to Unix epoch, in milliseconds, accurate to microseconds
      uint32 netflowSource, // IP source address of Netflow message
      blob netflowMessage;  // the Netflow message from a packet, excluding all network headers

    netflow_t =
      int64 endTime,        // time that flow ended, relative to Unix epoch, in milliseconds, according to capturing machine's clock
      int64 startTime,      // time that flow started, relative to Unix epoch, in milliseconds, according to capturing machine's clock
      uint8  protocol,      // IP protocol number of flow, usually 1 for "icmp", 6 for "tcp", or 17 for "udp"
      uint32 srcAddress,    // IPv4 address of source of flow
      uint16 srcPort,       // UDP/TCP port of source of flow
      uint32 dstAddress,    // IPv4 address of destination of flow
      uint16 dstPort,       // UDP/TCP port of destination of flow
      uint64 packetCount,   // count of packets in flow
      uint64 byteCount;     // count of bytes in flow

    graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
        param
            pcapFilename: $pcapFilename;
            inputFilter: "udp port 2055";
            metricsInterval: 0.0;
        output Out:
            captureTime = (int64)CAPTURE_SECONDS() * 1000l + (int64)CAPTURE_MICROSECONDS() / 1000l,
            netflowSource = IPV4_SRC_ADDRESS(),
            netflowMessage = PAYLOAD_DATA();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestNetflowMessageParserAnalysis.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    stream<netflow_t> NetflowMessageStream as Out = NetflowMessageParser(PacketStream) {
      param
          messageAttribute: netflowMessage;
          sourceAttribute: netflowSource;
          outputFilters: !parseError();
      output Out:
          endTime = captureTime - ( (int64)NETFLOW_SYSTEM_UPTIME() - (int64)NETFLOW_LAST_SWITCHED() ),
          startTime = captureTime - ( (int64)NETFLOW_SYSTEM_UPTIME() - (int64)NETFLOW_FIRST_SWITCHED() ),
          protocol = NETFLOW_PROTOCOL(),
          srcAddress = NETFLOW_IPV4_SRC_ADDR(),
          srcPort = NETFLOW_SRC_PORT(),
          dstAddress = NETFLOW_IPV4_DST_ADDR(),
          dstPort = NETFLOW_DST_PORT(),
          byteCount = NETFLOW_IN_BYTES(),
          packetCount = NETFLOW_IN_PKTS();
    }
    () as NetflowMessageSink = FileSink(NetflowMessageStream) { param file: "debug.TestNetflowMessageParserAnalysis.NetflowMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }


}
