/*
** Copyright (C) 2016  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.teracloud.streams.network.ipv4::*;
use com.teracloud.streams.network.ipv6::*;
use com.teracloud.streams.network.dns::*;
//use spl.file::*;



composite LiveDNSPacketDPDKSourceFilter {

    param
    expression<int32> $nicPort: (int32)getSubmissionTimeValue("nicPort", "0" );
    expression<int32> $nicQueue: (int32)getSubmissionTimeValue("nicQueue", "0" );
    expression<float64> $metricsInterval: (float64)getSubmissionTimeValue("metricsInterval", "1.0" );
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "10.0" );

    type

    DNSMessageType =
        uint64 packetNumber,            // sequence number of packet
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch
        uint32 ipv4ServerAddress,       // IPv4 address of DNS server
        boolean isResponse,
        uint8 opCode,
        uint8 responseCode,
        rstring questionName,
        uint16 questionType,
        list<rstring> answerNames,
        list<uint16> answerTypes,
        list<rstring> nameserverNames,
        list<rstring> additionalNames,
        list<rstring> additionalData;

    DNSErrorType =
      uint64 packetNumber,
      float64 captureTime, 
      int32 errorCode,
      rstring errorDescription,
      int32 incompatibleFlags,
      blob dnsMessage;

    FlattenedDNSMessageType = 
        float64 captureTime,
        rstring flattenedDNSMessage;

    MetricsType =
        float64 metricsTime,            // time that metrics were produced, in seconds since Unix epoch
        boolean metricsUpdated,         // true if metrics have been updated since previous output tuple
        uint64 packetNumber,            // sequence number of packet, as emitted by operator
        uint64 packetsReceived,         // number of packets received by network interface in this interval
        uint64 packetsDropped,          // number of packets dropped in this interval
        uint64 packetsProcessed,        // number of packets emitted by operator in this interval
        uint64 bytesProcessed,          // number of bytes emitted by operator in this interval
        float64 intervalElapsed,        // elapsed time since last metrics interval, in seconds
        uint64 intervalPacketsReceived, // number of packets received since last metrics interval
        uint64 intervalPacketsDropped,  // number of packets dropped since last metrics interval
        uint64 intervalPacketsProcessed,// number of packets processed since last metrics interval
        uint64 intervalBytesProcessed;  // number of bytes processed since last metrics interval

    graph

      // Ingest DNS packets from ethernet adapter, produce tuples for cyber-security
      // analytics, and 'flattened' representations of DNS resource records for
      // output to files.

    ( stream<DNSMessageType> DNSMessageStream ; 
      stream<FlattenedDNSMessageType> FlattenedDNSQuestionStream ;
      stream<FlattenedDNSMessageType> FlattenedDNSNormalResponseStream ;
      stream<FlattenedDNSMessageType> FlattenedDNSErrorResponseStream ;
      stream<FlattenedDNSMessageType> FlattenedDNSMalformedStream ;
      stream<FlattenedDNSMessageType> FlattenedDNSIncompatibleFlagsStream ;
      stream<DNSErrorType> DNSErrorStream ;
      stream<MetricsType> MetricsStream ) = DNSPacketDPDKSource() {
        param
            lcoreMaster: 0; // run the master thread on core 0.
            lcore: 1; // run this ingest thread on core 1.
            nicPort: $nicPort; // bind to specified NIC port
            nicQueue: $nicQueue; // bind to specified NIC queue
            promiscuous: true;
            outputFilters: !parseError(), // selects messages for DNSMessageStream
                           !parseError() && !DNS_RESPONSE_FLAG(), // selects messages for FlattenedDNSQuestionStream
                           !parseError() && DNS_RESPONSE_FLAG() && DNS_RESPONSE_CODE()==0ub, // selects messages for FlattenedDNSNormalResponseStream
                           !parseError() && DNS_RESPONSE_FLAG() && DNS_RESPONSE_CODE()!=0ub, // selects messages for FlattenedDNSErrorResponseStream
                           parseErrorCode()!=0, // selects messages for FlattenedDNSMalformedStream
                           DNS_INCOMPATIBLE_FLAGS()!=0, // selects messages for FlattenedDNSIncompatibleStream
                           parseErrorCode()!=0 || DNS_INCOMPATIBLE_FLAGS()!=0, // selects messages for DNSMalformedStream
                           metricsUpdated(); // selects messages for MetricsStream
            metricsInterval: $metricsInterval;
        output 
        DNSMessageStream:
          packetNumber = packetsProcessed(),
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          ipv4ServerAddress = DNS_RESPONSE_FLAG() ? IPV4_SRC_ADDRESS() : IPV4_DST_ADDRESS(), 
          isResponse = DNS_RESPONSE_FLAG(),
          opCode = DNS_OPCODE(),
          responseCode = DNS_RESPONSE_CODE(),
          questionName = DNS_QUESTION_NAME(),
          questionType = DNS_QUESTION_TYPE(),
          answerNames = DNS_ANSWER_NAMES(),
          answerTypes = DNS_ANSWER_TYPES(),
          nameserverNames = DNS_NAMESERVER_NAMES(),
          additionalNames = DNS_ADDITIONAL_NAMES(),
          additionalData = DNS_ADDITIONAL_DATA();
        FlattenedDNSQuestionStream:
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
        FlattenedDNSNormalResponseStream:
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
        FlattenedDNSErrorResponseStream:
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
        FlattenedDNSMalformedStream:
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
        FlattenedDNSIncompatibleFlagsStream:
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
        DNSErrorStream:
          packetNumber = packetsProcessed(),
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          errorCode = parseErrorCode(),
          errorDescription = parseErrorDescription(),
          incompatibleFlags = DNS_INCOMPATIBLE_FLAGS(),
          dnsMessage = PAYLOAD_DATA();
        MetricsStream:
            metricsTime = getTimestampInSecs(),
            metricsUpdated = metricsUpdated(),
            packetNumber = packetsProcessed() - 1ul,
            packetsReceived = packetsReceived(),
            packetsDropped = packetsDropped(),
            packetsProcessed = packetsProcessed(),
            bytesProcessed = bytesProcessed(),
            intervalElapsed = metricsIntervalElapsed(),
            intervalPacketsReceived = metricsIntervalPacketsReceived(),
            intervalPacketsDropped = metricsIntervalPacketsDropped(),
            intervalPacketsProcessed = metricsIntervalPacketsProcessed(),
            intervalBytesProcessed = metricsIntervalBytesProcessed();
    }



    // Write all streams to output files synchronously, on the ingest thread.

    //() as DNSMessageSink = FileSink(DNSMessageStream as In) { param file: "debug.LiveDNSPacketDPDKSourceFilter.DNSMessageStream.out"; format: txt; hasDelayField: true; }
    () as FlattenedDNSQuesstionSink = FileSink(FlattenedDNSQuestionStream as In) { param file: "debug.LiveDNSPacketDPDKSourceFilter.FlattenedDNSQuestionStream.out"; format: line; suppress: captureTime; }
    () as FlattenedDNSNormalResponseSink = FileSink(FlattenedDNSNormalResponseStream as In) { param file: "debug.LiveDNSPacketDPDKSourceFilter.FlattenedDNSNormalResponseStream.out"; format: line; suppress: captureTime; }
    () as FlattenedDNSErrorResponseSink = FileSink(FlattenedDNSErrorResponseStream as In) { param file: "debug.LiveDNSPacketDPDKSourceFilter.FlattenedDNSErrorResponseStream.out"; format: line; suppress: captureTime; }
    () as FlattenedDNSMalformedSink = FileSink(FlattenedDNSMalformedStream) { param file: "debug.TestDNSPacketDPDKSourceFilter.FlattenedDNSMalformedStream.out"; format: line; suppress: captureTime; }
    () as FlattenedDNSIncompatibleSink = FileSink(FlattenedDNSIncompatibleFlagsStream) { param file: "debug.TestDNSPacketDPDKSourceFilter.FlattenedDNSIncompatibleFlagsStream.out"; format: line; suppress: captureTime; }
    () as DNSErrorSink = FileSink(DNSErrorStream) { param file: "debug.TestDNSPacketDPDKSourceFilter.DNSErrorStream.out"; format: txt; hasDelayField: true; }
    () as MetricsSink = FileSink(MetricsStream as In) { param file: "debug.LiveDNSPacketDPDKSourceFilter.MetricsStream.out"; format: txt; hasDelayField: true; }

    // Shut down this application when timer expires.

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); log(Sys.info, "shutting down after " + (rstring)$timeoutInterval + " second timeout"); shutdownPE(); } }
}

