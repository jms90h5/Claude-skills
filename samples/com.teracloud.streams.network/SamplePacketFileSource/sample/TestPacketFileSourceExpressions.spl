/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.teracloud.streams.network.source::*;

composite TestPacketFileSourceExpressions {

    param
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/data/sample_dns+dhcp.pcap" );

    type

    PacketType =
        uint32 captureTimeAsSeconds,        // time that packet was captured, in seconds since Unix epoch
        uint64 captureTimeAsMilliseconds,   // time that packet was captured, in milliseconds since Unix epoch
        uint64 captureTimeAsMicroseconds,   // time that packet was captured, in microseconds since Unix epoch
        float64 captureTimeAsFloat,         // time that packet was captured, in seconds and fractional microseconds since Unix epoch
        timestamp captureTimeAsTimestamp,   // time that packet was captured, in seconds and nanoseconds since Unix epoch
        uint64 partitionKey,                // combination of addresses and ports, for downstream @parallel annotations
        int8 packetNumberModulo13,          // sequence number of packet modulo 13, as signed 8-bit integer
        int32 packetLength,                 // length of packet (not necessarily all captured)
        int32 packetCaptureLength,          // length of captured packet (possibly less than packetLength())
        int32 packetHeaderLength,           // length of network headers in packet
        int32 packetPayloadLength;          // length of payload following network headers

    graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
        param
            pcapFilename: $pcapFilename;
        output Out:
            captureTimeAsSeconds = CAPTURE_SECONDS(),
            captureTimeAsMilliseconds = (uint64)CAPTURE_SECONDS() * 1000ul + (uint64)CAPTURE_MICROSECONDS() / 1000ul,
            captureTimeAsMicroseconds = (uint64)CAPTURE_SECONDS() * 1000000ul + (uint64)CAPTURE_MICROSECONDS(),
            captureTimeAsFloat = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
            captureTimeAsTimestamp = createTimestamp( (int64)CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u ),
            partitionKey = hashCode(IPV4_SRC_ADDRESS()) + hashCode(IPV4_DST_ADDRESS()) + hashCode(IPV6_SRC_ADDRESS()) + hashCode(IPV6_DST_ADDRESS()) + hashCode(IP_SRC_PORT()) + hashCode(IP_DST_PORT()),
            packetNumberModulo13 = (int8)((packetsProcessed()-(uint64)1) % (uint64)13),
            packetLength = (int32)PACKET_LENGTH(),
            packetCaptureLength = size(PACKET_DATA()),
            packetHeaderLength = size(PACKET_DATA()) - (int32)PAYLOAD_LENGTH(),
            packetPayloadLength = (int32)PAYLOAD_LENGTH();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketFileSourceExpressions.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }

}
