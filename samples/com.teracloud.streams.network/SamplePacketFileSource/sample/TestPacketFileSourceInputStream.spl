/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.teracloud.streams.network.source::*;

composite TestPacketFileSourceInputStream {

    param
    expression<rstring> $pcapDirectory: getSubmissionTimeValue("pcapDirectory", "." /* default is data-directory */ );
    expression<uint32> $processorAffinity: (uint32)getSubmissionTimeValue("processorAffinity", "1" );
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "5.0" );

    type

    PacketType =
      uint64 packetNumber,      // sequence number of packet, as emitted by operator
      rstring filepath,         // implicitly copied from input tuple
      rstring filename,         // explicitly extracted from input tuple's 'filepath' attribute
      float64 captureTime,      // time that packet was captured, in seconds since Unix epoch
      uint32 packetLength,      // original length of packet (not necessarily all captured)
      blob packetData;          // contents of packet captured, including network headers (not necessarily complete)

    graph

    stream<rstring filepath> FilepathStream as Out = DirectoryScan() {
      param
          directory: $pcapDirectory;
          pattern: "\\.pcap$";
    output Out:
          filepath = FullPath(); }

    stream<PacketType> PacketStream as Out = PacketFileSource(FilepathStream) {
        param
            processorAffinity: $processorAffinity;
        output Out:
            packetNumber = packetsProcessed() - 1ul,
            filename = regexMatchPerl(filepath, "([^/]+)$")[0],
            captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
            packetLength = PACKET_LENGTH(),
            packetData = PACKET_DATA();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketFileSourceInputStream.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }
}
