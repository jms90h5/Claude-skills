// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2011, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace teda.sample.ASN1Parse.Metrics;

use com.teracloud.streams.teda.parser.binary::ASN1Parse;

/**
 * This sample extracts a list of employee records from ASN.1 files. Each decoded record is send
 * out as a separate tuple by the ASN1Parse operator and is stored in the text file 
 * data/records.txt by a FileSink operator.
 * 
 * In addition, the parser operator sends out metric tuples on a second output port on receipt of 
 * punctuations (after each file is processed). The metrics tuples are stored in the output file data/metrics.txt
 * This file contains one tuple for each file processed and one tuple generated by the final punctuation
 * (if the sample is used as standalone application).
 * Most of the values used in this sample are also available as operator metrics and can be observed via the
 * Streams console. 
 * 
 * Hints
 * 1) The ASN.1 grammar for this sample is stored in the file etc/grammar.asn
 * 2) The data directory contains three binary sample input files. The XML files which were used to create
 *    the binary input files are also stored in the data directory. 
 * 3) To recreate/change the input data, open a terminal and enter the commands :
 *    asn1-data-from-xml --grammar etc/grammar.asn --output data/input1.bin data/input1.xml
 *    asn1-data-from-xml --grammar etc/grammar.asn --output data/input2.bin data/input2.xml
 *    asn1-data-from-xml --grammar etc/grammar.asn --output data/input3.bin data/input3.xml
 *  
 */
composite Main {

	type

		/**
		 * The SPL data type which holds the entries of the employee list (see ASN.1 type Employee in the grammar)
		 */
		Employee = tuple
		<
			int64 id,
			rstring firstName,
			rstring lastName
		>;

		/**
		 * The metric tuple. The attributes will be filled by the parsers output assignment functions.
		 * For a short description of the values see the comments in the output section of the parser operator. 
		 * For a complete description of all metrics/output functions see the toolkit documentation.
		 */
		Metric = tuple
		<
			// the name of the input file
			rstring fileName,
			// Current
			uint64 nTuplesReceived,
			uint64 nBytesReceived,
			uint64 nRecordsDecoded,
			uint64 nBytesDecoded,
			uint64 nTuplesSent,
			uint64 nBytesDropped,
			// Totals
			uint64 nTuplesReceivedTotal,
			uint64 nBytesReceivedTotal,
			uint64 nRecordsDecodedTotal,
			uint64 nBytesDecodedTotal,
			uint64 nTuplesSentTotal,
			uint64 nBytesDroppedTotal,
			// Details
			map<rstring,map<rstring,uint64>> getRecordStats,
			list<rstring> getErrors,
			list<rstring> getWarnings
		>;
	
	graph
	
		/**
		 * Send the names of the input files to the Filesource operator
		 */
		stream<rstring fileName> FileNames as O = Custom()
		{
			logic
				onProcess :
				{
					submit( {fileName="input1.bin"} , O);
					submit( {fileName="input2.bin"} , O);
					submit( {fileName="input3.bin"} , O);					
				}
		}
		
		/**
		 * Read each input file in chunks of several bytes.
		 */
		stream<rstring fileName, blob payload> DataBlocks as O = FileSource(FileNames as I)
		{
			param
				format: block;
				blockSize: 128u;
			output O :
				fileName = FileName();
		}

		/**
		 * Decode the ASN.1 binary data stream.
		 */
		(
			stream<Employee> Records as O;
			stream<Metric> Metrics as M			
		) as ParsedRecords = ASN1Parse(DataBlocks as I) 
		{
			param
				payloadAttribute: payload;
				structureDocument: "etc/grammar.asn";
				pdu : "Company";
				trigger: "/employees";
				checkConstraints: true;
			output M:
				// the name of the input file, assigned from the fileName attribute, received in the last tuple before the punctuation 
				fileName = fromInput(),

				// number of tuples received since last punctuation
				nTuplesReceived = nTuplesReceived(),
				// number of bytes received in the payload blob, since last punctuation
				nBytesReceived = nBytesReceived(),
				// number of pdus and bytes decoded, since last punctuation
				nRecordsDecoded = nRecordsDecoded(),
				nBytesDecoded = nBytesDecoded(),
				// number of tuples sent due to detection of trigger types in the decoded data, since last punctuation
				nTuplesSent = nTuplesSent(),
				// number of bytes dropped due to decoding errors, since last punctuation
				nBytesDropped = nBytesDropped(),

				// Totals
				// the following values have the same meaning as the set above, but the counters are
				// since the start of the operator (not reseted at punctuation)
				nTuplesReceivedTotal = nTuplesReceivedTotal(),
				nBytesReceivedTotal = nBytesReceivedTotal(),
				nRecordsDecodedTotal = nRecordsDecodedTotal(),
				nBytesDecodedTotal = nBytesDecodedTotal(),
				nTuplesSentTotal = nTuplesSentTotal(),
				nBytesDroppedTotal = nBytesDroppedTotal(),

				// Number of trigger structures found in the decoded records
				getRecordStats = getRecordStats(),
				
				// lists of errors and warnings occured during processing
				getErrors = getErrors(),
				getWarnings = getWarnings();
		}

		/**
		 * Save the generated data tuples.
		 */
		() as DataSink = FileSink(Records)
		{
			param
				file: "records.txt";
				format: txt;
		}
		
		/**
		 * Save the generated metrics tuples.
		 */
		() as MetricsSink = FileSink(Metrics)
		{
			param
				file: "metrics.txt";
				format: txt;
		}

}
