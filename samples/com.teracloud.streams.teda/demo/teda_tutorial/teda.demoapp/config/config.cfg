
# ------------------------------------------------------------------------------
# global.applicationControlDirectory
#
# Specifies the path of the directory that is used by the applications to store
# and exchange status information. The same path must be used for the
# Lookup Manager application and its controlled ITE applications.
# 
# If the applications are running on multiple hosts, the directory must be
# located in a shared file system.
# 
# A relative path is relative to the `data` directory.
#
# Properties
#    Type: string
#    Cardinality: 1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any value matching the .+ regular expression
# ------------------------------------------------------------------------------
global.applicationControlDirectory=../../teda.lookupmgr/data/control

# ------------------------------------------------------------------------------
# global.multiHost (Default: off)
#
# Specifies whether the application bundle shall run on a single or multiple
# hosts. An application bundle can consist of a single ITE application or of
# a single Lookup Manager application with multiple ITE applications.
# 
# If you want to run the application bundle on multiple hosts, turn the parameter
# on. If you want to run the application bundle on a single host only, turn it
# off.
# 
# If the parameter is turned off, the child parameters are inactive.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: global.multiHost.customHostTags, global.multiHost.numberOfHosts
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# global.multiHost.customHostTags (Default: *empty list*)
#
# Specifies host tags that you want to use in your customized code
# to place operators on specific hosts.
# 
# The parameter is active only if the parent parameter is turned on.
#
# Properties
#    Type: string
#    Default: *empty list*
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of any value matching the \\w+ regular expression
#    Related Parameters:
#       Parent: global.multiHost
#       Other: global.multiHost.numberOfHosts
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.archive.inputFilesIntoDateDirectory (Default: off)
#
# Specifies whether the ITE application archives processed input files in a
# per-day directory or in a directory that receives all files.
# 
# If the parameter is `off`, the `archive` directory receives all files. The
# `archive` directory is relative to the data directory.
# 
# If the parameter is `on`, the ITE application creates a directory for every
# day that receives the processed input files for that day. The directory path
# is `archive/YYYYMMDD` with YYYY as year, MM as the month and DD as the day.
# The `archive/YYYYMMDD` directory is relative to the `data` directory.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group (Default: off)
#
# Specifies whether tuples are grouped.
# 
# If the parameter is `off`, the ITE application does not group tuples.
# 
# If the parameter is `on`, the ITE application groups tuples, and at least
# one of the built-in correlations must be enabled. This  means that either
# the tuple deduplication, the custom correlation, or both must be enabled.
# 
# **CAUTION:** If the checkpointing for the group logic is enabled, the ITE
# applications will regularly run internal maintenance tasks that pause the
# file processing for few seconds till several minutes.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------
ite.businessLogic.group=on

# ------------------------------------------------------------------------------
# ite.businessLogic.group.custom (Default: off)
#
# Specifies whether the ITE application groups tuples by using the
# custom correlation logic.
# 
# If you want to group tuples using your correlation logic, set
# this and the parent parameter to `on` and implement your correlation
# logic in the <namespace>.context.custom::ContextDataProcessor
# composite operator. You must also set the **ite.embeddedSampleCode**
# parameter to `off`, so the ITE application uses your implementation
# instead of the sample logic that is provided with the
# <namespace>.context.sample::ContextDataProcessor composite operator.
# 
# **CAUTION:** If the checkpointing for the group logic is enabled, the ITE
# applications will regularly run internal maintenance tasks that pause the
# file processing for few seconds till several minutes.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Children: ite.businessLogic.group.custom.checkpointing
#       Other: ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.embeddedSampleCode, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------
ite.businessLogic.group.custom=on

# ------------------------------------------------------------------------------
# ite.businessLogic.group.custom.checkpointing (Default: on)
#
# Specifies whether checkpoint files for the custom logic of group processing
# are stored. If this parameter is `off`, the state of the custom logic cannot
# be recovered if the application is restarted. For example, if your custom
# logic aggregates data across file boundaries, data that has been collected
# is lost.
# 
# Committed checkpoint files are named `custom/<groupId>/committed/<input-filename>.bin`
# and are located in the output directory that is specified in the
# **ite.checkpointing.directory** parameter.
# 
# **CAUTION:** If the checkpointing for the group logic is enabled, the ITE
# applications will regularly run internal maintenance tasks that pause the
# file processing for few seconds till several minutes.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group.custom
#       Children: ite.businessLogic.group.custom.timeToKeep
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.custom.timeToKeep (Default: "1d")
#
# Specifies the time after which tuples are removed from the stateful
# custom group.
# 
# This parameter is active only if the parent and the **ite.businessLogic.group.custom.checkpointing**
# parameters are set to `on`.
#
# Properties
#    Type: string
#    Default: "1d"
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the (\\d+d)?\\s*(\\d+h)?\\s*(\\d+m)? regular expression
#    Related Parameters:
#       Parent: ite.businessLogic.group.custom.checkpointing
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.debug (Default: off)
#
# Enables additional file outputs that troubleshoot your ITE application.
# The files are located in the `debug` directory, which is a subdirectory
# of the configured `data` directory.
# 
# When this parameter is `on`, you receive information about the commands
# and data that are processed in the group logic.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication (Default: on)
#
# Specifies whether the ITE application groups tuples according to the
# built-in deduplication logic.
# 
# To enable the tuple deduplication, set this and the parent parameter
# to `on`.
# 
# **CAUTION:** If the checkpointing for the group logic is enabled, the ITE
# applications will regularly run internal maintenance tasks that pause the
# file processing for few seconds till several minutes.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Children: ite.businessLogic.group.deduplication.checkpointing, ite.businessLogic.group.deduplication.probability
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.checkpointing (Default: on)
#
# Specifies whether to store checkpoint files for the deduplication of the group
# processing. If this parameter is `off`, the state of the deduplication
# cannot be recovered if the  application is restarted. For example, unique
# tuples are not restored in the deduplication logic anymore, so duplicate tuples
# would be detected as unique tuples.
# 
# The committed checkpoint files are named `<groupId>/committed/<input-filename>.chk`
# and are located in the output directory that is specified in the
# **ite.checkpointing.directory** parameter.
# 
# **CAUTION:** If the checkpointing for the group logic is enabled, the ITE
# applications will regularly run internal maintenance tasks that pause the
# file processing for few seconds till several minutes.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group.deduplication
#       Children: ite.businessLogic.group.deduplication.timeToKeep
#       Other: ite.businessLogic.group.deduplication.probability
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.partitioning (Default: off)
#
# Specifies whether the de-duplication uses partitioning to automatically evict
# too old data.To use partitioning, turn this parameter on. If this parameter is
# turned on, the **ite.businessLogic.group.deduplication.probability** 
# parameter and the number of expected unique items that are specified for each 
# group in the group configuration file
# (**ite.ingest.loadDistribution.groupConfigFile** parameter) are valid per
# each partition. For example, the user specifies in the group configuration file 
# that he wants the de-duplication to cope with 1000 entries. Each partition is 
# able to cope with 1000 entries. Partitioning requires a sortable value to 
# determine the partition that has to be dropped if the maximum number of 
# partitions that is specified with the
# **ite.businessLogic.group.deduplication.partitioning.count** parameter,
# is exceeded. This sortable value is defined in the new "partitionId" SPL 
# attribute that has to be set latest in the 
# <namespace>.chainprocessor.transfomer.custom::DataProcessor composite operator. 
# The user must specify the type of the "partitionId" SPL attribute with the
# customizable <namespace>.streams.custom.TypesCustom::PartitionIdType streams 
# type definition. The name of the new "partitionId" attribute is fixed. 
# The BloomFilter operator defines the "partitionBy" parameter that uses the value
# of the "partitionId" SPL attribute, that the attribute must be one of the types
# described in the BloomFilter operator. The recommended checkpointing is enabled 
# by the **ite.businessLogic.group.deduplication.checkpointing** parameter.
# It requires the **ite.checkpointing.directory** parameter.STOP
# 		details => <<STOP,
# For more details about the partitioning, see the
# [com.teracloud.streams.teda.utility::BloomFilter|BloomFilter operator].
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: ite.businessLogic.group.deduplication.partitioning.count, ite.businessLogic.group.deduplication.partitioning.searchAllPartitions
#       Other: ite.businessLogic.group.deduplication.checkpointing, ite.checkpointing.directory, ite.ingest.loadDistribution.groupConfigFile
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.partitioning.count (Default: 1)
#
# Specifies the maximum number of partitions. As soon as the number of active
# partitions exceeds this count, the partition with the minimum partitionId 
# expression value is evicted.
#
# Properties
#    Type: integer
#    Default: 1
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any integer value equal to or greater than 1
#    Related Parameters:
#       Parent: ite.businessLogic.group.deduplication.partitioning
#       Other: ite.businessLogic.group.deduplication.partitioning.searchAllPartitions
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.partitioning.searchAllPartitions (Default: off)
#
# Specifies whether the unique/duplicate detection algorithm evaluates all
# partitions or only the partition that is selected, as defined and described in
# the BloomFilter description. If the parameter is switched on, the algorithm 
# evaluates all partitions. If the tuple is evaluated to be a unique in the 
# partition that is selected with the "partitionId", the number of stored uniques
# is increased for this partition even if the tuple is marked as duplicated 
# because of another partition.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group.deduplication.partitioning
#       Other: ite.businessLogic.group.deduplication.partitioning.count
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.probability (Default: 0.001)
#
# Specifies the probability of false positives that are allowed for
# duplicate detection.
# 
# A *false positive* occurs when a tuple is marked as a duplicate even
# though it is unique.
# 
# The expected number of unique tuples, for which this probability is
# ensured, is specified in the file that is specified in the
# **ite.ingest.loadDistribution.groupConfigFile** parameter.
#
# Properties
#    Type: float
#    Default: 0.001
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any float value from 0 to 0.1, inclusive
#    Related Parameters:
#       Parent: ite.businessLogic.group.deduplication
#       Other: ite.businessLogic.group.deduplication.checkpointing, ite.ingest.loadDistribution.groupConfigFile
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.deduplication.timeToKeep (Default: "1d")
#
# Specifies the time after which tuples are removed from the stateful
# deduplication.
# 
# The parameter is active only if the parent and the **ite.businessLogic.group.deduplication.checkpointing**
# parameters are set to `on`.
#
# Properties
#    Type: string
#    Default: "1d"
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the (\\d+d)?\\s*(\\d+h)?\\s*(\\d+m)? regular expression
#    Related Parameters:
#       Parent: ite.businessLogic.group.deduplication.checkpointing
# ------------------------------------------------------------------------------
ite.businessLogic.group.deduplication.timeToKeep=15d

# ------------------------------------------------------------------------------
# ite.businessLogic.group.startupControlFile
#
# Specifies the name of the text file that delays the initialization
# of the ITE application. As soon as the file exists and contains the `done`
# value in the first row, the initialization begins.
# 
# You use this file to indicate completed external activities that are required
# before the ITE application starts its initialization, for example, creating
# files that are needed for the custom or deduplication initialization from
# a database.
# 
# The specified file is expected in the control directory that is identified
# by the **global.applicationControlDirectory** parameter.
#
# Properties
#    Type: string
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the \[^\\/\]+ regular expression
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Other: global.applicationControlDirectory, ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.tap, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.group.tap (Default: off)
#
# Turns the post-group data processor tap on or off.
# 
# If this tap is turned on, another stream that contains the tuples that passed
# the business logic, including the group logic (for example, deduplication),
# is activated. You may use these tuples to implement features that do not alter
# the data stored in the files by the main business logic. For example, the tap
# logic filters for tuples and sends an event to another application or another
# system if the filter condition is met. The spl.adapter::Export operator or any
# sink operator like the spl.adapter::TCPSink operator may be used with the tap
# data tuples.
# 
# Implement your tap logic in the <namespace>.tap.custom::PostContextDataProcessorTap
# composite operator. You must also set the **ite.embeddedSampleCode**
# parameter to `off`, so the ITE application uses your implementation instead
# of the sample logic that is provided with the <namespace>.tap.sample::PostContextDataProcessorTap
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.transformation.tap, ite.embeddedSampleCode, ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.sink.debug (Default: off)
#
# Specifies whether to enable additional file outputs that are used to
# troubleshoot your ITE application. The files are located in the `debug`
# directory, which is a subdirectory of the configured *data* directory.
# 
# When this parameter is set to `on`, you receive information about the
# storage stage.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.debug (Default: off)
#
# Specifies whether to enable additional file outputs that are used to
# troubleshoot your ITE application. The files are located in the `debug`
# directory, which is a subdirectory of the configured *data* directory.
# 
# When this parameter is set to `on`, you receive information about the
# transformation stage.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.lookup (Default: off)
#
# Specifies whether the ITE application performs data enrichment
# using the lookup functionality.
# 
# If you want to use the lookup functionality, set the parameter to `on`.
# If not, set the parameter to `off`. In this case, the ITE application
# runs independently of the Lookup Manager application.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.ingest.reader.schemaExtensionForLookup
# ------------------------------------------------------------------------------
ite.businessLogic.transformation.lookup=on

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.outputType (Default: recordStream)
#
# Specifies the output schema of the <namespace>.chainprocessor.transformer::ChainprocessorTransformerCore
# composite that is handled by the <namespace>.streams::TypesCommon.TransformerOutType
# while considering the value of the **ite.storage.type** parameter. The
# streams are defined in "TypesCommon" and "TypesCustom" and used in the "DataProcessor" composites.
# 
# If tuple deduplication is enabled, the hash code must be part of the defined tuple.
# 
# Valid values of this parameter are:
# 
# * `tableStream`:
#   This output stream becomes the input of the TableRowGenerator. One tuple
#   contains a single table row and one hash code for deduplication. If an
#   input record results in multiple table rows or input to different tables,
#   several tuples must be sent by the Transformer.
# * `extendedTableStream`:
#   Extends the table schema, for example, if lookup data is evaluated in custom
#   PostDedupProcessor or in CustomContext. This is all that the 'tableStream'
#   selection is extended with the <namespace>.streams::TypesCustom.ExtendedTableStream
#   or <namespace>.streams.custom::TypesCustom.ExtendedTableStream streams.
# * `recordStream`:
#   Enables the RecordStreamType that contains the TransformedRecord tuple. It
#   is used when **ite.storage.type** is set to 'recordFile' or 'custom'. The
#   PostContextDataProcessor composte creates the row tuples.
#
# Properties
#    Type: enum
#    Default: recordStream
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: extendedTableStream, recordStream, tableStream
#    Related Parameters:
#       Other: ite.storage.type
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.postprocessing.custom (Default: off)
#
# Enables the custom logic that runs after the group processing but before
# the storage stage.
# 
# If you want to implement this custom logic, set this parameter
# to `on` and adapt the <namespace>.chainsink.custom::PostContextDataProcessor
# composite. You must also set the **ite.embeddedSampleCode**
# parameter to `off`, so the ITE application uses your implementation instead
# of the sample logic that is provided with the <namespace>.chainsink.sample::PostContextDataProcessor
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.embeddedSampleCode
# ------------------------------------------------------------------------------
ite.businessLogic.transformation.postprocessing.custom=on

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.tap (Default: off)
#
# Turns the post-transformation data processor tap on or off.
# 
# If this tap is turned on, another stream that contains the tuples that passed
# the business logic, excluding the group logic (for example, deduplication),
# is activated. You may use these tuples to implement features that do not alter
# the data stored in the files by the main business logic. For example, the tap
# logic filters for tuples and sends an event to another application or another
# system if the filter condition is met. The spl.adapter::Export operator or any
# sink operator like the spl.adapter::TCPSink operator may be used with the tap
# data tuples.
# 
# Implement your tap logic in the <namespace>.tap.custom::TransformerTap
# composite operator. You must also set the **ite.embeddedSampleCode**
# parameter to `off`, so the ITE application uses your implementation instead
# of the sample logic that is provided with the <namespace>.tap.sample::TransformerTap
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.businessLogic.group.tap, ite.embeddedSampleCode
# ------------------------------------------------------------------------------
ite.businessLogic.transformation.tap=on

# ------------------------------------------------------------------------------
# ite.businessLogic.transformation.tupleGroupSplit
#
# Enables tuple grouping based on tuple attributes to increase
# parallelization, improve throughput, or overcome memory limitations.
# 
# For example, you want to run deduplicatation on several billion unique records.
# Even with memory-efficient deduplication, you exceed the available memory.
# Tuple grouping allows you to build smaller record subsets that are distributed
# to different instances of the deduplication logic on different hosts. The tuple
# grouping also ensures that tuples with the same identification, also called
# *group ID*, are routed to the same instance. The memory requirement for
# deduplication that runs with a subset of records is less than the memory
# requirement for deduplication that runs with the complete record set.
# 
# If this parameter is set to `on`, tuple grouping based on tuple
# attributes is enabled.
# 
# As a developer, you implement your custom business logic in the
# <namespace>.chainprocessor.transfomer.custom::DataProcessor composite.
# As part of this implementation, you provide the destination group ID in
# the `groupID` SPL output attribute. The `groupID` is a 2-digit `rstring`
# attribute that supports a range from 00 to 99. The default `groupId` value
# is `00`. Tuples that have the same identification must result in the same
# `groupID` value. For example, a key attribute of the tuple has a range from
# 0 to 255. You want to divide this range into two subranges, 0 to 127 and 128
# to 255. If the key attribute is in the first range, you provide the 00
# `groupID`. If it is in the second range, you provide the 01 `groupID`.
# 
# If this parameter is set to `on`, the **ite.businessLogic.group**
# parameter must be set to `on`, and the **ite.ingest.fileGroupSplit**
# parameter must be set to `off`. In other words, this parameter can only be
# set to `on` for an ITE application that uses variant B. For ITE applications
# that use variant A or C, this parameter must be set to `off`.
#
# Properties
#    Type: enum
#    Cardinality: 1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.businessLogic.group, ite.ingest.fileGroupSplit
# ------------------------------------------------------------------------------
ite.businessLogic.transformation.tupleGroupSplit=off

# ------------------------------------------------------------------------------
# ite.checkpointing.directory (Default: "./checkpoint")
#
# Specifies the directory that receives checkpoint files.
# 
# A relative path is relative to the `data` directory.
# 
# For more information about the checkpoint files, see the related parameters.
#
# Properties
#    Type: string
#    Default: "./checkpoint"
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any value matching the .+ regular expression
#    Related Parameters:
#       Other: ite.businessLogic.group.custom.checkpointing, ite.businessLogic.group.deduplication.checkpointing
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.cleanup.schedule.dayOfMonth (Default: *empty list*)
#
# Specifies the day or days of the month on which automated cleanup
# operations run. To enable automated cleanup operations, the other
# schedule parameters must also be specified.
# 
# Automated cleanup operations are required, for example, to remove
# old information from the file or tuple deduplication.
# 
# See the [com.teracloud.streams.teda.utility::ScheduledBeacon|ScheduledBeacon]
# operator for more information about the schedule.
#
# Properties
#    Type: string
#    Default: *empty list*
#    Cardinality: 0..n
#    Provisioning Time: compile-time, submission-time
#    Valid Values: comma-separated list of any value matching the ((\[1-2\]?\[0-9\]|3\[01\])-)?(\[1-2\]?\[0-9\]|3\[01\]) regular expression
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.cleanup.schedule.dayOfWeek (Default: *)
#
# Specifies the day or days of the week on which automated cleanup
# operations run. To enable automated cleanup operations, the other
# schedule parameters must also be specified.
# 
# Automated cleanup operations are required, for example, to remove
# old information from the file or tuple deduplication.
# 
# See the [com.teracloud.streams.teda.utility::ScheduledBeacon|ScheduledBeacon]
# operator for more information about the schedule.
#
# Properties
#    Type: enum
#    Default: *
#    Cardinality: 0..n
#    Provisioning Time: compile-time, submission-time
#    Valid Values: comma-separated list of *, 0, 1, 2, 3, 4, 5, 6, Fri, Friday, Mon, Monday, Sat, Saturday, Sun, Sunday, Thu, Thursday, Tue, Tuesday, Wed, Wednesday
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.cleanup.schedule.hour (Default: "0")
#
# Specifies the hour or hours of the day during which automated cleanup
# operations run. To enable automated cleanup operations, the other
# schedule parameters must also be specified.
# 
# Automated cleanup operations are required, for example, to remove
# old information from the file or tuple deduplication.
# 
# See the [com.teracloud.streams.teda.utility::ScheduledBeacon|ScheduledBeacon]
# operator for more information about the schedule.
#
# Properties
#    Type: string
#    Default: "0"
#    Cardinality: 0..n
#    Provisioning Time: compile-time, submission-time
#    Valid Values: comma-separated list of any value matching the ((\[0-9\]|1\[0-9\]|2\[0-3\])-)?(\[0-9\]|1\[0-9\]|2\[0-3\]) regular expression
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.cleanup.schedule.minute (Default: "0")
#
# Specifies the minute or minutes of the hour at which automated cleanup
# operations run. To enable automated cleanup operations, the other
# schedule parameters must also be specified.
# 
# Automated cleanup operations are required, for example, to remove
# old information from the file or tuple deduplication.
# 
# See the [com.teracloud.streams.teda.utility::ScheduledBeacon|ScheduledBeacon]
# operator for more information about the schedule.
#
# Properties
#    Type: string
#    Default: "0"
#    Cardinality: 0..n
#    Provisioning Time: compile-time, submission-time
#    Valid Values: comma-separated list of any value matching the (\[1-5\]?\[0-9\]-)?\[1-5\]?\[0-9\] regular expression
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.control.debug (Default: off)
#
# Enables additional file outputs that are used to troubleshoot your ITE
# application. The files are located in the `debug` directory, which is
# a subdirectory of the configured *data* directory.
# 
# If this parameter is set to `on`, you get information about the status
# and status changes of the ITE application.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.businessLogic.group, ite.cleanup.schedule.dayOfMonth, ite.cleanup.schedule.dayOfWeek, ite.cleanup.schedule.hour, ite.cleanup.schedule.minute
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.embeddedSampleCode (Default: on)
#
# Activates sample code in created ITE projects. By default, this parameter is
# enabled (`on`), creating projects with a ready-to-run implementation. When
# coding custom code starts for the custom namespace composites, this parameter
# must be disabled. If you disable the parameter, you must also assign your
# parsers to **ite.ingest.reader.parserList**.
# 
# If this parameter is set to `on`, all customized code is disabled.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.tap, ite.businessLogic.transformation.postprocessing.custom, ite.ingest.customFileTypeValidator, ite.ingest.reader.preprocessing, ite.ingest.reader.schemaExtensionForLookup, ite.storage.auditOutputs, ite.storage.rejectWriter.custom
# ------------------------------------------------------------------------------
ite.embeddedSampleCode=off

# ------------------------------------------------------------------------------
# ite.export.streams
#
# Configures one or more interfaces to export a stream by connecting the spl.adapter::Export operator to this output port, making it available to spl.adapter::Import operators of applications that are running in the same streaming middleware instance. 
# The spl.adapter::Export operators in the ITE application are configured to prevent back-pressure.
# In case any importing client is not keeping up, data is lost since the connection is dropped and reconnected automatically.
# 
# The following interfaces are supported:
# 
#  |:------------+:---------------------------------------------------------------------:|:--------------------------------:|
#  | Value       + Export property                                                       | Exported SPL Schema              |
#  |:============+:=====================================================================:|:================================:|
#  | reader      + ite="<namespace>.chainprocessor.reader_output_RecordValidator"        | TypesCommon.ReaderOutStreamType  |
#  |-------------+-----------------------------------------------------------------------|----------------------------------|
#  | transformer + ite="<namespace>.chainprocessor.transformer_output_DataProcessor"     | TypesCommon.TransformerOutType   |
#  |-------------+-----------------------------------------------------------------------|----------------------------------|
#  | writer      + ite="<namespace>.chainsink_input_Writer"                              | TypesCommon.ChainSinkStreamType  |
#  |-------------+-----------------------------------------------------------------------|----------------------------------|
#  | dedup       + ite="<namespace>.context_output_Dedup"                                | TypesCommon.TransformerOutType   |
#  --------------------------------------------------------------------------------------------------------------------------
# 
# In your custom application, the output stream of the Import operator needs to use the selected schema from the table and the export property must be set as subscription parameter.
# 
# Configuration examples:
# * The parameter value `reader,writer` selects two interfaces to be exported in each chain.
# * The parameter value `dedup` selects the output stream of the BloomFilter operator to be exported in each group.
# 
# NOTE: If interface `dedup` is selected the configuration parameter ite.businessLogic.group.deduplication must be set to `on`. Otherwise the value `dedup` is ignored.
#
# Properties
#    Type: enum
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of dedup, reader, transformer, writer
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.fuse.chain.operators (Default: on)
#
# This parameter describes the operator fusing of all operators from the
# following namespaces:
# * <namespace>.chainprocessor.reader
# * <namespace>.chainprocessor.reader.custom
# * <namespace>.chainprocessor.transformer
# * <namespace>.chainprocessor.transformer.custom
# * <namespace>.chainsink
# * <namespace>.chainsink.custom
# Set the parameter `on` to fuse all operators into a single Processing Element
# to achieve better performance.
# You can better analyze the congestion factor or problems in an operator
# if you set this parameter to `off`.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.fuse.group.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.fuse.group.operators (Default: on)
#
# This parameter describes the operator fusing of all operators from the
# following namespaces:
# * <namespace>.context
# * <namespace>.context.custom
# * <namespace>.housekeeping.context.custom
# Set the parameter `on` to fuse all operators of one group into a single 
# Processing Element to achieve better performance.
# You can better analyze the congestion factor or problems in an operator
# if you set this parameter to `off`.
# Each group is running in an own Processing Element if this parameter is on.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.fuse.chain.operators, ite.fuse.groupWithChain.operators, ite.fuse.groupWithChain.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.fuse.groupWithChain.operators (Default: off)
#
# This parameter describes the operator fusing of all operators from the
# following namespaces:
# * <namespace>.chainprocessor.reader
# * <namespace>.chainprocessor.reader.custom
# * <namespace>.chainprocessor.transformer
# * <namespace>.chainprocessor.transformer.custom
# * <namespace>.chainsink
# * <namespace>.chainsink.custom
# * <namespace>.context
# * <namespace>.context.custom
# * <namespace>.housekeeping.context.custom
# If this parameter is turned on, then the operators are fused and the tuples
# are not sent across Processing Elements.
# In variant B, all chains and all group operators are in a single
# Processing Element.
# As a consequence it not possible to scale across hosts with Variant B
# if parameter is turned on.
# In variant C, all chains of one group are fused to the same Processing Element.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.businessLogic.group
#       Other: ite.businessLogic.group.custom, ite.businessLogic.group.debug, ite.businessLogic.group.deduplication, ite.businessLogic.group.startupControlFile, ite.businessLogic.group.tap, ite.fuse.chain.operators, ite.fuse.group.operators, ite.fuse.group.operators
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.archiveMode (Default: single)
#
# Specifies the base directory that is used for the following subdirectories:
# 
# * `archive`:
#   Receives successfully processed input files.
# * `duplicate`:
#   Receives duplicate input files (files that are already processed).
# * `invalid`:
#   Receives files that do not match the allowed file types and formats.
# * `failed`:
#   Receives files with which unexpected problems occurred and that are not
#   automatically resolved.
# 
# If you set this parameter to `single`, then the ite.ingest.directory.input
# parameter is used as base directory.
# 
# In case **ite.ingest.directory.inputListFile** contains multiple directories and 
# ite.ingest.archiveMode is set to `multiple` the subdirectories are created
# to the corresponding input directory.
#
# Properties
#    Type: enum
#    Default: single
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: multiple, single
#    Related Parameters:
#       Other: ite.ingest.directory.inputListFile
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.customFileControl (Default: off)
#
# Enables fine grained control over the filename distribution mechanism.
# If this parameter is set to true, the custom composite operator
# <namespace>.fileingestion.custom::FileControl needs to be implemented.
# It receives all acknowledgement tuples from the chain processors, after a file is processed.
# The developer can delay these acknowledgement tuples to control when a certain chain starts processing
# the next input file. The type of the acknowledgement tuples is <namespace>.streams::TypesCommon.AcknowledgedFilesType
# It contains the chain number, the filename and a few other attributes
# (see TypesCommon.splmm for details).
# 
# This option can only be used if the **ite.ingest.loadDistribution** parameter
# is set to `equalLoad`.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.ingest.loadDistribution
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.customFileTypeValidator (Default: off)
#
# Enables file-type validation. File-type validation distinguishes between
# different file types and data formats, for example CSV or ASN.1. Depending
# on the determined file type, the ITE application sends the file name to
# the appropriate parse logic.
# 
# If file-type validation is turned `off`, every file is processed. Only
# one parse logic exists that processes all files.
# 
# If the file-type validation is turned `on`, file names are determined to be
# valid or invalid. If a file is invalid, it is not processed but logged as
# invalid and moved to the `invalid` directory, which is a subdirectory of
# the input directory that is specified with the
# **ite.ingest.directory.input** parameter.
# 
# If the filename is valid, a unique file type ID is stored in the `fileType`
# SPL output attribute of the <namespace>.fileingestion.custom::FileTypeValidator
# composite operator. As a developer, you want to implement an algorithm that
# validates the file name and determines the file type in the
# <namespace>.fileingestion.custom::FileTypeValidator composite operator.
# To activate your algorithm, set this parameter to `on`. You must also set the
# **ite.embeddedSampleCode** parameter to `off`, so the ITE application
# uses your implementation instead of the sample logic that is provided with the
# <namespace>.fileingestion.sample::FileTypeValidator composite operator.
# 
# The unique file type IDs that can occur as a result of your algorithm must be
# consistent with the types that are specified with the **ite.ingest.reader.parserList**
# parameter. Any inconsistency is reported as soon as it occurs, either leading
# to an unhealthy processing element or a log message for this file, depending
# on the **ite.resilienceOptimization** parameter.
# 
# The easiest algorithm checks for a file name pattern. A more complicated
# algorithm could read and analyze the file contents.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.embeddedSampleCode, ite.ingest.reader.parserList, ite.resilienceOptimization
# ------------------------------------------------------------------------------
ite.ingest.customFileTypeValidator=on

# ------------------------------------------------------------------------------
# ite.ingest.debug (Default: off)
#
# Enables additional file outputs that are used to troubleshoot your ITE
# application. The files are located in the `debug` directory, which is
# a subdirectory of the configured *data* directory.
# 
# When this parameter is `on`, you get information about file
# detection.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.deduplication (Default: on)
#
# Enables file name deduplication.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: ite.ingest.deduplication.reprocessFilePattern, ite.ingest.deduplication.timeToKeep
#       Other: ite.ingest.directoryScan.processFilePattern
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.deduplication.reprocessFilePattern (Default: "")
#
# Defines the file name pattern for files to reprocess. Matching file names
# bypass the duplicate check of the file ingestion logic, and the files are
# processed again. The pattern should not match the same set of files as
# the pattern configured for parameter ite.ingest.directoryScan.processFilePattern,
# because this would allow all processed files to bypass the duplicate check.
#
# Properties
#    Type: string
#    Default: ""
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any string
#    Related Parameters:
#       Parent: ite.ingest.deduplication
#       Other: ite.ingest.deduplication.timeToKeep
# ------------------------------------------------------------------------------
ite.ingest.deduplication.reprocessFilePattern=.*_reprocess_$

# ------------------------------------------------------------------------------
# ite.ingest.deduplication.timeToKeep (Default: "1d")
#
# Specifies the time after which a file name is removed from
# the set of unique file names in the file name deduplication logic.
#
# Properties
#    Type: string
#    Default: "1d"
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the (\\d+d)?\\s*(\\d+h)?\\s*(\\d+m)? regular expression
#    Related Parameters:
#       Parent: ite.ingest.deduplication
#       Other: ite.ingest.deduplication.reprocessFilePattern
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directory.input (Default: "./in")
#
# Specifies the path of the directory that receives the input files.
# A relative path is relative to the `data` directory.
# 
# The input files must occur in this directory as a result of an atomic
# action. In other words, it is recommended that you move input files into
# this directory instead of copying or creating them. Over time, copying or
# creating input files might result in incompletely processed or failed files.
#
# Properties
#    Type: string
#    Default: "./in"
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any value matching the .+ regular expression
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directory.inputListFile (Default: "")
#
# Configures the path to the file that contains a list of several input
# directories. This file is a text file that contains one absolute or
# relative directory path per line. Comment lines start with a pound
# symbol ('#') in column 1. The list must not contain duplicates. This
# parameter is optional.
# 
# If this parameter is used, all files from the first directory in the
# list are considered urgent files. Urgent files are queued in a separate
# file queue, which has precedence over the normal file queue.
#
# Properties
#    Type: string
#    Default: ""
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any string
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.nanoSecondsPrecision (Default: on)
#
# Enables scanning of files with nanosecond precision. When this parameter is
# turned off, all nanoseconds fields are set to zero in the directory scanner.
# If your file system does not support nanosecond precision, this parameter can
# be turned off.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.processFilePattern (Default: ".*\.DAT$")
#
# Defines a file name pattern. The directory scanner reports matching file names
# to the following ingestion logic. If file name deduplication is turned on,
# these files are checked to determine whether they have been processed.
# If so, the files are moved to the `duplicate` files folder.
#
# Properties
#    Type: string
#    Default: ".*\.DAT$"
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the .+ regular expression
#    Related Parameters:
#       Other: ite.ingest.deduplication
# ------------------------------------------------------------------------------
ite.ingest.directoryScan.processFilePattern=.*_([0-9]{14})\.asn$|.*_([0-9]{14})\.bin$|.*_([0-9]{14})\.csv$

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.sleepTime (Default: 5.0)
#
# Specifies the time (in seconds) after each directory scan. This parameter
# optimizes the scan load. For example, there is no need to scan the input
# directories every second if new files arrive only once per hour.
#
# Properties
#    Type: float
#    Default: 5.0
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any float value from 1 to 3600, inclusive
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.sort (Default: off)
#
# Specifies the sort mode for file name tuples.
# 
# If this parameter is set to `off`, sorting is disabled, in contrast to the
# spl.adapter::DirectoryScan operator, which always sorts by file time.
# 
# If this parameter is set to `ascending`, file name tuples are sorted in
# ascending order. The sort attribute must be provided in the
# **ite.ingest.directoryScan.sort.attribute** parameter. The sort
# window is one scan cycle of the directory scanner.
# 
# If the parameter is set to `descending`, file name tuples are sorted in
# descending order. The sort attribute must be provided in the
# **ite.ingest.directoryScan.sort.attribute** parameter. The sort
# window is one scan cycle of the directory scanner.
# 
# If this parameter is set to `custom`, you must provide the sort logic in the
# custom  <namespace>.fileIngestion.custom::FileSort composite operator. You
# can provide the sort attribute in the **ite.ingest.directoryScan.sort.attribute**
# parameter or in the <namespace>.fileIngestion.custom::FileSort composite
# operator itself.
# 
# The input schema of the <namespace>.fileIngestion.custom::FileSort composite
# operator depends on the setting of the related
# **ite.ingest.directoryScan.specialFileTime** parameter.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: asc, ascending, custom, desc, descending, off
#    Related Parameters:
#       Children: ite.ingest.directoryScan.sort.attribute
#       Other: ite.ingest.directoryScan.specialFileTime
# ------------------------------------------------------------------------------
ite.ingest.directoryScan.sort=ascending

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.sort.attribute
#
# Specifies the file-sort attribute. The file-sort attribute is used by the
# downstream sort operator. This parameter is an enumeration parameter with
# the following values:
# 
# * `off`:
#   No file-sort attribute is selected.
# * `time`:
#   The file time is used as the sort attribute and depends on the
#    **ite.ingest.directoryScan.specialFileTime** parameter.
# * `name`:
#   The file name is used as the sort attribute.
# * `size`:
#   The file size is used as the sort attribute.
# 
# If the parent parameter is set to `ascending` or `descending`, this parameter
# is mandatory. If the parent parameter is set to `custom`, it is optional. If
# the parent parameter is set to `off`, this parameter is forbidden.
# 
# If this parameter is required for the application and the related
# **ite.ingest.directoryScan.specialFileTime** parameter is
# turned on, this parameter must be set to `time`.
#
# Properties
#    Type: enum
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: name, off, size, time
#    Related Parameters:
#       Parent: ite.ingest.directoryScan.sort
#       Other: ite.ingest.directoryScan.specialFileTime
# ------------------------------------------------------------------------------
ite.ingest.directoryScan.sort.attribute=name

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.specialFileTime (Default: off)
#
# Enables a user-selected source for file time data. File time data is used in
# the file name deduplication logic to implement the eviction policy and to
# sort file name tuples.
# 
# The parameter is closely related to the
# **ite.ingest.directoryScan.sort.attribute** parameter.
# 
# If this parameter is set to `off`, the file time attribute is determined from
# modification time of the file object. If this parameter is set to `on`, the file
# time is determined from the file name. The file time generation is controlled by
# the **ite.ingest.directoryScan.specialFileTime.regexp** and
# and **ite.ingest.directoryScan.specialFileTime.format** parameters.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: ite.ingest.directoryScan.specialFileTime.format, ite.ingest.directoryScan.specialFileTime.regexp
#       Other: ite.ingest.directoryScan.sort.attribute
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.specialFileTime.format
#
# Provides a list of date and time formats for special file-time conversion.
# 
# Formats with a '_' separator accept any kind of separator.
#
# Properties
#    Type: enum
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of DDMMYYYY, DDMMYYYYhhmmss, DD_MM_YYYY, DD_MM_YYYY_hh_mm_ss, DD_MM_YYYY_hh_mm_ss_mmm, MMDDYYYY, MMDDYYYYhhmmss, MM_DD_YYYY, MM_DD_YYYY_hh_mm_ss, MM_DD_YYYY_hh_mm_ss_mmm, YYYYMMDD, YYYYMMDDhhmmss, YYYY_MM_DD, YYYY_MM_DD_hh_mm_ss_mmm, YYY_MM_DD_hh_mm_ss
#    Related Parameters:
#       Parent: ite.ingest.directoryScan.specialFileTime
#       Other: ite.ingest.directoryScan.specialFileTime.regexp
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.directoryScan.specialFileTime.regexp
#
# If the **ite.ingest.directoryScan.specialFileTime** parameter is set to
# `on`, this parameter is required. The values of this parameter are a list of
# regular expessions. The file name is tested against this regular expressions
# list. The first match is used and converted into a time, which overrides the
# file time attribute. The date and time format is used from the corresponding
# place in the format list that is defined in the
# **ite.ingest.directoryScan.specialFileTime.format** parameter.
# 
# Each regular expression must contain one group (pair of parentheses) that
# isolates the date and time from the rest of the file name. If no match is
# found with a particular file name, the file is considered invalid and moved
# to the `invalid` files directory.
# 
# Valid values are a comma-separated list of regular expressions that contain one
# pair of parentheses. A comma must not be part of a regular expression.
# 
# Example:
# 
# If a file name contains a date and time substring in the last 8 digits in front
# of the filename extension, for example cdr_cid1234_20120405.txt, the following
# regular expression can extract the date and time portion: `.*_([0-9]{8}).txt$`
# 
# The appropriate format parameter is: YYYYMMDD
#
# Properties
#    Type: string
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of any value matching the .+ regular expression
#    Related Parameters:
#       Parent: ite.ingest.directoryScan.specialFileTime
#       Other: ite.ingest.directoryScan.specialFileTime.format
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.fileGroupSplit (Default: on)
#
# Enables the file ingestion group split.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Children: ite.ingest.fileGroupSplit.pattern
# ------------------------------------------------------------------------------
ite.ingest.fileGroupSplit=on

# ------------------------------------------------------------------------------
# ite.ingest.fileGroupSplit.pattern
#
# Defines a regular expression that extracts the group ID from the file name.
# The expression must have exactly one group (a pair of parentheses), which
# isolates the group ID from the rest of the file name. If the file name does
# not match the pattern, it is assigned to the `default` group. The group
# configuration is defined in the group configuration file that is specified
# in the **ite.ingest.loadDistribution.groupConfigFile** parameter.
# 
# If the **ite.ingest.fileGroupSplit** parameter is set to `on`, this
# parameter is required.
#
# Properties
#    Type: string
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the .+ regular expression
#    Related Parameters:
#       Parent: ite.ingest.fileGroupSplit
#       Other: ite.ingest.loadDistribution.groupConfigFile
# ------------------------------------------------------------------------------
ite.ingest.fileGroupSplit.pattern=^.*_RGN([0-9]+)_

# ------------------------------------------------------------------------------
# ite.ingest.loadDistribution (Default: equalLoad)
#
# Selects the distribution method for the input files to the parallel processing
# chains.
#
# Properties
#    Type: enum
#    Default: equalLoad
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: equalLoad, roundRobin
#    Related Parameters:
#       Children: ite.ingest.loadDistribution.groupConfigFile, ite.ingest.loadDistribution.numberOfParallelChains, ite.ingest.loadDistribution.udp
# ------------------------------------------------------------------------------
ite.ingest.loadDistribution=roundRobin

# ------------------------------------------------------------------------------
# ite.ingest.loadDistribution.groupConfigFile (Default: "./config/groups.cfg")
#
# Changes the name of the group configuration file. This parameter is obsolete in
# variants that do not use file groups.
# 
# Relative paths are relative to the `data` directory.
#
# Properties
#    Type: string
#    Default: "./config/groups.cfg"
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any value matching the .+ regular expression
#    Related Parameters:
#       Parent: ite.ingest.loadDistribution
#       Other: ite.ingest.loadDistribution.numberOfParallelChains, ite.ingest.loadDistribution.udp
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.loadDistribution.numberOfParallelChains (Default: 3)
#
# Defines the number of parallel processing chains for application variants that
# do not build groups based on file names.
#
# Properties
#    Type: integer
#    Default: 3
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: any integer value equal to or greater than 1
#    Related Parameters:
#       Parent: ite.ingest.loadDistribution
#       Other: ite.ingest.loadDistribution.groupConfigFile, ite.ingest.loadDistribution.udp
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.loadDistribution.udp (Default: off)
#
# Enables the user-defined parallelism feature.
# 
# If this parameter is set to `on`, the number of parallel chains can be
# increased at job submission time with one or more submission parameter
# depending on the used application variant. Otherwise, the number of chains
# is generated at compile time and cannot be changed at submission time.
# 
# If this parameter is set to `on`, you need to select the distribution method
# `roundRobin` with the ite.ingest.loadDistribution parameter.
# 
# If you are using variant A or B, use the
# **ite.ingest.loadDistribution.groupConfigFile.chains** parameter.
# If you are using variant C, use the
# **ite.ingest.loadDistribution.groupConfigFile.chains.00** through
# **ite.ingest.loadDistribution.groupConfigFile.chains.99** parameters.
# 
# If the user-defined parallelism feature is used in custom code, this parameter
# must be turned off since nested parallel regions are not supported.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Parent: ite.ingest.loadDistribution
#       Other: ite.ingest.loadDistribution.groupConfigFile, ite.ingest.loadDistribution.numberOfParallelChains
# ------------------------------------------------------------------------------
ite.ingest.loadDistribution.udp=on

# ------------------------------------------------------------------------------
# ite.ingest.reader.compression
#
# Enables the compression parameter for the spl.adapter::FileSource operator in the
# specified composite operators. The default compression mode is `gzip` but can
# be changed in the <namespace>.chainprocessor.reader.custom::FileReaderCustom
# composite operator by setting the compression parameter for the used composite.
# 
# Enable this parameter only if your input files are compressed.
#
# Properties
#    Type: enum
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of FileReaderASN1, FileReaderCSV, FileReaderStructure
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.customFileStatistics (Default: off)
#
# Enables custom file statistics. To add attributes to the statistics schema,
# use TypesCustom::CustomFileStatisticsStreamType. If the **ite.storage.type**
# parameter is not set to 'tableFile', this parameter should be used.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.customParserStatistics (Default: off)
#
# Enables custom parser statistics. Use TypesCustom::CustomParserStatisticsStreamType
# to define the parser statistic output stream type. It should be used to integrate
# your own parser.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.debug (Default: off)
#
# Enables additional file outputs that are used to troubleshoot your ITE
# application. The files are located in the `debug` directory, which is a
# subdirectory of the configured *data* directory.
# 
# When you set this parameter to `on`, you receive information about the parsed files.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.encoding
#
# Enables the encoding parameter for the spl.adapter::FileSource operator in the
# specified composite operators.
#
# Properties
#    Type: enum
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of FileReaderCSV
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.parserList (Default: "*|FileReaderCustom")
#
# Enables one or more parsers and specifies the file type ids for which the
# parsers are responsible.
# 
# If you disable the parameter **ite.embeddedSampleCode** to start
# your customizing work, you must immediately assign your parsers to this
# parameter.
#
# Properties
#    Type: string
#    Default: "*|FileReaderCustom"
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of any value matching the \[^|\]+\\|\[A-Z\]\[\\w_\]* regular expression
# ------------------------------------------------------------------------------
ite.ingest.reader.parserList=ASN|FileReaderCustomASN1,BIN|FileReaderCustomBIN,CSV|FileReaderCustomCSV

# ------------------------------------------------------------------------------
# ite.ingest.reader.preprocessing (Default: off)
#
# Enables file preprocessing that is used to determine attribute values once
# per file or to determine the file type if the file type cannot be derived
# from the file name.
# 
# Implement your code in the <namespace>.chainprocessor.reader.custom::PreFileReader
# composite operator. To activate your code, set this parameter to `on`. You must
# also set the **ite.embeddedSampleCode** parameter to `off`, so the ITE
# application uses your implementation instead of the sample logic that is
# provided with the <namespace>.chainprocessor.reader.sample::PreFileReader
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.embeddedSampleCode
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.ingest.reader.schemaExtensionForLookup (Default: on)
#
# If this parameter is set to `on`, the stream schema, which is the output of
# the parsing and the input to the data enrichment, is extended with the attributes
# that are specified in the <namespace>.streams.custom::TypesCustom.LookupType
# type.
# 
# These additional attributes are commonly used during the enrichment. In other
# words, the custom lookup code assigns the enrichment data to these attributes.
# 
# If you require additional attributes to assign your enrichment data, set this
# parameter to `on` and adapt the <namespace>.streams.custom::TypesCustom.LookupType
# type. To activate the customized type, you must also set the **ite.embeddedSampleCode**
# parameter to `off`, so the ITE application uses the customized type instead
# of the sample <namespace>.streams.sample::TypesCustom.LookupType type.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.embeddedSampleCode
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.resilienceOptimization (Default: on)
#
# Enables the resilience for unexpected errors.
# 
# An unexpected error is, for example, a file that is deleted while being
# processed or a custom business logic that accesses data arrays out of
# bounds. For such problems, most SPL operators or functions raise exceptions
# and abort the processing element.
# 
# If resilience is enabled, the ITE application catches these unexpected errors
# and reports them in the `rejected/<input-filename>.rej.csv` rejection file.
# The rejection file is located in the output directory that is specified in
# the **ite.storage.directory.outputs** parameter. If resilience is
# disabled, errors lead to unhealthy processing elements (PEs) that stop
# tuple processing.
#
# Properties
#    Type: enum
#    Default: on
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.auditOutputs (Default: off)
#
# Enables an additional processing step for file statistics that you can use
# to, for example, write the statistics to a database or export the statistics
# to another application.
# 
# Implement your code in the <namespace>.chainsink.custom::AuditTableWriter
# composite operator. To activate your code, set this parameter to `on`. You must
# also set the **ite.embeddedSampleCode** parameter to `off`, so the ITE
# application uses your implementation instead of the sample logic that is
# provided with the <namespace>.chainsink.sample::AuditTableWriter
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.directory.outputs (Default: "./out")
#
# Specifies the base directory for output files. This base directory may contain
# `load`, `rejected`, and `statistics` subdirectories.
# 
# A relative path is relative to the `data` directory.
#
# Properties
#    Type: string
#    Default: "./out"
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any value matching the .+ regular expression
#    Related Parameters:
#       Other: ite.storage.directory.statistics
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.directory.statistics (Default: "./out/statistics")
#
# Specifies the base directory for the statistics log files. For each file that
# is processed by an ITE application, an entry is written to the statistics log
# file. Job statistics logs are written with the date as the first part of the
# file name.
# 
# An `archive` subdirectory is created by the application and on a date switch,
# log files are moved to this `archive` directory.
# 
# A relative path is relative to the `data` directory.
#
# Properties
#    Type: string
#    Default: "./out/statistics"
#    Cardinality: 0..1
#    Provisioning Time: compile-time, submission-time
#    Valid Values: any value matching the .+ regular expression
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.outputDirectoryStructure (Default: allInOne)
#
# Specifies the structure of the output directories. Output files can reside in
# one directory, in different subdirectories (according to the input file that
# created the output files), or in subdirectories that contains all the files of
# one day.
#
# Properties
#    Type: enum
#    Default: allInOne
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: allInOne, perDay, perFile
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.rejectWriter.custom (Default: off)
#
# If set to `on`, you can implement your own handling for rejected records,
# for example to create alarms or write different files.
# 
# Implement your code in the <namespace>.chainsink.custom::RejectWriterCustom
# composite operator. To activate your code, set this parameter to `on`. You must
# also set the **ite.embeddedSampleCode** parameter to `off`, so the ITE
# application uses your implementation instead of the sample logic that is
# provided with the <namespace>.chainsink.sample::RejectWriterCustom
# composite operator.
#
# Properties
#    Type: enum
#    Default: off
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: off, on
#    Related Parameters:
#       Other: ite.embeddedSampleCode
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ite.storage.tableNames
#
# Configures the table names that are used in the TableFileWriter. For each
# table name, a dedicated spl.adapter::FileSink operator is used. If the
# **ite.storage.type** parameter is set to 'tableFile', this parameter
# is mandatory.
#
# Properties
#    Type: string
#    Cardinality: 0..n
#    Provisioning Time: compile-time
#    Valid Values: comma-separated list of any value matching the (?:\[\\w$\]+\\.)?\[\\w$\]+ regular expression
#    Related Parameters:
#       Other: ite.storage.type
# ------------------------------------------------------------------------------
ite.storage.tableNames=VOICE_CDR,SMS_CDR

# ------------------------------------------------------------------------------
# ite.storage.type (Default: recordFile)
#
# Selects the output type for your application.
# 
# You can specify `tableFile` to write CSV files, which can be consumed by
# another application, for example, to load the content of these CSV files
# into a database. Chose this type if you want to create many output files.
# 
# You can specify `recordFile` to write an output file for each input
# file.
# 
# Or, you specify `custom` to implement your own file writer. Implement your
# code in the <namespace>.chainsink.custom::FileWriterCustom composite
# operator. To activate your code, set this parameter to `custom`. You must
# also set the **ite.embeddedSampleCode** parameter to `off`, so the ITE
# application uses your implementation instead of the sample logic that is
# provided with the <namespace>.chainsink.sample::FileWriterCustom
# composite operator.
# 
# If you specify the `noFile` option, the ITE application does not write
# output files for each input file.
# ITE applications that use, for example, variant B or C, can select
# this option if <namespace>.context.custom::ContextDataProcessor creates
# output files only.
# One use case for writing output files in 
# <namespace>.context.custom::ContextDataProcessor only,
# is that you need to aggregate data across files and the
# <namespace>.context.custom::ContextDataProcessor triggers events.
#
# Properties
#    Type: enum
#    Default: recordFile
#    Cardinality: 0..1
#    Provisioning Time: compile-time
#    Valid Values: custom, noFile, recordFile, tableFile
#    Related Parameters:
#       Other: ite.storage.tableNames
# ------------------------------------------------------------------------------
ite.storage.type=tableFile

