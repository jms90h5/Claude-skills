// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

namespace demoapp.fileingestion.custom;

use com.teracloud.streams.teda.internal.ingestion::ProcessFileInfo;


/**
 * Implements a sorting algorithm to sort the file names that are collected
 * during a directory scan cycle. A window punctuation marks the end of the
 * file name set that is sorted.
 *
 * Sorting can be used to, for example, ensure that the oldest files in the
 * set are processed first.
 *
 * Set the **ite.ingest.directoryScan.sort** parameter to custom to activate
 * this composite operator.
 *
 * Do not throw any exceptions here.
 * 
 * @input  FilesIn
 * The tuples to be sorted
 *
 * @output FileOut
 * The sorted tuples
 */
public composite FileSort (
	input 
		FilesIn;
	output
		stream<ProcessFileInfo> FileOut
) {

	graph

		stream<FilesIn> SortStream = Sort(FilesIn) {
			window
				FilesIn	: tumbling, punct();//note: sends punctuations;
			param
				sortBy		: sortAttr;
				order		: ascending;
		}
		stream<ProcessFileInfo> FileOut = Functor(SortStream) {}
}
