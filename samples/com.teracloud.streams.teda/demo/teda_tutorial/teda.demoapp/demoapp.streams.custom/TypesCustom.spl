// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2011, 2016     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
namespace demoapp.streams.custom;

use demoapp.streams::*;

/**
 * TypesCustom
 * This composite contains the custom stream type definitions.
 */
public composite TypesCustom {

	type 

		/**
         * Add further rejection reasons for tuples. The rejection reasons can be used
         * during record validation or transformation in the following composite
         * operators:
		 * <namespace>.chainprocessor.reader.custom::RecordValidator;
		 * <namespace>.chainprocessor.transformer.custom::DataProcessor;
		 * <namespace>.chainsink.custom::PostContextDataProcessor
		 * 
		 * Set the rejection reason to the rejectreason attribute that is part of the  
		 * <namespace>.streams::TypesCommon.RejectReason schema and is used
		 * by the <namespace>.streams::TypesCommon.RejectedDataStreamType schema.
		 */
		static rejectReason = enum {
			rrDefault,
			rrInvalidLine,
			rrRecordDuplicate,
			rrTableDuplicate,
			rrInvalidAttribute,
			rrRecordOutdated,
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			// add custom reject codes here
			rrLookupFailed
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		};

		/**
		 * Defines the SPL attributes that get the enrichment data values assigned.
		 * This schema is part of the <namespace>.streams::TypesCommon.ReaderOutStreamType.
		 */
		static LookupType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			// add your custom attributes here
			int64 customerID,
			int64 customerType,
			rstring callStartDateTime,
			rstring callStartDate,
			rstring callStartTime,
			rstring lookupImsi,	// IMSI used for lookup
			boolean lookupFound	// lookup success indication
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;

		/**
		* Extension of transformer output stream for partitioned deduplication.
		* You must define the type matching the partitioning requirements of your project.
		* The allowed SPL types (see reference of the BloomFilter description):
		* int8, int16, int32, int64
		* uint8, uint16, uint32, uint64
		* float32, float64, decimal32, decimal64, decimal128
		* rstring, ustring
		* timestamp
		*/
		// ------------------------------------------------
		// custom code begin
		// ------------------------------------------------
		// define the type of partitionId attribute
		static PartitionIdType = uint8;
		// ------------------------------------------------
		// custom code end
		// ------------------------------------------------
		
		/**
		 * Unique message schema after reading from file.
		 * Independent from file format (ASN1 / BIN)
		 */
		static MobileSampleMsgFlat = tuple<
			uint8	cdrRecordType,				/* 01 */
			uint64	cdrRecordNumber,			/* 02 */
			rstring	cdrCallReference,			/* 03 */
			rstring	cdrCallingImsi,				/* 04 */
			rstring	cdrCallingImei,				/* 05 */
			rstring	cdrCallingNumber,			/* 06 */
			rstring	cdrCalledImsi,				/* 07 */
			rstring	cdrCalledImei,				/* 08 */
			uint8	cdrCalledNumberTon,			/* 09 */
			uint8	cdrCalledNumberNpi,			/* 10 */
			rstring	cdrCalledNumber,			/* 11 */
			rstring	cdrCallingSubsFirstLac,		/* 12 */
			rstring	cdrCallingSubsFirstCi,		/* 13 */
			rstring	cdrCauseForTermination,		/* 14 */
			uint8	cdrCallType,				/* 15 */
			uint64	cdrSamMczDuration,			/* 16 */
			uint8	cdrCallingNumberTon,		/* 17 */
			uint8	cdrCallingNumberNpi,		/* 18 */
			rstring	cdrCallReferenceTime,		/* 19 */
			uint64	cdrCallingSubsFirstMcc		/* 20 */
		>;


		/**
		 * Specifies SPL attributes that are still accessible after the schema reduction
		 * from the business data schema (<namespace>.streams.custom::ReaderRecordType)
  		 * to the table schema, which consists of a table name and a row attribute only.
  		 * Typically, you set the ExtendedTableStream attributes in the
  		 * <namespace>.chainprocessor.transformer.custom::DataProcessor composite operator
  		 * and use them in the <namespace>.context.custom::ContextDataProcessor composite
  		 * operator. 
  		 * 
  		 * For example, the provided demo application transforms the business data schema
  		 * to the table schema in the demoapp.chainprocessor.transformer.custom::DataProcessor
  		 * composite operator. The business data attributes do not exist anymore after
  		 * this transformation. Since the demoapp.context.custom::ContextDataProcessor
  		 * composite operator that aggregates information, needs some business data to
  		 * implement its functionality, the demo application is customized with this
  		 * <namespace>.streams.custom::TypesCustom.ExtendedTableStream type.
		 *
  		 * Set the **ite.businessLogic.transformation.outputType** parameter to
  		 * `extendedTableStream` to activate this type.
		 */
		static ExtendedTableStream = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			// add /replace with your custom attributes here
			rstring anyExtension
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;

		/**
		 * Type template
		 *
		 * Specify the schema and additional information for a table file. For each
		 * table file, copy, rename, and adapt these type definitions. The last
		 * attribute of each type definition is mandatory. The hashCode attribute
		 * must be present if the **ite.businessLogic.group.deduplication** parameter
		 * is set to on, else it must not.
		 *
		 * If the **ite.businessLogic.transformation.outputType** parameter is set to
		 * tableStream or extendedTableStream, you can use these type definitions
		 * in the following composite operators to send table records with the
		 * <namespace>.utility.TableRowGenerator operator:
		 * 
		 * <namespace>.chainprocessor.transformer.custom::DataProcessor
		 * <namespace>.chainsink.custom::PostContextDataProcessor
		 */
		static Table1 = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			uint8	cdrRecordType, // column recordType
			uint64	cdrRecordNumber,  // column recordNumber
			rstring	cdrCallReference, // column callReference
			rstring cdrCallReferenceTime, // column callReferenceTime
			uint8	cdrCallType, // column callType
			rstring	cdrCalledImei, // column calledIMEI
			rstring	cdrCalledImsi, // column calledIMSI
			rstring	cdrCalledNumber, // column calledNumber
			uint8	cdrCalledNumberNpi, // column calledNumberNPI
			uint8	cdrCalledNumberTon, // column calledNumberTON
			rstring	cdrCallingImei, // column callingIMEI
			rstring	cdrCallingImsi, // column callingIMSI
			rstring	cdrCallingNumber, // column callingNumber
			uint8	cdrCallingNumberNpi, // column callingNumberNPI
			uint8	cdrCallingNumberTon, // column callingNumberTON
			rstring	cdrCallingSubsFirstCi, // column callingSubsFirstCI
			rstring	cdrCallingSubsFirstLac, // column callingSubsFirstLAC
			uint64	cdrCallingSubsFirstMcc, // column callingSubsFirstMCC
			rstring	cdrCauseForTermination, // column causeForTermination
			rstring fileID, // column fileID
			rstring cDRIDKey, // column cDRIDKey
			int64   customerType, // column customerType
			int64   customerID, // column customerID
			rstring callStartDate, // column callStartDate
			rstring callStartTime, // column callStartTime
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
			rstring tablename // must be the last attribute (required by TableRowGenerator and used in TableFileWriter)
		>;

		/**
		 * Type template
		 *
		 * Specify the schema and additional information for a table file. For each
		 * table file, copy, rename, and adapt these type definitions. The last
		 * attribute of each type definition is mandatory. The hashCode attribute
		 * must be present if the **ite.businessLogic.group.deduplication** parameter
		 * is set to on, else it must not.
		 *
		 * If the **ite.businessLogic.transformation.outputType** parameter is set to
		 * tableStream or extendedTableStream, you can use these type definitions
		 * in the following composite operators to send table records with the
		 * <namespace>.utility.TableRowGenerator operator:
		 * 
		 * <namespace>.chainprocessor.transformer.custom::DataProcessor
		 * <namespace>.chainsink.custom::PostContextDataProcessor
		 */
		static Table1StreamType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			Table1, // custom table schema
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
			tuple <rstring hashcode>, // mandatory attribute if dedup is enabled
			TypesCommon.FileInfo  // mandatory attributes
		>;

		/**
		 * specifies the extra attributes that are derived from the CDR
		 */
		static TransformResultType = tuple<
		    rstring callStartDate,
		    rstring callStartTime
		>;

		/**
		 * Specifies the output schema of the pre context business logic
		 * (<namespace>.chainprocessor.transformer.custom::DataProcessor) that is
		 * used if the **ite.businessLogic.transformation.outputType** parameter
		 * is set to recordStream.
		 */
		static TransformedRecord= tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			// add /replace with your custom attributes here
			ReaderRecordType,
			LookupType
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;
		
		/**
		 * The type of output tuples written to checkpoint files
		 * Add here the attributes from the ContextContainer
		 * DataForContextDataProcessor_* stream that are
		 * required to build your custom context.
		 * This type is used for InRecoveryStream.
		 */
		static ContextCheckpointStreamType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			uint8	cdrRecordType,
			rstring	cdrCallingImsi,
			rstring	cdrCalledImsi,
			rstring	cdrCauseForTermination,
			uint8	cdrCallType,
			uint64	cdrSamMczDuration,
			rstring	cdrCallReferenceTime
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;		

		/**
		 * Specifies the output schema of the post context business logic
		 * (<namespace>.chainsink.custom::PostContextDataProcessor) that is used if
		 * the **ite.businessLogic.transformation.outputType** parameter is set to
		 * recordStream and the **ite.storage.type** parameter is set to recordFile
		 * or custom. If the **ite.storage.type** parameter is set to tableFile,
		 * the output type is <namespace>.streams::TypesCommon.TableDataType that is
		 * not customizable.
		 */
		static ChainSinkType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			ReaderRecordType
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;

		/**
		 * Specifies the parser statistics if the **ite.ingest.reader.customParserStatistics**
		 * parameter is set to on. The specified SPL attributes replace the default
		 * statistics of the ASN.1, CSV, and structure parsers.
		 * 
		 * The default statistics of the built-in parsers use the statistics that the
		 * [com.teracloud.streams.teda.parser.text::CSVParse|CSVParse],
		 * [com.teracloud.streams.teda.parser.binary::ASN1Parse|ASN1Parse], and
		 * [com.teracloud.streams.teda.parser.binary::StructureParse|StructureParse]
		 * operators provide.
		 */
		static CustomParserStatisticsStreamType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			uint64 nTuplesSent
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;

		/**
		 * Specifies the file statistics if the **ite.ingest.reader.customFileStatistics**
		 * parameter is set to on. The specified SPL attributes replace the default
		 * table statistics that are specified with the
		 * <namespace>.streams::TypesCommon.TableStatistics type and that provide
		 * information about the number of new records, records that exist and must
		 * be updated, or duplicate records.
		 */
		static CustomFileStatisticsStreamType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			uint64 anyStatistic
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;
		
		/**
		 * The type which is stored in our lookup table.
		 */
		static ImsiLookupTableType = tuple<
			int64 customerID,
			int64 customerType
		>;
		
}
