// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=3;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	my $ENABLE_CUSTOM_CODE = $configurator->isOff(Configurator::ITE_EMBEDDEDSAMPLECODE());
	my $SAMPLE_CODE_ASN1_PARSER=1;
	my $SAMPLE_CODE_BIN_PARSER=1;
	my @fileTypes = ("CSV", "ASN", "BIN");
%>
namespace demoapp.fileingestion.sample;

<%if (0 == $ENABLE_CUSTOM_CODE) {%>

use com.teracloud.streams.teda.internal.ingestion::ProcessFileInfo;
use com.teracloud.streams.teda.internal.ingestion::FileValidity;
/**
 * FileTypeValidator
 * File type validation checks are performed and invalid tuples are rejected.
 * Sets the attribute fileType.
 *
 * @input  FilesIn Tuples to be validated
 *
 * @output FileOut Prepared and checked File tuples
 * @output InvalidOut Rejected tuples
 */
public composite FileTypeValidator (
	input 
		stream<ProcessFileInfo> FilesIn;
	output
		stream<ProcessFileInfo> FileOut,
		stream<ProcessFileInfo> InvalidOut
) {

	graph

		@spl_category(name="sample")
		(stream<ProcessFileInfo> FileOut; stream<ProcessFileInfo> InvalidOut) as FileTypePrepare = Custom(FilesIn as FileIn) {
			logic
				state : mutable boolean isValid = false;
			onTuple
				FileIn: {
					// ------------------------------------------------
					// custom code begin
					// ------------------------------------------------

					// check file name and set file type attribute here
					<%my $i=0;my $ifstr; foreach (@fileTypes) { $ifstr=($i>0)?"else if":"if";%>
					<%=$ifstr%> (-1 != findFirst(FileIn.filenameOnly, "<%=$_%>")) {
						FileIn.fileType = "<%=$_%>";
						isValid = true;
					}
					<%$i++;}%>

					// ------------------------------------------------
					// custom code end
					// ------------------------------------------------
					if(isValid) {
						submit(FileIn, FileOut);
						isValid = false;
					} else {
						appTrc(Trace.error, "Unknown file type in file: "+FileIn.filename);
						FileIn.invalidFile = invalidFileType;
						submit(FileIn, InvalidOut);
					}
				}
			
			onPunct FileIn :
				if (currentPunct() == Sys.WindowMarker) submit(Sys.WindowMarker, FileOut);
		}

}
<%} #endif enabled%>
