// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=3;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	my $isEnabled = $configurator->isOn(Configurator::ITE_INGEST_CUSTOMFILECONTROL()) && $configurator->isOn(Configurator::ITE_EMBEDDEDSAMPLECODE());
%>
namespace demoapp.fileingestion.sample;

<%if (1 == $isEnabled) {%>

use demoapp.streams::*;
/**
 * Enables control over file acknowledgement signals send by the chain 
 * processors, once a file finished processing.
 * By delaying forwarding of these tuples you can control when a certain chain 
 * starts to process the next file from the filename input queue.
 * 
 * Caution: not forwarding these signals at all, will halt the application.
 *
 * Turn the **ite.ingest.customFileControl** parameter on to activate
 * this composite operator.
 * 
 * Do not throw any exceptions here. Use error traces only.
 * Every received tuple must be forwarded, sooner or later. Otherwise the 
 * corresponding chain will not continue file processing.
 * 
 * @input FileAckIn
 * Acknowledgement tuples for processed files. This port will not receive punctuations.
 * 
 * @input FilesInQueue
 * The files that are enqueued for processing. This can be used to determine the number of files
 * waiting in the queue.
 *
 * @output FileAckOut
 * Acknowledgement tuples for processed files.
 * 
 * @param numberOfChains
 * The number of Chainprocessors running in the application
 * 
 */
public composite FileControl (
	input 
		stream<TypesCommon.AcknowledgedFilesType> FileAckIn,
		stream<TypesCommon.FileIngestSchema> FilesInQueue;
	output
		stream<TypesCommon.AcknowledgedFilesType> FileAckOut
) {

	param
		expression<int32> $numberOfChains;

	graph

		(stream<TypesCommon.AcknowledgedFilesType> FileAckOut) as FileAckController = Custom(FileAckIn as In; FilesInQueue as FilesIn) {
			logic
			onTuple
				In: {
					// ------------------------------------------------
					// custom code begin
					// ------------------------------------------------

					// just print the ack tuple to stdout log
					println("Received ack: " + (rstring)In);
					
					// forward the ack tuple to allow processing of next file for this chain 
					submit(In,FileAckOut);
					
					// ------------------------------------------------
					// custom code end
					// ------------------------------------------------
				}
			onTuple
				FilesIn: {
					// ------------------------------------------------
					// custom code begin
					// ------------------------------------------------

					// just print the received file ingest tuple
					println("Received file: " + (rstring)FilesIn);
					
					// ------------------------------------------------
					// custom code end
					// ------------------------------------------------
				}	
		}
}
<%} #endif enabled%>
