/* begin_generated_IBM_copyright_prolog                             */
/*                                                                  */
/* This is an automatically generated copyright prolog.             */
/* After initializing,  DO NOT MODIFY OR MOVE                       */
/* **************************************************************** */
/* Licensed Materials - Property of IBM                             */
/* 5724-Y95                                                         */
/* (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.      */
/* US Government Users Restricted Rights - Use, duplication or      */
/* disclosure restricted by GSA ADP Schedule Contract with          */
/* IBM Corp.                                                        */
/*                                                                  */
/* end_generated_IBM_copyright_prolog                               */
/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
	// Initialization code goes here
	counter_ = 0;
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
	<%if ($model->getNumberOfOutputPorts() > 1) {%>
	switch(counter_ % <%=$model->getNumberOfOutputPorts()%>)
	{
	<% for(my $i=0; $i<$model->getNumberOfOutputPorts(); ++$i) { %>
		case <%=$i%>:
			submit(tuple,<%=$i%>);
			break;
		<% } %>
		default:
			break;
	}
	counter_++;
	<%} else {%>
	submit(tuple,0);
	<%}%>
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}

<%SPL::CodeGen::implementationEpilogue($model);%>

