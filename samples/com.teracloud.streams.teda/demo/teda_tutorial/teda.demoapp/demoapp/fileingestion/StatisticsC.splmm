// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use integer;
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=2;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	# -------------------------------------------------------------------------
	# Get mandatory application specific configuration parameters
	# -------------------------------------------------------------------------
	my $contextDisabled = $configurator->isOff(Configurator::ITE_BUSINESSLOGIC_GROUP());
%>
namespace demoapp.fileingestion;

use demoapp.streams::*;
use demoapp.functions::*;
use com.teracloud.streams.teda.internal.logfilewriter::LogFileWriter;

/**
 * Statistics
 * Writes file statistics of all chains to Statistic log
 * Sends FileAck to FileIngestion for successful processed files
 *
 * @input  ChainStat Final File Statistics from Chains
 * @input  DroppedFilesStat File Statistics from FileIngest
 * @output OutFileAck ack to Fileingestion<%if (0 == $contextDisabled) {%>
 * @output OutControl failed file control tuple<%}%>
 * 
 * @param statisticsDir Output directory for statistic files
 * @param statisticsArchiveDir Target directory for archived statistic files
 * @param iteJobName job name used as statistic file prefix
 * @param peNameStatWriter label used for partitionColocation placement
 * @param peExLocationLabel label used for partitionExlocation placement
 */
public composite StatisticsC ( 
	input 
		ChainFilesStat,
		DroppedFilesStat;
	output
		OutFileAck<%if (0 == $contextDisabled) {%>,
		OutControl<%}%>
)
{
	param
		expression<rstring> $statisticsDir;
		expression<rstring> $statisticsArchiveDir;
		expression<rstring> $iteJobName;
		expression<rstring> $peNameStatWriter;
		expression<rstring> $peExLocationLabel;

	graph

		// File Statistic Controller
		@spl_category(name="common")
		(stream<TypesCommon.AcknowledgedFilesType> OutFileAck;
		 <%if (0 == $contextDisabled) {%>stream<TypesCommon.FileControlType> OutControl;<%}%>
		 stream<IN> FileStats // forwards statistics to writer
		) = Custom(ChainFilesStat as IN) {
			logic
				onTuple IN : {					
					// assign attributes for acknowledge tuple
					mutable OutFileAck outTuple = {};
					outTuple.success = false;
					outTuple.filenameOnly=com.teracloud.streams.teda.file.path::filename(IN.filename);
					outTuple.reprocess=IN.reprocess;
					outTuple.filetime=IN.filetime;
					outTuple.groupId=IN.groupId;
					outTuple.chainId=IN.chainId; 
					if (0 == spl.collection::size(IN.errors)) {
						outTuple.success = true;
					}
					// ack to FileIngestion
					submit(outTuple,OutFileAck);
					
					<% if (0 == $contextDisabled) { %>
					if ((0 != spl.collection::size(IN.errors)) && (0l < IN.<%=CodeGenFrw::getConstant('STATISTIC_SEQUENCE_NUMBER')%>)) {
						// inform controller in case of tuples send through context and errors detected
						submit({failedFile=true},OutControl);
					}
					<% } %>

					submit(IN, FileStats); // forwards statistics to writer
				}
		}

		@spl_category(name="common")
		(
		 stream<IN> FileStatistics as OUT
		) = Custom(DroppedFilesStat,FileStats as IN) {
			logic
				onTuple IN : {
					submit(IN, OUT); // forwards statistics to writer
				}
			config
				placement : 
					partitionColocation($peNameStatWriter), partitionExlocation($peExLocationLabel);
		}


		// Statistics Metrics Writer
		@spl_category(name="common")
		() as StatMetricsWriter  = StatisticMetricsSink(FileStatistics) {
			config
				placement : 
					partitionColocation($peNameStatWriter);
		}

		// StatisticsWriter
		@spl_category(name="common")
		() as StatWriter  = LogFileWriter(FileStatistics) {
			param
				logFileName : $iteJobName + "_Statistics.txt";
				logDir : $statisticsDir;
				logArchiveDir : $statisticsArchiveDir; // move to archive dir on new day
				logFileSink: com.teracloud.streams.teda.internal.logfilewriter::TxtFileSink; // write txt format
			config
				placement : 
					partitionColocation($peNameStatWriter);
		}
}

