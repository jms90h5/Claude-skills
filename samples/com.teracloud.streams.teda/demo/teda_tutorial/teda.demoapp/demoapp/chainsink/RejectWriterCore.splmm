// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use integer;
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=2;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	# -------------------------------------------------------------------------
	# Get mandatory application specific configuration parameters
	# -------------------------------------------------------------------------
%>
namespace demoapp.chainsink;
use demoapp.streams::*;

/**
 * RejectWriterCore
 * Writes meta data of rejected records
 *
 * @input InChainRejectStream
 * Rejected tuples for Rejection File Sink
 * It is possible that more than one window punctuation is received per file,
 * because the InChainRejectStream is a combined stream from the many composites.
 * The following composites have an output port for tuple rejection:
 * <namespace>.chainsink::PostContextProcessorCore (if ite.businessLogic.transformation.postprocessing.custom=off)
 * <namespace>.chainprocessor.reader.custom::RecordValidator
 * <namespace>.chainprocessor.transfomer.custom::DataProcessor
 * <namespace>.chainsink.custom::PostContextDataProcessor (if ite.businessLogic.transformation.postprocessing.custom=on)
 * If ite.embeddedSampleCode is set to on, then the following composites are connected to this input port:
 * <namespace>.chainsink::PostContextProcessorCore (if ite.businessLogic.transformation.postprocessing.custom=off)
 * <namespace>.chainprocessor.reader.sample::RecordValidator
 * <namespace>.chainprocessor.transfomer.sample::DataProcessor
 * <namespace>.chainsink.sample::PostContextDataProcessor (if ite.businessLogic.transformation.postprocessing.custom=on)
 * 
 * @param rejectedRecordsDir
 * Output directory of rejection files
 */
public composite RejectWriterCore ( 
	input 
		InChainRejectStream
)
{
	param
		expression<rstring> $rejectedRecordsDir;

	graph

		@spl_category(name="common")
		(stream<InChainRejectStream> RejectStream
		) = Filter(InChainRejectStream) {
			param
				filter: filename != "";
		}

		@spl_category(name="common")
		() as RejSink = FileSink(RejectStream) {
			logic
				state : {
					rstring dir = $rejectedRecordsDir; // prevents submission code to be called when using directory param
					boolean dirOk = com.teracloud.streams.teda.internal.fileutils::createDir(dir);
				}
			param
				file : dir + "/" + filename + ".rej.csv";
				format: csv;
				flushOnPunctuation: true;
				closeMode: dynamic; // closeMode punct is not possible since there are many composites connected to this stream running in different threads. We accept many window punctuation here.
				append: false;
				quoteStrings : true;
				suppress: filename;
		}

}
