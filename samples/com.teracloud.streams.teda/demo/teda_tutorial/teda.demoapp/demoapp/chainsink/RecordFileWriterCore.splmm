// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use integer;
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=2;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	my $tapEnabled = $configurator->isOn(Configurator::ITE_BUSINESSLOGIC_SINK_DEBUG());

	my $isEnabled = 0;

	my $ENABLE_CUSTOM_CODE = $configurator->isOff(Configurator::ITE_EMBEDDEDSAMPLECODE());
	my $CHAIN_SINK_TYPE = $configurator->getEnum(Configurator::ITE_STORAGE_TYPE());
	if ((1 == $CHAIN_SINK_TYPE) || ((0==$ENABLE_CUSTOM_CODE) && (2==$CHAIN_SINK_TYPE))) {
		$isEnabled = 1;
	}

	# suppress FileInfo Schema attributes
	my $suppressedAttributes = "filename, fileType, readerLinenumber, readerInvalidLineInd, readerInvalidPayload, readerInvalidMessage, chainPunct, groupId, chainId";
%>
namespace demoapp.chainsink;

<%if (1 == $isEnabled) {%>
use demoapp.streams::*;
use demoapp.functions::*;
use com.teracloud.streams.teda.internal.fileutils::createDir;

/**
 * RecordFileWriterCore
 * Simple record writer implements a single file sink.
 * Window punctuation and statistic tuple must be received before statistic tuple is forwarded.
 *
 * @input  InRecords Records for file sink(s) or other sink(s)
 * @input  InStat Statistic tuple to be updated
 *
 * @output OutStat Statistic tuples
 *
 * @param outputDir
 * Directory of output files to be written
 *
 * @param commitDir
 * Output directory of committed record files
 * 
 * @param groupId 
 * Name of groupID
 * 
 * @param chainId 
 * Name of chainID 
 */
public composite RecordFileWriterCore (
	input 
		stream<TypesCommon.ChainSinkStreamType> InRecords,
		stream<TypesCommon.FileStatistics> InStat;
	output
		stream<TypesCommon.FileStatistics> OutStat
)
{
	param
		expression<rstring> $outputDir;
		expression<rstring> $commitDir;
		expression<rstring> $groupId;
		expression<rstring> $chainId;

	graph

		<% if($tapEnabled) {%>
		@spl_category(name="debug")
		() as CustomRecordWriterInputSink = FileSink (InRecords) {
			logic state : boolean dirOk = createDir(dataDirectory() + "/debug");
			param	file	: "./debug/SINK_FILE_WRITER_IN_"+$groupId+"_"+$chainId+".txt";
					format	: txt;
					flush : 1u;
					writePunctuations: true;
		}
		@spl_category(name="debug")
		() as CustomRecordWriterStatInputSink = FileSink (InStat) {
			logic state : boolean dirOk = createDir(dataDirectory() + "/debug");
			param	file	: "./debug/SINK_FILE_WRITER_STAT_IN_"+$groupId+"_"+$chainId+".txt";
					format	: txt;
					flush : 1u;
					writePunctuations: true;
		}
		<% } %>

		@spl_category(name="common")
		(
		stream<InRecords> TupleToWrite as Out;
		stream<InStat> OutStat
		) = Custom(InRecords; InStat) {
			logic
				state : {
					rstring outputDir = $outputDir; // prevents submission code to be called when using directory param
					rstring commitDir = $commitDir; // prevents submission code to be called when using directory param
					boolean ok = createDir(commitDir);
					mutable uint64 tuplesWritten = 0ul;
					mutable	boolean isPunctReceived = false;
					mutable boolean isStatReceived = false;
					mutable InStat queuedStat = {};
				}
				onTuple InRecords: {
					// Update Statistics here
					
					tuplesWritten++;

					// forward to Sink
					submit(InRecords, Out);
				}
				onPunct InRecords: {
					if (currentPunct() == Sys.WindowMarker){
						// flush/close table files
						submit(Sys.WindowMarker, Out);

						// send statistics if received before punct
						if (isStatReceived) {
							// commit before sending statistic tuple
							if (0 == spl.collection::size(queuedStat.errors)) {
								if (0ul < tuplesWritten) {
									if (0 != commitFile(queuedStat.filename, outputDir, commitDir)) {
										appendM(queuedStat.errors, "COMMIT FAILED");
									}
								}
							}
							// forward statistic tuple
							submit(queuedStat, OutStat);
							// reset
							isPunctReceived = false;
							isStatReceived = false;
							tuplesWritten = 0ul;
						}
						else {
							isPunctReceived = true;
						}
					}
				}
				onTuple InStat : {
					// punct must be received before forwarding statistic tuple
					if (isPunctReceived) {
						// commit before sending statistic tuple
						if (0 == spl.collection::size(InStat.errors)) {
							if (0ul < tuplesWritten) {
								if (0 != commitFile(InStat.filename, outputDir, commitDir)) {
									appendM(InStat.errors, "COMMIT FAILED");
								}
							}
						}
						// forward statistic tuple
						submit(InStat, OutStat);
						// reset
						isPunctReceived = false;
						isStatReceived = false;
						tuplesWritten = 0ul;
					}
					else {
						// enqueue statistic tuple
						queuedStat = InStat;
						isStatReceived = true;
						// do not forward statistic tuple here
					}
				}
		}

		@spl_category(name="common")
		() as RecordFileSink = FileSink(TupleToWrite) {
			logic
				state : {
					rstring outputDir = $outputDir; // prevents submission code to be called when using directory param
				}
			param
				file :  outputDir + "/" + filename +".csv";
				format: csv;
				flushOnPunctuation: true;
				closeMode: punct;
				append: false;
				quoteStrings : false;
				suppress: <%=$suppressedAttributes%>;
		}
}

stateful int32 commitFile(rstring filename, rstring outputDir, rstring commitDir)
{
	mutable rstring stripFilename=com.teracloud.streams.teda.file.path::filename(filename);
	mutable int32 err=0;
	rstring sourcePath= outputDir + "/" + stripFilename+".csv";
	rstring destPath = commitDir + "/" + stripFilename+".csv";
	// rename dir
	com.teracloud.streams.teda.file::rename(sourcePath, destPath, err);
	if(err!=0) {
		appTrc(Trace.error, "Could not rename file '" + sourcePath+"' to '"+destPath+"': " + (rstring)err);
	}
	return err;
}

<%} #endif enabled%>
