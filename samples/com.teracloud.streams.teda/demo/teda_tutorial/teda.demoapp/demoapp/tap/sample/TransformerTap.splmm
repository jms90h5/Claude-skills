// begin_generated_IBM_copyright_prolog                            
//                                                                 
// This is an automatically generated copyright prolog.            
// After initializing,  DO NOT MODIFY OR MOVE                      
// ****************************************************************
// Licensed Materials - Property of IBM                            
// 5724-Y95                                                        
// (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.     
// US Government Users Restricted Rights - Use, duplication or     
// disclosure restricted by GSA ADP Schedule Contract with         
// IBM Corp.                                                       
//                                                                 
// end_generated_IBM_copyright_prolog                              
// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     
// All Rights Reserved.                                             
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 
<% # Switch to Perl scripting mode
	use integer;
	use File::Basename ;
	use File::Spec::Functions qw(catfile catdir) ;
	use FindBin;
	my $toProj=3;
	my $projDir = dirname(__FILE__);
	for (my $i = 0; $i<$toProj; $i++) {
		$projDir=dirname($projDir);
		$projDir=~s/\/$//;
	}
	unshift @INC, catdir($projDir,"scripts");
	require Configurator;
	require CodeGenFrw;
	my $configurator = new Configurator(directory => "$projDir", selector => Configurator::ParameterSet::ITE());

	# -------------------------------------------------------------------------
	# Get mandatory application specific configuration parameters
	# -------------------------------------------------------------------------
	my $ENABLE_CUSTOM_CODE = $configurator->isOff(Configurator::ITE_EMBEDDEDSAMPLECODE());
%>
namespace demoapp.tap.sample;

<%if (0 == $ENABLE_CUSTOM_CODE) {%>
use demoapp.streams::*;

/**
 * TransformerTap
 * Custom composite thats receives the bundled output of all Chainprocessor.Transformer chains.
 *
 * @input  InData Tap stream from Transformer
 *
 * @param outDir
 * Directory of output files
 */
public composite TransformerTap (input InData)
{
	param
		expression<rstring> $outDir;

	type
		/**
		 * The type of Transformer output bundles
		 * TAP_TRANSFORMER_OUTPUT_FOR_BUNDLE=1
		 * Type is used in TypesCommon
		 */
		static BundledTransformerOutputStreamType = tuple<
			// ------------------------------------------------
			// custom code begin
			// ------------------------------------------------
			rstring filename
			// ------------------------------------------------
			// custom code end
			// ------------------------------------------------
		>;

	graph

		// Dummy code
		@spl_category(name="sample")
		() as CustomTransfTap = Custom(InData as I) {
			logic
				onTuple I : {
				}
		}

}
<%} #endif enabled%>
