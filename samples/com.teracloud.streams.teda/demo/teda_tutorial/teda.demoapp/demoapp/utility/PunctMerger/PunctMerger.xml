<?xml version="1.0" encoding="UTF-8"?>
<!-- begin_generated_IBM_copyright_prolog                             -->
<!--                                                                  -->
<!-- This is an automatically generated copyright prolog.             -->
<!-- After initializing,  DO NOT MODIFY OR MOVE                       -->
<!-- **************************************************************** -->
<!-- Licensed Materials - Property of IBM                             -->
<!-- 5724-Y95                                                         -->
<!-- (C) Copyright IBM Corp.  2011, 2025    All Rights Reserved.      -->
<!-- US Government Users Restricted Rights - Use, duplication or      -->
<!-- disclosure restricted by GSA ADP Schedule Contract with          -->
<!-- IBM Corp.                                                        -->
<!--                                                                  -->
<!-- end_generated_IBM_copyright_prolog                               -->
<!-- begin_generated_IBM_Teracloud_ApS_copyright_prolog               -->
<!--                                                                  -->
<!-- This is an automatically generated copyright prolog.             -->
<!-- After initializing,  DO NOT MODIFY OR MOVE                       -->
<!-- **************************************************************** -->
<!-- Licensed Materials - Property of IBM                             -->
<!-- (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2023, 2023     -->
<!-- All Rights Reserved.                                             -->
<!-- US Government Users Restricted Rights - Use, duplication or      -->
<!-- disclosure restricted by GSA ADP Schedule Contract with          -->
<!-- IBM Corp.                                                        -->
<!--                                                                  -->
<!-- end_generated_IBM_Teracloud_ApS_copyright_prolog                 -->
<operatorModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
      <description>
The *PunctMerger* operator sends a window punctuation on its output port
if at least one window punctuation is received on each input port. Tuples
are forwarded as they come.

The *PunctMerger* operator does *not* block input ports, that already
received window punctuations. That means, extra punctuations will be
ignored, tuples are forwarded, and, if an application relies on blocked
input ports, an upstream control logic is required to ensure that no further
tuples are sent after a window punctuation on a given port until all
other ports have processed their corresponding window punctuations.

All ports must have the same streams schema.
      </description>
      <iconUri size="16">punctMerger_16.gif</iconUri>
      <iconUri size="32">punctMerger_32.gif</iconUri>
      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
      <codeTemplates>
       <codeTemplate name="PunctMerger">
         <description>Basic template which joins worker chains into a single stream with PunctMerger operator</description>
         <template><![CDATA[
stream<${InputStream}_0> ${OutputStream} = PunctMerger(${InputStream}_0; ${InputStream}_1; ${InputStream}_2; ${InputStream}_3) {}${cursor}
]]></template>
        </codeTemplate>
      </codeTemplates>
    </context>
    <parameters>
      <allowAny>false</allowAny>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Expecting</windowPunctuationInputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
      <inputPortOpenSet>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Expecting</windowPunctuationInputMode>
      </inputPortOpenSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <expressionMode>Nonexistent</expressionMode> 
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>false</rewriteAllowed>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
