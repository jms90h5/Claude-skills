// begin_generated_Teracloud_ApS_copyright_prolog                   
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS MAKES NO REPRESENTATIONS OR WARRANTIES,            
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION           
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL TERACLOUD APS BE LIABLE 
// TO ANY PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL 
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025                           
// All Rights reserved.                                             
//                                                                  
// end_generated_Teracloud_ApS_copyright_prolog                     
namespace com.teracloud.streams.cybersecurity.sample ;

use com.teracloud.streams.cybersecurity.tagging::BWListTagger ;
use com.teracloud.streams.cybersecurity.types::* ;
use com.teracloud.streams.network.ipv4::* ;

public composite BWListTaggerIPv4NumericList
{
	graph
		(stream<list<rstring> ips, rstring extra> SrcStream) as
			SrcOp = FileSource()
		{
			param
				file : getThisToolkitDir() + "/opt/input_ipv4_vec.txt" ;
			output
				SrcStream : extra = "abcdef" ;
		}

		(stream<list<IPv4> ips, rstring extra> IPStrToNumStream) as IPStrToNumOp =
			Functor(SrcStream)
		{
			output
				IPStrToNumStream : ips = convertIPV4AddressStringsToNumerics(ips) ;
		}

		(stream<list<IPv4> ips, rstring extra, list<BWListTag_e> ipTags>
			TaggedStream) as BWTaggerOp = BWListTagger(IPStrToNumStream
			as inPort0Alias)
		{
			param
				ipAttr : ips ;
				blockIPFile : getThisToolkitDir() + "/opt/bwlist/IPBlockList.txt" ;
				allowIPFile : getThisToolkitDir() + "/opt/bwlist/IPAllowList.txt" ;
				blockDomainFile : getThisToolkitDir() + "/opt/bwlist/DomainsBlockList.txt" ;
				allowDomainFile : getThisToolkitDir() + "/opt/bwlist/DomainsAllowList.txt" ;
			output
				TaggedStream : ipTags = getIPTags() ;
		}

		() as Printer = Custom(IPNumToStrStream as inPort0Alias)
		{
			logic
				onTuple inPort0Alias : println(inPort0Alias) ;
		}

		(stream<list<rstring> ips, rstring extra, list<BWListTag_e> ipTags>
			IPNumToStrStream) as IPNumToStrOp = Functor(TaggedStream)
		{
			output
				IPNumToStrStream : ips = convertIPV4AddressNumericsToStrings(ips) ;
		}

}
