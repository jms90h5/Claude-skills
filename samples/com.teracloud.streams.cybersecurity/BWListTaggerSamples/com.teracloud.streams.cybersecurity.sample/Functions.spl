// begin_generated_Teracloud_ApS_copyright_prolog                   
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS MAKES NO REPRESENTATIONS OR WARRANTIES,            
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION           
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL TERACLOUD APS BE LIABLE 
// TO ANY PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL 
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025                           
// All Rights reserved.                                             
//                                                                  
// end_generated_Teracloud_ApS_copyright_prolog                     
namespace com.teracloud.streams.cybersecurity.sample;

use com.teracloud.streams.network.ipv6::* ;
use com.teracloud.streams.network.ipv4::* ;

type
	IPv4 = uint32;

type
	IPv6 = list<uint8>[16];
	
type
	Domain = rstring;

list<IPv6> convertIPV6AddressStringsToNumerics(list<rstring> addresses)
{
	mutable list<IPv6> ipList = [ ] ;
	for(rstring ip in addresses)
	{
		appendM(ipList, convertIPV6AddressStringToNumeric(ip)) ;
	}

	return ipList ;
}

list<rstring> convertIPV6AddressNumericsToStrings(list<IPv6> addresses)
{
	mutable list<rstring> strList = [ ] ;
	for(IPv6 ip in addresses)
	{
		appendM(strList, convertIPV6AddressNumericToString(ip)) ;
	}

	return strList ;
}

list<IPv4> convertIPV4AddressStringsToNumerics(list<rstring> addresses)
{
	mutable list<IPv4> ipList = [ ];
	for(rstring ip in addresses) 
	{
		appendM(ipList, convertIPV4AddressStringToNumeric(ip));
	}
	
	return ipList;
}

list<rstring> convertIPV4AddressNumericsToStrings(list<IPv4> addresses)
{
	mutable list<rstring> strList = [ ];
	for(uint32 ip in addresses)
	{
		appendM(strList, convertIPV4AddressNumericToString(ip));
	} 
	
	return strList;
}
