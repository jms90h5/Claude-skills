// begin_generated_Teracloud_ApS_copyright_prolog                   
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS MAKES NO REPRESENTATIONS OR WARRANTIES,            
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION           
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL TERACLOUD APS BE LIABLE 
// TO ANY PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL 
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025                           
// All Rights reserved.                                             
//                                                                  
// end_generated_Teracloud_ApS_copyright_prolog                     
namespace com.teracloud.streams.cybersecurity.sample ;

use com.teracloud.streams.network.parse::* ;
use com.teracloud.streams.network.source::* ;
use com.teracloud.streams.cybersecurity.types::* ;

composite DPSrc(output DNSMsgParser_Stream )
{
	param
		expression<rstring> $directory ;
		expression<rstring> $pattern : "" ;
		expression<rstring> $filterExpression : "udp port 53" ;
		expression<float64> $initDelay : 0f ;
	graph
		(stream<rstring filename> DirScan_Stream) as DirScan = DirectoryScan()
		{
			param
				directory : $directory ;
				pattern : $pattern ;
				initDelay : $initDelay ;
		}

		(stream<PacketType> PktFileSrc_Stream) as PktFileSrc =
			PacketFileSource(DirScan_Stream)
		{
			param
				inputFilter : $filterExpression ;
				metricsInterval : 0.0 ;
			output
				PktFileSrc_Stream : captureTime = createTimestamp((int64)
					CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u), dstAddress =
					IPV4_DST_ADDRESS(), dnsMessage = PAYLOAD_DATA() ;
		}

		(stream<DPDNSResponseMessage_t> DNSMsgParser_Stream) as DNSMsgParser =
			DNSMessageParser(PktFileSrc_Stream)
		{
			param
				messageAttribute : dnsMessage ;
				outputFilters : DNS_RESPONSE_FLAG() && DNS_RESPONSE_CODE() != 0ub && ! parseError() ;
			output
				DNSMsgParser_Stream : questionName = DNS_QUESTION_NAME(), responseCode =
					DNS_RESPONSE_CODE();
		}

}


