// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use com.teracloud.streams.timeseries.analysis::FFT;

composite FFTMain {
	// Do the type definitions for the tuples and other data structures that will be used by this composite.
	type
		ecgRawInput = tuple<float64 patientId, list<float64> real, list<float64> imag, float64 ecgValue>;
		fftResult = tuple<list<complex64> fft, list<float64> magnitude, list<float64> power>;

	// Define the application sub-graph in this composite.
	graph
	
		// read ecg records as a list of values. 
		stream <float64 id, list<float64> ecgValue> EcgRawInputRecord = FileSource() 
		{
			param
				file: "ts.csv";
				format: csv;	
		}
		
		stream<fftResult> FftResultRecord = FFT(EcgRawInputRecord) {
			
			param
				inputTimeSeries: ecgValue;
				useHamming: true;
				resolution:1024u;
				algorithm: complexFFT;
			
			output
				FftResultRecord: fft=FFTAsComplex(),
				magnitude=magnitude(),
				power=power();
		} 
		() as PowerSink = FileSink(FftResultRecord) {
			param
				file: "FFT-result-Records.csv";
				format: csv;
				
		} 
		
		// read a sine wave a show the FFT wth timestamp in milliseconds
		stream <float64 timestampp, float64 sine> sineStream = FileSource() 
		{
			param
				file: "harmonics.csv";
				format: csv;	
		}
		
		// gather sliding window data to simulate short-term fourier analysis
		
		
		// compute the magnitude spectrum
		stream<list<float64> magnitude>  spectrogramStream = FFT(sineStream) {
			
			window
			  sineStream:
			  	sliding, count(128), count(10);
			  	
			param
				inputTimeSeries: sine;
				useHamming: true;
				resolution:128u;
				algorithm: complexFFT;
			
			output
			spectrogramStream:
				magnitude=magnitude();
		} 
		
		
		() as PowerSink2 = FileSink(spectrogramStream) {
			param
				file: "spectrogram.csv";
				format: csv;
				
		} 
		config
			logLevel: error;
}
