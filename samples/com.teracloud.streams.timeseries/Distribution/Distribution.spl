// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 


use com.teracloud.streams.timeseries.analysis::Distribution;

/* This demo shows distribution operator applied to average traffic speed */
composite DistributionMain
{
	graph
	stream<uint64 Timestamp, float64 KPI> inpStream=FileSource()
	{
		param
			file:"inputAverageSpeed.csv";
	}
	stream<uint64 Timestamp,float64 smallestNonOutlier,float64 largestNonOutlier,float64 firstQuartile, float64 med, float64 thirdQuartile,list<float64> distributionOfSpeed> quartilesStream= Distribution(inpStream)
	{
		window inpStream:
			sliding , count(1);
		param
			inputTimeSeries:KPI;
			
		output
			quartilesStream:med=distMedian(),
			distributionOfSpeed=distribution(),
			largestNonOutlier=largestNonOutlier(),
			smallestNonOutlier=smallestNonOutlier(),
			firstQuartile=firstQuartile(),
			thirdQuartile=thirdQuartile();
	}
	() as writeOutput=FileSink(quartilesStream)
	{
		param
			file:"output.csv";
	}
}
