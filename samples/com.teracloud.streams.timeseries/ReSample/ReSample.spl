// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use com.teracloud.streams.timeseries.preprocessing::ReSample;



composite ReSampleMain {
    graph

    stream<float64 data, uint64 Timestamp> GenerateTimeSeries = FileSource() {
        param
           file : "tsList.dat";
           format:csv;
    }

    stream <list<float64> newSignal> CalculateReSample = ReSample(GenerateTimeSeries) {
        window
            GenerateTimeSeries: tumbling,count(11);
        param
            inputTimeSeries: data;
            samplingRate: 8u;
            newSamplingRate: 16u;
            inputTimestamp: Timestamp;
        output
            CalculateReSample:
                newSignal=reSampledTimeSeries();
    }

    // expand the result list to get back a series of float64
    stream <float64 data> Resampled = Custom (CalculateReSample as I) {
        logic onTuple I: {
            mutable int32 i = 0;
            int32 sz = size (I.newSignal);
            while (i < sz) {
                submit ({data = I.newSignal[i++]}, Resampled);
            }
        }
    }

    () as writer = FileSink(Resampled) {
        param
            file : "reSampleResults.dat";
            format: csv;
    }

    config
        logLevel:error;
}
