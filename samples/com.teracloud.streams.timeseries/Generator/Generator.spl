// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use com.teracloud.streams.timeseries.generators::Generator;

composite GeneratorMain {
	graph
	stream<float64 data> GenerateSineWaveStream = Generator() {
            param
				samplingRate:   60u; 
				frequency:      3.0;
				iterations:10u;
				typeOfSignal:           sine;
		output
				GenerateSineWaveStream:
				data=generatedTimeSeries();	   
       }
						
		   
	() as writer1 = FileSink(GenerateSineWaveStream) {
            param
                file : "sineWave.result";
                format: csv;
	}
	stream<float64 data> GenerateTriangulareWaveStream = Generator() {
            param
				samplingRate:   60u;
				frequency:      3.0;
				iterations:10u;
				typeOfSignal:           triangular;
		output
				GenerateTriangulareWaveStream :
				data=generatedTimeSeries();
				 
       }
						
		   
	() as writer2 = FileSink(GenerateTriangulareWaveStream) {
            param
                file : "triangularWave.result";
                format: csv;
	}
	
	stream<list<float64> data> GenerateSawToothWaveStream = Generator() {
            param
				samplingRate:   60u;
				frequency:      3.0;
				initDelay: 1.0;
				iterations:10u;
				typeOfSignal:           sawtooth;
		output
				GenerateSawToothWaveStream :
				data=generatedTimeSeries();	   
       }
						
		   
	() as writer3 = FileSink(GenerateSawToothWaveStream) {
            param
                file : "sawToothWave.result";
                format: csv;
	}

	stream<float64 data> GeneratePulseTrainWaveStream = Generator() {
            param
				samplingRate:   60u;
				initDelay: 6.0;
				frequency:      3.0;
				humpSize: 1.0;
				iterations:10u;
				typeOfSignal:           pulsetrain;
		output
				GeneratePulseTrainWaveStream :
				data=generatedTimeSeries();	   
       }
						
		   
	() as writer4 = FileSink(GeneratePulseTrainWaveStream) {
            param
                file : "pulsetrainWave.result";
                format: csv;
	}

	    
	

}


