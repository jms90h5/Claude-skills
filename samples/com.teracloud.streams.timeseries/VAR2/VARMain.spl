// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use com.teracloud.streams.timeseries.modeling::VAR2;

composite VARMain 
{
	graph
        // get 5 key perfomance indicators (kpi)
        // we will use the VAR to provide a join prediction of all 5 kpis (single-step prediction)
	stream<float64 kpi1, float64 kpi2, float64 kpi3, float64 kpi4, float64 kpi5>  kpiIp = FileSource()
	{
		param
			file:"kpidata.dat";			
	}

       // gather kpis  in list as requested by the time series toolkit 
	stream<list<float64> kpis> kpiStreams = Functor(kpiIp) 
       {
      
         output kpiStreams:
	     kpis =[kpi1, kpi2, kpi3, kpi4, kpi5];

       }
       //  send the kpis to the VAR for prediction (single-step)
	stream<list<float64> kpi, list<float64> predictions> varOut = VAR2(kpiStreams)
	{
		param
			inputTimeSeries:kpis;
			initSamples:500u;  // use first 500 samples to train VAR
		        order: 10u; // use 10 sample-lag for autogressive function of VAR
			updateTupleCount:1000u; // retrain every 1000 samples
		output
			varOut: predictions=predictedTimeSeries();
	}
	() as FlSnk=FileSink(varOut)
	{
		param
			file:"kpipredictions.dat";
	}
}
