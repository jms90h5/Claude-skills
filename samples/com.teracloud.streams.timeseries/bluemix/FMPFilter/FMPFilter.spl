// begin_generated_IBM_Teracloud_ApS_copyright_prolog               
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS.                
// TERACLOUD APS AND IBM MAKES NO REPRESENTATIONS OR WARRANTIES,    
// EXPRESS OR IMPLIED, CONCERNING  USE OF THE SAMPLE CODE, OR THE   
// COMPLETENESS OR ACCURACY OF THE SAMPLE CODE. TERACLOUD APS       
// AND IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE OPERATION   
// OF THIS SAMPLE CODE. TERACLOUD APS AND IBM IS NOT RESPONSIBLE FOR THE 
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright Teracloud ApS 2024, 2025, IBM Corp. 2012, 2015     
// All Rights reserved.                                             
//                                                                  
// end_generated_IBM_Teracloud_ApS_copyright_prolog                 

use com.teracloud.streams.timeseries.modeling::FMPFilter;

composite FMPFilterMain {
    graph
    stream<rstring tstamp, float64 price, float64 s1, float64 s2, float64 s3, float64 s4, float64 s5> prices = FileSource() {
      param
        file : getThisToolkitDir()  + "/opt/stock.csv";
        format : csv;
    }
    

    stream<float64 price, float64 prediction, boolean flags, float64 variances> predictedStream = FMPFilter(prices) {
      param
        inputTimeSeries: price;
        degree: 2u;
        memoryLength: 25u;   
        integration: 3u;        
        thresholdFactor: 1.5u;
        maxDimension: 25u;
        //cleanFrom: 10u;
      output
        predictedStream: prediction=predictedTimeSeries(), flags=anomalousFlags(), variances=variance();
    }

    // write to stdout log; log can be retrieved from bluemix via application console
    () as stdoutLog1 = Custom (predictedStream) {
        logic onTuple predictedStream: {
            mutable rstring out = (rstring) predictedStream;
            printStringLn (out);
            flushStdio();
        }
    }

    () as SinkOp1 = FileSink(predictedStream) {
      param
        file : "/tmp/predictedPrices.csv";
        format : csv;
        flush : 1u;
        writePunctuations : true;
    }




    //Application2: anomaly detection on computer memory usage patterns.

    stream<rstring tstamp, list<float64> inputdata> datacenter = FileSource() {
      param
        file : getThisToolkitDir()  + "/opt/datacenter.csv";
        initDelay: 30.0;
        format : csv;
    }


    stream<list<float64> inputdata, list<float64> prediction, list<boolean> flags> predictedData = FMPFilter(datacenter) {
      param
        inputTimeSeries: inputdata;
        degree: 2u;
        memoryLength: 50u;   
        integration: 3u;        
        thresholdFactor: 2.5u;
        maxDimension: 25u;
        //cleanFrom: 10u;
      output
        predictedData: prediction=predictedTimeSeries(), flags=anomalousFlags();
    }

    // write to stdout log; log can be retrieved from bluemix via application console
    () as stdoutLog2 = Custom (predictedData) {
        logic onTuple predictedData: {
            mutable rstring out = (rstring) predictedData;
            printStringLn (out);
            flushStdio();
        }
    }

    () as SinkOp2 = FileSink(predictedData) {
      param
        file : "/tmp/predictedData.csv";
        format : csv;
        flush : 1u;
        writePunctuations : true;
    }

  config
    logLevel : error;
}
