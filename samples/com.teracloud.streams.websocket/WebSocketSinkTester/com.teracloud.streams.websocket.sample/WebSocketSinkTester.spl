/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2020
==============================================
*/

/*
==============================================
First created on: Apr/30/2020
Last modified on: Aug/31/2020

This example demonstrates the use of the WebSocketSink operator available
in the websocket toolkit. This sink  operator internally runs a WebSocket server 
so that remote WebSocket clients can connect to it. This operator can receive
text (plain text, JSON, XML) and/or binary data in its first input port and then
send that text and/or binary data to all the remote WebSocket clients that are
connected to this operator at that time. This operator allows the remote
WebSocket clients to connect via plain (ws/http) or secure (wss/https) endpoints.

[
In this example, we also show how to do mutual authentication
i.e. client and server authentication. In the C++ based WebSocketSendReceive
client operator, we show the use of the trusted server's public certificate and
the client's private key and its public certificate. In a C++ WebSocketSink operator,
we show how it uses the client's public certificate to do the peer verification.
]

You can build this example from command line via the make command by using the
Makefile available in the top-level directory of this example. Inside that
Makefile, it will be necessary to export the STREAMS_WEBSOCKET_TOOLKIT 
environment variable by pointing it to the full path of your 
websocket/com.teracloud.streams.websocket directory.

In order to test this application, you must first compile and run one or more copies
of another companion application named "WebSocketClientApp" available inside this 
example directory. When that application is run, it will keep attempting to open a 
WebSocket connection to the (server based) WebSocketSink sink operator shown in the 
application code below to start receiving data. After running that companion 
application, you can then run this particular application below to accept connections 
from the one or more copies of the companion application and send (sink) the data to them.

NOTE: There is a run-ws-sink-test.sh script available in the etc sub-directory of this
example project. That convenience script can be modified to suit your needs and run
this application along with 24 other test client applications running on three different
Streams instances. That will test the WebSocketSink operator in a scalabble way.
==============================================
*/
namespace com.teracloud.streams.websocket.sample;

// We will use the WebSocketSink operator from this namespace. 
use com.teracloud.streams.websocket.op::*;

// This is the main composite for this application.
composite WebSocketSinkTester {
	param
		// WebSocket connectivity related submission time values are defined below.
		// TLS port on which this application will listen for
		// communicating with the remote WebSocket clients.
		expression<uint32> $tlsPort : 
			(uint32)getSubmissionTimeValue("tlsPort", "8443");
		// User can optionally specify whether they want a non-TLS endpoint.
		expression<boolean> $nonTlsEndpointNeeded : 
			(boolean)getSubmissionTimeValue("nonTlsEndpointNeeded", "false");
		// Non-TLS (Plain) port on which this application will
		// (optionally) listen for communicating with the remote WebSocket clients.
		expression<uint32> $nonTlsPort : 
			(uint32)getSubmissionTimeValue("nonTlsPort", "8080");
		// Do you want to use a specific URL context path for the WebSocketSink operator?
        // It can either be a single or a multi-part path.
        // e-g: Orders (OR) MyServices/Banking/Deposit
        // With that example, WebSocket server URL should either be 
        // https://host:port/Orders   (OR)
        // https://host:port/MyServices/Banking/Deposit
        // Default is an empty list to indicate no url context path.
        // You can expose any number of context paths for the 
        // remote clients to access this WebSocket server endpoint. 
        // e-g: []    (OR)    ['Orders', '', 'MyServices/Banking/Deposit']
		expression<list<rstring>> $urlContextPath : (list<rstring>)
			getSubmissionTimeValue("urlContextPath", "[]");
		// Server side certificate (.pem) file for the WebSocket server.
		// It is necessary for the users to create a Root CA signed 
		// server side certificate file and point to that file at the time of
		// starting this application. If the user doesn't point to this file
		// at the time of starting the application, then the application will
		// look for a default file named ws-server.pem inside the etc sub-directory
		// of the application. This certificate will be presented to the
		// remote client for validation when it establishes a WebSocket 
		// connection with this application. For doing quick tests, you may save
		// time and effort needed in getting a proper Root CA signed certificate 
		// by going with a simpler option of creating your own self-signed 
		// certificate. Please ensure that using a self-signed certificate is 
		// allowed in your environment. We have provided a set of instructions to
		// create a self signed certificate. Please refer to the following
		// file in the etc sub-directory of this application:
		// etc/creating-a-self-signed-certificate.txt
		expression<rstring> $certificateFileName :
			getSubmissionTimeValue("certificateFileName", "");
		// Is a password needed for the private key in the certificate file?
		expression<rstring> $certificatePassword : 
			getSubmissionTimeValue("certificatePassword", "");
		// Do you want to specifiy a file name that contains the public certificates of
		// the trusted client(s). If this file name is not empty, then the
		// WebSocketSink operator will perform a client (mutual) authentication.
		expression<rstring> $trustedClientCertificateFileName :
			getSubmissionTimeValue("trustedClientCertificateFileName", "");	
		// Do you want to specify a list of identifiers present in the 
		// trusted client's X509 certificate's subject line. If that certificate is
		// self signed, then it will help during the client (mutual) authentication to approve
		// that client's identity as a known one.
		// 
		// Following are some examples of the subject line as it appears in an X509 public certificate.
		// /C=US/ST=NY/L=Yorktown Heights/O=IBM/OU=AI/CN=websocket.streams/emailAddress=websocket.streams@ibm.com
		// /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
		// /C=BE/O=GlobalSign nv-sa/CN=GlobalSign CloudSSL CA - SHA256 - G3
		// /C=US/O=Google Trust Services/CN=GTS CA 1O1
		// /C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
		// /C=US/ST=New York/L=Armonk/O=IBM/CN=www.ibm.com
		//
		// So your value for this submission time parameter can be as shown here.
		// ['emailAddress=websocket.streams@ibm.com', 'CN=www.ibm.com']
		expression<list<rstring>> $trustedClientX509SubjectIdentifiers :
			(list<rstring>)getSubmissionTimeValue("trustedClientX509SubjectIdentifiers", "[]");	
		// Is live metrics needed for the WebSocketSink operator?
		expression<boolean> $websocketLiveMetricsUpdateNeeded : 
			(boolean)getSubmissionTimeValue("websocketLiveMetricsUpdateNeeded", "true");
		// Is WebSocket library low level logging needed?
		expression<boolean> $websocketLoggingNeeded : 
			(boolean)getSubmissionTimeValue("websocketLoggingNeeded", "false");
		// Is WebSocket client connection logging needed?
		expression<boolean> $wsConnectionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsConnectionLoggingNeeded", "false");
		// Is client message exchange logging needed for debugging?
		expression<boolean> $wsClientSessionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsClientSessionLoggingNeeded", "false");
		// NOTE: In most application scenarios, this feature will not be used at all.
		expression<uint32> $websocketStaleConnectionPurgeInterval :(uint32)
			getSubmissionTimeValue("websocketStaleConnectionPurgeInterval", "0");
		// Is ipv6 protocol stack available in the Streams machine where the
		// WebSocketSink operator is going to run?
		// Most of the Linux machines will have ipv6. In that case,
		// you can keep the following line as it is.
		// If you don't have ipv6 in your environment, you can set the
		// following submission time value to false.
		expression<boolean> $ipv6Available : (boolean)
			getSubmissionTimeValue("ipv6Available", "true");
		// Whitelist to accept connections only from specific
		// IP addresses belonging to the remote WebSocket clients.
		// Default is an empty list to indicate all client connections
		// are accepted without any restrictions. If there is a need to
		// accept connections only from certain clients, then a list
		// as shown below can be used  by including wild cards as needed.
		// e-g: "['172.34.18.212', '10.5.23.17', '172.*.42.*', '10.29.42.*']" 
		expression<list<rstring>> $clientWhitelist : (list<rstring>)
			getSubmissionTimeValue("clientWhitelist", "[]");
		// Specify a maximum number of concurrent client connections to be
		// allowed by the WebSocket server available inside the WebSocketSink operator.
		expression<uint32> $maxClientConnectionsAllowed : (uint32)
			getSubmissionTimeValue('maxClientConnectionsAllowed', "32");	
		// How many data items we want to send to the remote WebSocket clients?
		expression<uint32> $numberOfDataItemsToBeSent :
			(uint32)getSubmissionTimeValue("numberOfDataItemsToBeSent", "1000");
			
	type
		// The following schema defines the required attributes for the 
		// first input stream of the WebSocketSink operator. You can have 
		// either one or both of these attributes depending on your needs.
		// It should also have one more attribute list<rstring> sendToUrlContextPaths.
	    // This sendToUrlContextPaths attribute can be used to send a given data item to 
      	// one or more remote clients that accessed a particular url context path by including
      	// such context paths as elements in the list. If this attribute has an empty list, 
      	// then a given data item will be sent to all the connected clients irrespective of 
      	// the url context paths they accessed. 
      	// e-g: It can be [] to send to all (OR) 
      	// ['Orders', '', 'MyServices/Banking/Deposit'] to send to those 
      	// clients who accessed a particular URL context.
		SendData_t = rstring strData, blob blobData, list<rstring> sendToUrlContextPaths; 
		
		// The following schema defines the required attribute for the optional
		// second input stream of the WebSocketSink operator. This input stream
		// allows for dynamically changing the client whitelist when the 
		// application is running.
		ClientWhitelist_t = list<rstring> clientWhitelist;

	graph
		// Let us generate binary data for the testing need of this application.
		(stream<SendData_t> BinaryData as BD) 
			as BinaryDataGenerator = Beacon() {
			param
				iterations: $numberOfDataItemsToBeSent;
				// Give enough time for one or more copies of the
				// companion WebSocketClientApp to get started first and then
				// connect or reconnect to the WebSocketSink operator below.
				initDelay: 70.0;
			
			output
				// Read more about the sendToUrlContextPaths attribute in the
				// commentary section of the schema definition above.
				BD: blobData = convertToBlob("This data item " + 
					(rstring)(IterationCount() + 1ul) + " is sent as a blob."),
					sendToUrlContextPaths = (list<rstring>)[];
		}
		
		// Let us generate text data for the testing need of this application.
		(stream<SendData_t> TextData as TD) 
			as TextDataGenerator = Beacon() {
			param
				iterations: $numberOfDataItemsToBeSent;
				// Give enough time for one or more copies of the
				// companion WebSocketClientApp to get started first and then
				// connect or reconnect to the WebSocketSink operator below.
				initDelay: 70.0;
			
			output
				// Read more about the sendToUrlContextPaths attribute in the
				// commentary section of the schema definition above.
				TD: strData = "This data item " + 
					(rstring)(IterationCount() + 1ul) + " is sent as a text.",
					sendToUrlContextPaths = (list<rstring>)[];
		}		

		// This operator reads a hot file to fetch any user provided
		// new client whitelist value. Please read a test data file 
		// (client-whitelist.txt) included in the data directory of this 
		// example for instructions to learn about  how to add a 
		// new client whitelist.
		//
		// IMPORTANT
		// ---------
		// Dynamically updating a client whitelist is purely an
		// optional feature available in the WebSocketSink operator.
		// If your application doesn't need it, you don't have to use this feature.
		(stream<ClientWhitelist_t> ClientWhitelist as CW) 
			as ClientWhitelistReader = FileSource() {
			param
				file: "client-whitelist.txt";
				hotFile: true;
				initDelay: 15.0;
		}

		// Send text data or binary data or both to the
		// remote WebSocket clients that are connected to
		// this operator at a given time.
		//
		// IMPORTANT
		// ---------
		// Dynamically updating a client whitelist is purely an
		// optional feature available in the WebSocketSink operator via its 2nd input port.
		// If your application doesn't need it, you don't have to use this feature.		
		() as MySink1 = WebSocketSink(BinaryData, TextData as D; ClientWhitelist) {
			logic
				state: {
					// Initialize the default TLS certificate file name if the 
					// user didn't provide his or her own.
					rstring _certificateFileName = 
						($certificateFileName != "") ?
						$certificateFileName : getThisToolkitDir() + "/etc/ws-server.pem";
				}
				
			param
				tlsPort: $tlsPort;
				certificateFileName: _certificateFileName;
				certificatePassword: $certificatePassword;
				trustedClientCertificateFileName: $trustedClientCertificateFileName;
				// Use this only when you have trouble authenticating clients that 
				// have self signed certificates.
				trustedClientX509SubjectIdentifiers: $trustedClientX509SubjectIdentifiers;
				nonTlsEndpointNeeded: $nonTlsEndpointNeeded;
				nonTlsPort: $nonTlsPort;
				urlContextPath: $urlContextPath;
				websocketLiveMetricsUpdateNeeded: $websocketLiveMetricsUpdateNeeded;
				websocketLoggingNeeded: $websocketLoggingNeeded;
				wsConnectionLoggingNeeded: $wsConnectionLoggingNeeded;
				wsClientSessionLoggingNeeded: $wsClientSessionLoggingNeeded;
				websocketStaleConnectionPurgeInterval: $websocketStaleConnectionPurgeInterval;
				ipv6Available: $ipv6Available;
				clientWhitelist: $clientWhitelist;
				maxClientConnectionsAllowed: $maxClientConnectionsAllowed;
		}
}
