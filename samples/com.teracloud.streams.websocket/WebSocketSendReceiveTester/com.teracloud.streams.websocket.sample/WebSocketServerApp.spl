/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2020
==============================================
*/

/*
==============================================
First created on: Apr/25/2020
Last modified on: Aug/31/2020

This application is a companion application that must be used while
demonstrating the use of the WebSocketSendReceive operator available
in the websocket toolkit. This application here simply provides
a WebSocket server that is needed to test the other main composite i.e.
application (WebSocketSendReceiveTester) available in the same example project.

[
In this example, we also show how to do mutual authentication
i.e. client and server authentication. In the C++ based WebSocketSendReceive
client operator, we show the use of the trusted server's public certificate and
the client's private key and its public certificate. In a C++ WebSocketSource operator,
we show how it uses the client's public certificate to do the peer verification.
]

Even though it is labeled as a source operator, WebSocketSource can be 
configured to perform like an analytic operator to receive data from the  
clients (WS or HTTP or both), process that data and send result/response back to a given client.
This companion application does exacly that. Please refer to the operator
invocation below where you will see in input port through which response data
can be fed into the operator. This application also shows the use of
another optional input port that can be used to dynamically update the
client whitelist.

It is necessary to run this application first before running the 
WebSocketSendReceiveTester application so that there will be a 
WebSocket server available for making a connection.

You can build this example from command line via the make command by using the
Makefile available in the top-level directory of this example. Inside that
Makefile, it will be necessary to export the STREAMS_WEBSOCKET_TOOLKIT 
environment variable by pointing it to the full path of your 
websocket/com.teracloud.streams.websocket directory.

==============================================
*/
namespace com.teracloud.streams.websocket.sample;

// We will use the WebSocketSource operator from this namespace. 
use com.teracloud.streams.websocket.op::*;

// This is the main composite for this application.
composite WebSocketServerApp {
	param
		// WebSocket connectivity related submission time values are defined below.
		// TLS port on which this application will listen for
		// communicating with the remote WebSocket clients.
		expression<uint32> $tlsPort : 
			(uint32)getSubmissionTimeValue("tlsPort", "8443");
		// User can optionally specify whether they want a non-TLS endpoint.
		expression<boolean> $nonTlsEndpointNeeded : 
			(boolean)getSubmissionTimeValue("nonTlsEndpointNeeded", "false");
		// Non-TLS (Plain) port on which this application will
		// (optionally) listen for communicating with the remote WebSocket clients.
		expression<uint32> $nonTlsPort : 
			(uint32)getSubmissionTimeValue("nonTlsPort", "8080");
		// Do you want to use a specific URL context path for the WebSocketSource operator?
        // It can either be a single or a multi-part path.
        // e-g: Orders (OR) MyServices/Banking/Deposit
        // With that example, WebSocket server URL should either be 
        // https://host:port/Orders   (OR)
        // https://host:port/MyServices/Banking/Deposit
        // Default is an empty list to indicate no url context path.
        // You can expose any number of context paths for the 
        // remote clients to access this WebSocket server endpoint. 
        // e-g: []    (OR)    ['Orders', '', 'MyServices/Banking/Deposit']
		expression<list<rstring>> $urlContextPath : (list<rstring>)
			getSubmissionTimeValue("urlContextPath", "[]");
		// Server side certificate (.pem) file for the WebSocket server.
		// It is necessary for the users to create a Root CA signed 
		// server side certificate file and point to that file at the time of
		// starting this application. If the user doesn't point to this file
		// at the time of starting the application, then the application will
		// look for a default file named ws-server.pem inside the etc sub-directory
		// of the application. This certificate will be presented to the
		// remote client for validation when it establishes a WebSocket 
		// connection with this application. For doing quick tests, you may save
		// time and effort needed in getting a proper Root CA signed certificate 
		// by going with a simpler option of creating your own self-signed 
		// certificate. Please ensure that using a self-signed certificate is 
		// allowed in your environment. We have provided a set of instructions to
		// create a self signed certificate. Please refer to the following
		// file in the etc sub-directory of this application:
		// etc/creating-a-self-signed-certificate.txt
		expression<rstring> $certificateFileName :
			getSubmissionTimeValue("certificateFileName", "");
		// Is a password needed for the private key in the certificate file?
		expression<rstring> $certificatePassword : 
			getSubmissionTimeValue("certificatePassword", "");
		// Do you want to specifiy a file name that contains the public certificates of
		// the trusted client(s). If this file name is not empty, then the
		// WebSocketSource operator will perform a client (mutual) authentication.
		expression<rstring> $trustedClientCertificateFileName :
			getSubmissionTimeValue("trustedClientCertificateFileName", "");	
		// Do you want to specify a list of identifiers present in the 
		// trusted client's X509 certificate's subject line. If that certificate is
		// self signed, then it will help during the client (mutual) authentication to approve
		// that client's identity as a known one.
		// 
		// Following are some examples of the subject line as it appears in an X509 public certificate.
		// /C=US/ST=NY/L=Yorktown Heights/O=IBM/OU=AI/CN=websocket.streams/emailAddress=websocket.streams@ibm.com
		// /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
		// /C=BE/O=GlobalSign nv-sa/CN=GlobalSign CloudSSL CA - SHA256 - G3
		// /C=US/O=Google Trust Services/CN=GTS CA 1O1
		// /C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
		// /C=US/ST=New York/L=Armonk/O=IBM/CN=www.ibm.com
		//
		// So your value for this submission time parameter can be as shown here.
		// ['emailAddress=websocket.streams@ibm.com', 'CN=www.ibm.com']
		expression<list<rstring>> $trustedClientX509SubjectIdentifiers :
			(list<rstring>)getSubmissionTimeValue("trustedClientX509SubjectIdentifiers", "[]");	
		// Is live metrics needed for the WebSocketSource operator?
		expression<boolean> $websocketLiveMetricsUpdateNeeded : 
			(boolean)getSubmissionTimeValue("websocketLiveMetricsUpdateNeeded", "true");
		// Is WebSocket library low level logging needed?
		expression<boolean> $websocketLoggingNeeded : 
			(boolean)getSubmissionTimeValue("websocketLoggingNeeded", "false");
		// Is WebSocket client connection logging needed?
		expression<boolean> $wsConnectionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsConnectionLoggingNeeded", "false");
		// Is client message exchange logging needed for debugging?
		expression<boolean> $wsClientSessionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsClientSessionLoggingNeeded", "false");
		// Time in seconds to wait before starting the WebSocket server inside the source operator.
		expression<float64> $initDelayBeforeReceivingData :
			(float64)getSubmissionTimeValue("initDelayBeforeReceivingData", "15.0"); 
		// Time interval in seconds during which the WebSocket source operator below should
		// do memory cleanup of any remote client sessions that end abruptly without 
		// closing the connection. In this application, there is no need to 
		// purge stale connections as clients will be long running and 
		// properly disconnect when they go away. 
		expression<uint32> $websocketStaleConnectionPurgeInterval :(uint32)
			getSubmissionTimeValue("websocketStaleConnectionPurgeInterval", "0");
		// Is ipv6 protocol stack available in the Streams machine where the
		// WebSocketSource operator is going to run?
		// Most of the Linux machines will have ipv6. In that case,
		// you can keep the following line as it is.
		// If you don't have ipv6 in your environment, you can set the
		// following submission time value to false.
		expression<boolean> $ipv6Available : (boolean)
			getSubmissionTimeValue("ipv6Available", "true");
		// Specify the number of received messages from a given client after which 
		// an ack should be sent back to that client.
		// This has no effect if the WebSocketSource operator is configured with a
		// "result/response to the client" input port.
		expression<uint32> $numberOfMessagesToReceiveBeforeAnAck :(uint32)
			getSubmissionTimeValue("numberOfMessagesToReceiveBeforeAnAck", "0");
		// Specify if we want to allow the client applications to do an HTTP POST.
		expression<boolean> $allowHttpPost : (boolean)
			getSubmissionTimeValue("allowHttpPost", "false");
		// Whitelist to accept connections only from specific
		// IP addresses belonging to the remote WebSocket clients.
		// Default is an empty list to indicate all client connections
		// are accepted without any restrictions. If there is a need to
		// accept connections only from certain clients, then a list
		// as shown below can be used  by including wild cards as needed.
		// e-g: "['172.34.18.212', '10.5.23.17', '172.*.42.*', '10.29.42.*']" 
		expression<list<rstring>> $clientWhitelist : (list<rstring>)
			getSubmissionTimeValue("clientWhitelist", "[]");
		// Specify a maximum number of concurrent client connections to be
		// allowed by the WebSocket server available inside the WebSocketSource operator.
		expression<uint32> $maxClientConnectionsAllowed : (uint32)
			getSubmissionTimeValue('maxClientConnectionsAllowed', "32");

	type
		// The following is the schema of the first output stream for the
		// WebSocketSource operator. The first three attributes are
		// very important and the other ones are purely optional if some
		// scenarios really require them.
		// rstring strData --> String based data (plain text, JSON and XML) received from the remote client.
		// blob blobData --> Binary based data (audio, video, image etc.) received from the remote client.
		// uint64 clientSessionId --> Unique identifier of a remote client as assigned by this operator. 
		// rstring clientIpAddress --> IP address of the remote client from where the data was received.
		// rstring clientPort --> Port of the remote client from where the data was received.
		// rstring urlContextPath --> Context path present in the URL being accessed by a client.
		// boolean isWebSocketClient --> True indicates that the remote client holds a WebSocket connection.
		// boolean isHttpClient --> True indicates that the remote client holds a Http connection.
		// rstring httpRequestMethodName --> It tells us about the HTTP request whether it is a GET or PUT or POST.
		// map<rstring, rstring> urlQueryStringKeyValuePairs --> It has the HTTP GET URL query string key/value pairs.
		// uint64 totalDataItemsReceived --> Total data items received so far from a given clientSessionId.
		// uint64 totalDataBytesReceived --> Number of data bytes received so far from a given clientSessionId.
		// uint64 totalDataItemsSent --> Total data items sent so far to a given clientSessionId.
		// uint64 totalDataBytesSent --> Number of data bytes sent so far to a given clientSessionId.
		ReceivedData_t = rstring strData, blob blobData, uint64 clientSessionId, 
			rstring clientIpAddress, rstring clientPort, rstring urlContextPath,
			boolean isWebSocketClient, boolean isHttpClient,
			rstring httpRequestMethodName,
			map<rstring, rstring> urlQueryStringKeyValuePairs,
			uint64 totalDataItemsReceived, uint64 totalDataBytesReceived,
			uint64 totalDataItemsSent, uint64 totalDataBytesSent;
			
		// The following schema is for the second output stream of the
		// WebSocketSource operator. It has one attribute indicating
		// the a given remote client (clientSessionId) which ended the session.
		EndOfClientSessionSignal_t = uint64 clientSessionId;
		
		// The following schema is for the "data result/response back to the client" 
		// input port that can be optionally specified in the WebSocketSource operator.
		// This input port can carry the response to be sent to a remote client from
		// where a data item was just now received.
		ResponseData_t = rstring strData, blob blobData, uint64 clientSessionId;
		
		// The following schema defines the required attribute for the optional
		// input stream of the WebSocketSource operator. This input stream
		// allows for dynamically changing the client whitelist when the 
		// application is running.
		ClientWhitelist_t = list<rstring> clientWhitelist;

	graph
		// This operator reads a hot file to fetch any user provided
		// new client whitelist value. Please read a test data file 
		// (client-whitelist.txt) included in the data directory of this 
		// example for instructions to learn about  how to add a 
		// new client whitelist.
		//
		// IMPORTANT
		// ---------
		// Dynamically updating a client whitelist is purely an
		// optional feature available in the WebSocketSource operator.
		// If your application doesn't need it, you don't have to use this feature.
		(stream<ClientWhitelist_t> ClientWhitelist as CW) 
			as ClientWhitelistReader = FileSource() {
			param
				file: "client-whitelist.txt";
				hotFile: true;
				initDelay: $initDelayBeforeReceivingData;
		}
		
		// Receive text data or binary data or both from the
		// remote WebSocket clients and send a response back to the
		// cleient from the data item was received.
		// [This operator can optionally receive two input ports.
		//  One of those two input ports can be used to send a 
		//  response to a client by roundtripping back to that same 
		//  client from where a text or binary data item was received. 
		//  The other input port can be used to dynamically update 
		//  the client whitelist. Those two input ports can be in any order. 
		//  i.e. both of them can be absent or only one of them can be present or
		//  both of them can be present.]
		//
		// NOTE: Consuming the ResponseData stream below in an input port will 
		// make the compiler to give a "Feedback Loop" warning which can be ignored.
		//
		// IMPORTANT
		// ---------
		// Dynamically updating a client whitelist is purely an
		// optional feature available in the WebSocketSource operator via its input port.
		// If your application doesn't need it, you don't have to use this feature.		
		(stream<ReceivedData_t> WebSocketRxData as WSRD;
		 stream<EndOfClientSessionSignal_t> EndOfClientSessionSignal as EOCSS) 
			as WebSocketDataReceiver = WebSocketSource(ResponseData; ClientWhitelist) {
			logic
				state: {
					// Initialize the default TLS certificate file name if the 
					// user didn't provide his or her own.
					rstring _certificateFileName = 
						($certificateFileName != "") ?
						$certificateFileName : getThisToolkitDir() + "/etc/ws-server.pem";
				}
				
			param
				tlsPort: $tlsPort;
				certificateFileName: _certificateFileName;
				certificatePassword: $certificatePassword;
				trustedClientCertificateFileName: $trustedClientCertificateFileName;
				// Use this only when you have trouble authenticating clients that 
				// have self signed certificates.
				trustedClientX509SubjectIdentifiers: $trustedClientX509SubjectIdentifiers;
				nonTlsEndpointNeeded: $nonTlsEndpointNeeded;
				nonTlsPort: $nonTlsPort;
				urlContextPath: $urlContextPath;
				// Initial delay before generating the very first tuple.
				// This is a one time delay when this operator starts up.
				// This delay should give sufficient time for the
				// downstream operator(s) to come up and be ready to
				// receive the data tuples sent by this operator.
				initDelay: $initDelayBeforeReceivingData;
				websocketLiveMetricsUpdateNeeded: $websocketLiveMetricsUpdateNeeded;
				websocketLoggingNeeded: $websocketLoggingNeeded;
				wsConnectionLoggingNeeded: $wsConnectionLoggingNeeded;
				wsClientSessionLoggingNeeded: $wsClientSessionLoggingNeeded;
				websocketStaleConnectionPurgeInterval: $websocketStaleConnectionPurgeInterval;
				ipv6Available: $ipv6Available;
				numberOfMessagesToReceiveBeforeAnAck: $numberOfMessagesToReceiveBeforeAnAck;
				// Are we going to allow client applications to send their 
				// text based data (plain text, JSON, XML etc.) via HTTP/HTTPS POST?
				allowHttpPost: $allowHttpPost;
				clientWhitelist: $clientWhitelist;
				maxClientConnectionsAllowed: $maxClientConnectionsAllowed;
			
			// Get these values via custom output functions	provided by this operator.
			output
			    // strData and/or blobData attributes will be automatically
			    // assigned with values by the operator logic.
			    // Other attributes can be assigned manually as done below.
				WSRD: clientSessionId = getClientSessionId(),
					clientIpAddress = getClientIpAddress(),
					clientPort = getClientPort(),
					urlContextPath = getUrlContextPath(),
					isWebSocketClient = isWebSocketClient(),
					isHttpClient = isHttpClient(),
					httpRequestMethodName = getHttpRequestMethodName(),
					urlQueryStringKeyValuePairs = getUrlQueryStringKeyValuePairs(),
					totalDataItemsReceived = getTotalDataItemsReceived(),
					totalDataBytesReceived = getTotalDataBytesReceived(),
					totalDataItemsSent = getTotalDataItemsSent(),
					totalDataBytesSent = getTotalDataBytesSent();

			// A MUST THING TO DO
			// ------------------
			// For the feedback loop logic to work as explained in the
			// commentary above, you must have this placement directive to launch 
			// this operator in its own PE (i.e. Linux process) that is away from 
			// the Custom operator below which is at the other end of the feedback loop.
			// This is done for a valid reason. Infinite recursion occurs when operators with 
			// feedback loops are fused; when the operator submits a tuple to its output port, 
			// the subsequent submit() calls lead to a loop of other submit() calls, 
			// effectively overflowing the call stack. By avoiding this operator from getting 
			// fused, we ensure that it will not lead to deadlocks or stack overflow due to 
			// infinite recursion.
			config
				placement: partitionIsolation;
		}

		// This operator receives the content sent by the remote
		// WebSocket client and normalizes that data into string format before 
		// sending it to the sink operator below that is used for verifying the 
		// data that was sent here by the remote client.
		// In addition, it also adds its signature to the received data and 
		// sends it back to the remote client as a response.
		//
		// NOTE
		// ----
		// The second output stream will be fed back to an input port of the
		// WebSocketSource operator above. That will trigger a feedback loop
		// warning from the compiler which can be ignored.
		(stream<ReceivedData_t> RxData as RXD;
		 stream<ResponseData_t> ResponseData as RD) 
		 	as SentDataNormalizer = Custom(WebSocketRxData as WSRD; 
			EndOfClientSessionSignal as EOCSS) {
			logic
				state: {
					mutable ResponseData_t _responseData = {};
				}
				
				onTuple WSRD: {
					// Find the blob data length.
					int32 blobDataLength = blobSize(WSRD.blobData);
					
					// Let us prepare a response tuple now.
					// In a real-life scenario, this is where the data item/message
					// received from a remote client will be processed and a 
					// meaningful response will get sent back to that same client.
					// In this example application, we are simply going to echo 
					// what we received after modifying it a little bit.
					_responseData = (ResponseData_t){};
					
					if (length(WSRD.strData) > 0) {
						_responseData.strData = "Remote WebSocket server echoed back the strData: " +
							WSRD.strData;
					}

					// If we have received binary data, let us normalize it to
					// string so that we can write it to a file in the
					// sink operator below for verifying the results.
					if (blobDataLength > 0) {
						WSRD.strData = convertFromBlob(WSRD.blobData);
						clearM(WSRD.blobData);
						_responseData.blobData = convertToBlob(
							"Remote WebSocket server echoed back the blobData: " + WSRD.strData);
					}
					
					// Send this received data item for writing to a file.
					submit(WSRD, RXD);
					// Send this response to the client from where we received the data item.
					_responseData.clientSessionId = WSRD.clientSessionId;
					submit(_responseData, RD);
				}
				
				onTuple EOCSS: {
					// This is an End Of Client Session Signal.
					// You can use this signal arriving on the second incoming port to
					// identify the end of a given remote client. In your own application logic,
					// you may want to add other logic here as you please. 
					appTrc(Trace.debug, "WebSocket session ended for a remote client: " + (rstring)EOCSS);
				}
		} // End of Custom operator,

		// Let us write the data sent by the remote client to a file.
		() as MySink1 = FileSink(RxData) {
			param
				file: "ws-sent-data-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}
}
